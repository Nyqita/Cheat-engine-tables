function frequent_world_battles(auto_set)
  local freq_wb = createTimer(nil, false)
  debug_print(5, "Set", nil, "frequent_world_battles")
  freq_wb.OnTimer = function()
    local can_occur = base_mem + cfg.random_battles_world_enabled
    local distance_occur = base_mem + cfg.random_battles_world_safe_distance
    local ticked_over = base_mem + cfg.random_battles_world_loop_count
    debug_print(5, "Activated", nil, "frequent_world_battles")
    debug_print(8, "World random encounters enabled : " .. nb(can_occur), nil, "frequent_world_battles")
    debug_print(8, "World random encounters safe distance : " .. nb(distance_occur), nil, "frequent_world_battles")
    debug_print(8, "World random encounters loop count : " .. nb(ticked_over), nil, "frequent_world_battles")
    writeBytes(can_occur, 1)
    writeInteger(distance_occur, 0xF)
    writeBytes(ticked_over, 0xFF)
  end
  if auto_set then
    freq_wb.Interval = 100
    freq_wb.Enabled = true
  end
  return freq_wb
end

function no_world_battles(auto_set)
  NoWorldRandomEncounters = createTimer(nil, false)
  no_wb = NoWorldRandomEncounters
  no_wb.OnTimer = function()
    local can_occur = base_mem + cfg.random_battles_world_enabled
    writeBytes(can_occur, 0)
  end
  if auto_set then
    no_wb.Interval = 100
    no_wb.Enabled = true
  end
  return no_wb
end

function frequent_field_battles(auto_set)
  local FrequentFieldRandomEncounters = createTimer(nil, false)
  local freq_fb = FrequentFieldRandomEncounters
  freq_fb.OnTimer = function()
    writeSmallInteger(base_mem + cfg.random_battles_field, 0xFEE0)
  end
  if auto_set then
    freq_fb.Interval = 100
    freq_fb.Enabled = true
  end
  return freq_fb
end

function no_field_battles(auto_set)
  NoFieldRandomEncounters = createTimer(nil, false)
  no_fb = NoFieldRandomEncounters
  no_fb.OnTimer = function()
    writeSmallInteger(base_mem + cfg.random_battles_field, 0x0)
  end

  if auto_set then
    no_fb.Interval = 20
    no_fb.Enabled = true
  end
  return no_fb
end

function fast_limit_breaks(auto_set)
  local args = {
    number_of_children = 3,
    base_address       = base_mem + cfg.battle_limit_break_base,
    base_increment     = cfg.battle_limit_break_offset,
    base_value         = 255,
  }
  local fast_lb = lwt(args)
  if auto_set then
    fast_lb.Enabled = true
  end
  return fast_lb
end

function full_atb(auto_set)
  local args = {
    number_of_children = 3,
    base_address       = base_mem + cfg.battle_atb_base,
    base_increment     = cfg.battle_atb_offset,
    base_value         = 255,
  }
  local atb = lwt(args)
  if auto_set then
    atb.Interval = 100
    atb.Enabled = true
  end
  return atb
end

function all_key_items()
  writeBytes(base_mem + cfg.key_items, { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07 })
end

function battle_hp_current(auto_set, hp_value)
  local args = {
    number_of_children = 3,
    base_address       = base_mem + cfg.battle_stats_base,
    base_increment     = cfg.battle_stats_offset,
    base_value         = hp_value,
    type               = 1,
  }
  local current_hp = lazy_write_timer(args)
  if auto_set then
    current_hp.Enabled = true
  end
  return current_hp
end

function battle_hp_max(auto_set, hp_value)
  local args = {
    number_of_children = 3,
    base_address       = base_mem + cfg.battle_stats_base + 4,
    base_increment     = cfg.battle_stats_offset,
    base_value         = hp_value,
    type               = 1,
  }
  local max_hp = lazy_write_timer(args)
  if auto_set then
    max_hp.Enabled = true
  end
  return max_hp
end

function battle_mp_max(auto_set, mp_value)
  local args = {
    number_of_children = 3,
    base_address       = base_mem + cfg.battle_stats_base - 2,
    base_increment     = cfg.battle_stats_offset,
    base_value         = mp_value,
    type               = 1,
  }
  local max_mana = lazy_write_timer(args)
  if auto_set then
    max_mana.Enabled = true
  end
  return max_mana
end

function battle_mp_current(auto_set, mp_value)
  local args = {
    number_of_children = 3,
    base_address       = base_mem + cfg.battle_stats_base - 4,
    base_increment     = cfg.battle_stats_offset,
    base_value         = mp_value,
    type               = 1,
  }
  local cur_mana = lazy_write_timer(args)
  if auto_set then
    cur_mana.Enabled = true
  end
  return cur_mana
end

function infinite_items(auto_set, item_quantity)
  local item_quan = item_quantity or 99
  local i_q = item_quan * 2
  local menu_items_bytes = { 0x00, i_q, 0x01, i_q, 0x02, i_q, 0x03, i_q, 0x04, i_q, 0x05, i_q, 0x06, i_q, 0x07, i_q, 0x08, i_q, 0x09, i_q, 0x0A, i_q, 0x0B, i_q, 0x0C, i_q, 0x0D, i_q, 0x0E, i_q, 0x0F, i_q, 0x10, i_q, 0x11, i_q, 0x12, i_q, 0x13, i_q, 0x14, i_q, 0x15, i_q, 0x16, i_q, 0x17, i_q, 0x18, i_q, 0x19, i_q, 0x1A, i_q, 0x1B, i_q, 0x1C, i_q, 0x1D, i_q, 0x1E, i_q, 0x1F, i_q, 0x20, i_q, 0x21, i_q, 0x22, i_q, 0x23, i_q, 0x24, i_q, 0x25, i_q, 0x26, i_q, 0x27, i_q, 0x28, i_q, 0x29, i_q, 0x2A, i_q, 0x2B, i_q, 0x2C, i_q, 0x2D, i_q, 0x2E, i_q, 0x2F, i_q, 0x30, i_q, 0x31, i_q, 0x32, i_q, 0x33, i_q, 0x34, i_q, 0x35, i_q, 0x36, i_q, 0x37, i_q, 0x38, i_q, 0x39, i_q, 0x3A, i_q, 0x3B, i_q, 0x3C, i_q, 0x3D, i_q, 0x3E, i_q, 0x3F, i_q, 0x40, i_q, 0x41, i_q, 0x42, i_q, 0x43, i_q, 0x44, i_q, 0x45, i_q, 0x46, i_q, 0x47, i_q, 0x48, i_q, 0x49, i_q, 0x4A, i_q, 0x4B, i_q, 0x4C, i_q, 0x4D, i_q, 0x4E, i_q, 0x4F, i_q, 0x50, i_q, 0x51, i_q, 0x52, i_q, 0x53, i_q, 0x54, i_q, 0x55, i_q, 0x56, i_q, 0x57, i_q, 0x58, i_q, 0x59, i_q, 0x5A, i_q, 0x5B, i_q, 0x5C, i_q, 0x5D, i_q, 0x5E, i_q, 0x5F, i_q, 0x60, i_q, 0x61, i_q, 0x62, i_q, 0x63, i_q, 0x64, i_q, 0x65, i_q, 0x66, i_q, 0x67, i_q, 0x68, i_q, 0x00, i_q + 1, 0x01, i_q + 1, 0x02, i_q + 1, 0x03, i_q + 1, 0x04, i_q + 1, 0x05, i_q + 1, 0x06, i_q + 1, 0x07, i_q + 1, 0x08, i_q + 1, 0x09, i_q + 1, 0x0A, i_q + 1, 0x0B, i_q + 1, 0x0C, i_q + 1, 0x0D, i_q + 1, 0x0E, i_q + 1, 0x0F, i_q + 1, 0x10, i_q + 1, 0x11, i_q + 1, 0x12, i_q + 1, 0x13, i_q + 1, 0x14, i_q + 1, 0x15, i_q + 1, 0x16, i_q + 1, 0x17, i_q + 1, 0x18, i_q + 1, 0x19, i_q + 1, 0x1A, i_q + 1, 0x1B, i_q + 1, 0x1C, i_q + 1, 0x1D, i_q + 1, 0x1E, i_q + 1, 0x1F, i_q + 1, 0x20, i_q + 1, 0x21, i_q + 1, 0x22, i_q + 1, 0x23, i_q + 1, 0x24, i_q + 1, 0x25, i_q + 1, 0x26, i_q + 1, 0x27, i_q + 1, 0x28, i_q + 1, 0x29, i_q + 1, 0x2A, i_q + 1, 0x2B, i_q + 1, 0x2C, i_q + 1, 0x2D, i_q + 1, 0x2E, i_q + 1, 0x2F, i_q + 1, 0x30, i_q + 1, 0x31, i_q + 1, 0x32, i_q + 1, 0x33, i_q + 1, 0x34, i_q + 1, 0x35, i_q + 1, 0x36, i_q + 1, 0x37, i_q + 1, 0x38, i_q + 1, 0x39, i_q + 1, 0x3A, i_q + 1, 0x3B, i_q + 1, 0x3C, i_q + 1, 0x3D, i_q + 1, 0x3E, i_q + 1, 0x3F, i_q + 1, 0x80, i_q, 0x81, i_q, 0x82, i_q, 0x83, i_q, 0x84, i_q, 0x85, i_q, 0x86, i_q, 0x87, i_q, 0x88, i_q, 0x89, i_q, 0x8A, i_q, 0x8B, i_q, 0x8C, i_q, 0x8D, i_q, 0x8E, i_q, 0x8F, i_q, 0x90, i_q, 0x91, i_q, 0x92, i_q, 0x93, i_q, 0x94, i_q, 0x95, i_q, 0x96, i_q, 0x97, i_q, 0x98, i_q, 0x99, i_q, 0x9A, i_q, 0x9B, i_q, 0x9C, i_q, 0x9D, i_q, 0x9E, i_q, 0x9F, i_q, 0xA0, i_q, 0xA1, i_q, 0xA2, i_q, 0xA3, i_q, 0xA4, i_q, 0xA5, i_q, 0xA6, i_q, 0xA7, i_q, 0xA8, i_q, 0xA9, i_q, 0xAA, i_q, 0xAB, i_q, 0xAC, i_q, 0xAD, i_q, 0xAE, i_q, 0xAF, i_q, 0xB0, i_q, 0xB1, i_q, 0xB2, i_q, 0xB3, i_q, 0xB4, i_q, 0xB5, i_q, 0xB6, i_q, 0xB7, i_q, 0xB8, i_q, 0xB9, i_q, 0xBA, i_q, 0xBB, i_q, 0xBC, i_q, 0xBD, i_q, 0xBE, i_q, 0xBF, i_q, 0xC0, i_q, 0xC1, i_q, 0xC2, i_q, 0xC3, i_q, 0xC4, i_q, 0xC5, i_q, 0xC6, i_q, 0xC7, i_q, 0xC8, i_q, 0xC9, i_q, 0xCA, i_q, 0xCB, i_q, 0xCC, i_q, 0xCD, i_q, 0xCE, i_q, 0xCF, i_q, 0xD0, i_q, 0xD1, i_q, 0xD2, i_q, 0xD3, i_q, 0xD4, i_q, 0xD5, i_q, 0xD6, i_q, 0xD7, i_q, 0xD8, i_q, 0xD9, i_q, 0xDA, i_q, 0xDB, i_q, 0xDC, i_q, 0xDD, i_q, 0xDE, i_q, 0xDF, i_q, 0xE0, i_q, 0xE1, i_q, 0xE2, i_q, 0xE3, i_q, 0xE4, i_q, 0xE5, i_q, 0xE6, i_q, 0xE7, i_q, 0xE8, i_q, 0xE9, i_q, 0xEA, i_q, 0xEB, i_q, 0xEC, i_q, 0xED, i_q, 0xEE, i_q, 0xEF, i_q, 0xF0, i_q, 0xF1, i_q, 0xF2, i_q, 0xF3, i_q, 0xF4, i_q, 0xF5, i_q, 0xF6, i_q, 0xF7, i_q, 0xF8, i_q, 0xF9, i_q, 0xFA, i_q, 0xFB, i_q, 0xFC, i_q, 0xFD, i_q, 0xFE, i_q }
  local menu_items_bytes_sorted = { 0x00, i_q, 0x01, i_q, 0x02, i_q, 0x03, i_q, 0x04, i_q, 0x05, i_q, 0x06, i_q, 0x07, i_q, 0x08, i_q, 0x09, i_q, 0x0A, i_q, 0x0B, i_q, 0x0C, i_q, 0x0D, i_q, 0x0E, i_q, 0x0F, i_q, 0x10, i_q, 0x11, i_q, 0x12, i_q, 0x13, i_q, 0x14, i_q, 0x15, i_q, 0x16, i_q, 0x17, i_q, 0x18, i_q, 0x19, i_q, 0x1A, i_q, 0x1B, i_q, 0x1C, i_q, 0x1D, i_q, 0x1E, i_q, 0x1F, i_q, 0x20, i_q, 0x21, i_q, 0x22, i_q, 0x23, i_q, 0x24, i_q, 0x25, i_q, 0x26, i_q, 0x27, i_q, 0x28, i_q, 0x29, i_q, 0x2A, i_q, 0x2B, i_q, 0x2C, i_q, 0x2D, i_q, 0x2E, i_q, 0x2F, i_q, 0x30, i_q, 0x31, i_q, 0x32, i_q, 0x33, i_q, 0x34, i_q, 0x35, i_q, 0x36, i_q, 0x37, i_q, 0x38, i_q, 0x39, i_q, 0x3A, i_q, 0x3B, i_q, 0x3C, i_q, 0x3D, i_q, 0x3E, i_q, 0x3F, i_q, 0x40, i_q, 0x41, i_q, 0x42, i_q, 0x43, i_q, 0x44, i_q, 0x45, i_q, 0x46, i_q, 0x47, i_q, 0x48, i_q, 0x49, i_q, 0x4A, i_q, 0x4B, i_q, 0x4C, i_q, 0x4D, i_q, 0x4E, i_q, 0x4F, i_q, 0x50, i_q, 0x51, i_q, 0x52, i_q, 0x53, i_q, 0x54, i_q, 0x55, i_q, 0x56, i_q, 0x57, i_q, 0x58, i_q, 0x59, i_q, 0x5A, i_q, 0x5B, i_q, 0x5C, i_q, 0x5D, i_q, 0x5E, i_q, 0x5F, i_q, 0x60, i_q, 0x61, i_q, 0x62, i_q, 0x63, i_q, 0x64, i_q, 0x65, i_q, 0x66, i_q, 0x67, i_q, 0x68, i_q, 0x80, i_q, 0x81, i_q, 0x82, i_q, 0x83, i_q, 0x84, i_q, 0x85, i_q, 0x86, i_q, 0x87, i_q, 0x88, i_q, 0x89, i_q, 0x8A, i_q, 0x8B, i_q, 0x8C, i_q, 0x8D, i_q, 0x8E, i_q, 0x8F, i_q, 0x90, i_q, 0x91, i_q, 0x92, i_q, 0x93, i_q, 0x94, i_q, 0x95, i_q, 0x96, i_q, 0x97, i_q, 0x98, i_q, 0x99, i_q, 0x9A, i_q, 0x9B, i_q, 0x9C, i_q, 0x9D, i_q, 0x9E, i_q, 0x9F, i_q, 0xA0, i_q, 0xA1, i_q, 0xA2, i_q, 0xA3, i_q, 0xA4, i_q, 0xA5, i_q, 0xA6, i_q, 0xA7, i_q, 0xA8, i_q, 0xA9, i_q, 0xAA, i_q, 0xAB, i_q, 0xAC, i_q, 0xAD, i_q, 0xAE, i_q, 0xAF, i_q, 0xB0, i_q, 0xB1, i_q, 0xB2, i_q, 0xB3, i_q, 0xB4, i_q, 0xB5, i_q, 0xB6, i_q, 0xB7, i_q, 0xB8, i_q, 0xB9, i_q, 0xBA, i_q, 0xBB, i_q, 0xBC, i_q, 0xBD, i_q, 0xBE, i_q, 0xBF, i_q, 0xC0, i_q, 0xC1, i_q, 0xC2, i_q, 0xC3, i_q, 0xC4, i_q, 0xC5, i_q, 0xC6, i_q, 0xC7, i_q, 0xC8, i_q, 0xC9, i_q, 0xCA, i_q, 0xCB, i_q, 0xCC, i_q, 0xCD, i_q, 0xCE, i_q, 0xCF, i_q, 0xD0, i_q, 0xD1, i_q, 0xD2, i_q, 0xD3, i_q, 0xD4, i_q, 0xD5, i_q, 0xD6, i_q, 0xD7, i_q, 0xD8, i_q, 0xD9, i_q, 0xDA, i_q, 0xDB, i_q, 0xDC, i_q, 0xDD, i_q, 0xDE, i_q, 0xDF, i_q, 0xE0, i_q, 0xE1, i_q, 0xE2, i_q, 0xE3, i_q, 0xE4, i_q, 0xE5, i_q, 0xE6, i_q, 0xE7, i_q, 0xE8, i_q, 0xE9, i_q, 0xEA, i_q, 0xEB, i_q, 0xEC, i_q, 0xED, i_q, 0xEE, i_q, 0xEF, i_q, 0xF0, i_q, 0xF1, i_q, 0xF2, i_q, 0xF3, i_q, 0xF4, i_q, 0xF5, i_q, 0xF6, i_q, 0xF7, i_q, 0xF8, i_q, 0xF9, i_q, 0xFA, i_q, 0xFB, i_q, 0xFC, i_q, 0xFD, i_q, 0xFE, i_q, 0x00, i_q + 1, 0x01, i_q + 1, 0x02, i_q + 1, 0x03, i_q + 1, 0x04, i_q + 1, 0x05, i_q + 1, 0x06, i_q + 1, 0x07, i_q + 1, 0x08, i_q + 1, 0x09, i_q + 1, 0x0A, i_q + 1, 0x0B, i_q + 1, 0x0C, i_q + 1, 0x0D, i_q + 1, 0x0E, i_q + 1, 0x0F, i_q + 1, 0x10, i_q + 1, 0x11, i_q + 1, 0x12, i_q + 1, 0x13, i_q + 1, 0x14, i_q + 1, 0x15, i_q + 1, 0x16, i_q + 1, 0x17, i_q + 1, 0x18, i_q + 1, 0x19, i_q + 1, 0x1A, i_q + 1, 0x1B, i_q + 1, 0x1C, i_q + 1, 0x1D, i_q + 1, 0x1E, i_q + 1, 0x1F, i_q + 1, 0x20, i_q + 1, 0x21, i_q + 1, 0x22, i_q + 1, 0x23, i_q + 1, 0x24, i_q + 1, 0x25, i_q + 1, 0x26, i_q + 1, 0x27, i_q + 1, 0x28, i_q + 1, 0x29, i_q + 1, 0x2A, i_q + 1, 0x2B, i_q + 1, 0x2C, i_q + 1, 0x2D, i_q + 1, 0x2E, i_q + 1, 0x2F, i_q + 1, 0x30, i_q + 1, 0x31, i_q + 1, 0x32, i_q + 1, 0x33, i_q + 1, 0x34, i_q + 1, 0x35, i_q + 1, 0x36, i_q + 1, 0x37, i_q + 1, 0x38, i_q + 1, 0x39, i_q + 1, 0x3A, i_q + 1, 0x3B, i_q + 1, 0x3C, i_q + 1, 0x3D, i_q + 1, 0x3E, i_q + 1, 0x3F, i_q + 1 }

  MaxQuantityAllItems = createTimer(nil, false)
  mqai = MaxQuantityAllItems
  mqai.OnTimer = function()
    writeBytes(base_mem + cfg.menu_items_base, menu_items_bytes_sorted)
  end

  mqai.Interval = 100
  if auto_set then
    mqai.Enabled = true
  end
  return mqai
end
