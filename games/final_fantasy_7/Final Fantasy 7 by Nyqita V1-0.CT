<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="28">
  <CheatEntries>
    <CheatEntry>
      <ID>4931</ID>
      <Description>"Activate / Activar / Activer / Aktivieren"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}

resetLuaState()

table_info = [[Final Fantasy VII table for Cheat Engine
Author(s)
|  Nyqita
|  |  https://github.com/nyqita
|  |  https://gitlab.com/Nyqita
|  |  https://forum.cheatengine.org/profile.php?mode=viewprofile&amp;u=528606
|  |  https://fearlessrevolution.com/memberlist.php?mode=viewprofile&amp;u=30204
Current table version
|  1.0 -- 2019-06-27 18:18:43 (UTC)
Changelog
|  Version 1.0
|  |  Most aspects of the cheat table support English, French, Spanish, and German
|  |  |  Note: Most text was translated using Google Translate - https://translate.google.co.uk/
|  |  |  This means there will inevitably be many examples of incoherent text in the other languages
|  |  Most cheat scripts and tables are tested and working correctly on all Steam versions that I
|  |  ··· had access to (FF7_EN, FF7_FR, FF7_ES, FF7_DE) and on each PlayStation version running on
|  |  ··· each supported emulator
|  |  Posted to fearlessrevolution.com
Currently supported game versions and emulators
|  Supported emulators
|  |  RetroArch v1.7.7 cores
|  |  |  Beetle PSX (mednafen_psx_libretro)
|  |  |  Beetle PSX HW (mednafen_psx_hw_libretro)
|  |  ePSXe v2.0.5
|  Supported PlayStation versions
|  |  Final Fantasy VII (USA)
|  |  |  Disc 1: SCUS_94163
|  |  |  Disc 2: SCUS_94164
|  |  |  Disc 3: SCUS_94165
|  |  Final Fantasy VII International (Japan)
|  |  |  Disc 1: SLPS_01057
|  |  |  Disc 2: SLPS_01058
|  |  |  Disc 3: SLPS_01059
|  |  |  Disc 4: SLPS_01060 - not tested
|  |  Final Fantasy VII (UK)
|  |  |  Disc 1: SCES_00867
|  |  |  Disc 2: SCES_10867
|  |  |  Disc 3: SCES_20867
|  Supported Steam versions
|  |  https://store.steampowered.com/app/39140/FINAL_FANTASY_VII/
|  |  FF7_EN.exe version 1.0.9
|  |  FF7_FR.exe version 1.0.9
|  |  FF7_ES.exe version 1.0.9
|  |  FF7_DE.exe version 1.0.9
|  |  The cheat table might be compatible with other versions that are not listed, but I haven't
|  |  ··· tested them. If you intend to try using it with untested versions, then please do not save
|  |  ··· your game after making changes - unless you're sure that nothing was broken
|  Checking feature support
|  |  You can also check how many of the cheats have been implemented for each version of the game
|  |  ··· by doing the following:
|  |  |  Open up the LUA engine window
|  |  |  |  Start at the main Cheat Engine window
|  |  |  |  click 'Memory View'
|  |  |  |  click 'Tools' menu
|  |  |  |  click 'Lua Engine'
|  |  |  Enter the following code into the text entry box without quotations or any extra characters
|  |  |  ··· or symbols
|  |  |  |  compare_versions()
|  |  |  Click the 'Execute' button to the right of the text entry box
|  |  This should list all the supported versions of the game and how many of the features have been
|  |  ··· added thus far
|  |  |  Note: Apologies if it's very confusing. Suffice to say, more 'Unimplemented addresses'
|  |  |  ··· means more features missing
Features - abridged
|  Game version detection
|  |  Upon activating the initialisation script, it will attempt to determine which version of the
|  |  ··· game Cheat Engine is currently attached to
|  |  In the case of a Steam version, it will look at the name of the executable - for example,
|  |  ··· FF7_EN.exe - and load the associated table
|  |  In the case of an emulated version, it will attempt to read the emulator's memory for some
|  |  ··· indication of which disc has been loaded
|  |  |  Note: searching the emulator's memory for identifying information about the currently
|  |  |  ··· loaded disc probably won't work for any untested emulators
|  Multiple language support
|  |  Almost all features of the table support multiple languages (this documentation being one of
|  |  ··· the exceptions)
|  |  |  Note: If you save the cheat table before deactivating the initialisation script, then the
|  |  |  ··· translations of the table might stop working. If you make changes to the table, please
|  |  |  ··· ensure you deactivate the initialisation script before attempting to save
|  Real-time generated tables
|  |  Many of the large tables (such as item inventory) are created upon activating their header
|  |  ··· script, rather than being present as hidden table entries at all times. Upon deactivating
|  |  ··· these header scripts, all child entries are deleted from the table. This should make the
|  |  ··· cheat table generally more responsive, make the file size significantly smaller, and allow
|  |  ··· changes to be made to entire sections more easily. You might notice a small delay between
|  |  ··· activating the cheat entry and the tables being shown, but from my testing this is usually
|  |  ··· less than a second
|  |  |  Note: if you save the cheat table with the header scripts activated, then the file size
|  |  |  ··· will be far larger. If you wish to reduce file size and retain responsiveness, try to
|  |  |  ··· only save the table once all scripts have been deactivated first
|  Memory record custom types
|  |  Menu Item ID
|  |  |  Used for showing the correct ID of inventory items from the main menu (not in-battle items)
|  |  Menu Item Qty
|  |  |  Used for showing the correct quantity of inventory items from the main menu (not in-battle
|  |  |  ··· items)
|  |  3 bytes
|  |  |  Used for showing the correct EXP of materia
Cheat table
|  Cheats
|  |  Inventory
|  |  |  Have all menu items &amp; infinite use
|  |  |  |  Will give you X amount of every item in the game and freeze the quantity to that value
|  |  |  |  ··· until the script is deactivated
|  |  |  |  |  Note: X amount can be changed by editing the script and setting the value of "local
|  |  |  |  |  ··· item_quantity = VALUE" to whatever you prefer (not a number greater than 99)
|  |  |  Have all key items
|  |  |  |  Will give you one of every key item in the game, including the two key items that cannot
|  |  |  |  ··· normally be obtained (Letter to a Daughter and Letter to a Wife)
|  |  |  Have one of every materia and mastered
|  |  |  |  Will give you one of each materia in the game and set their EXP to mastered. Also
|  |  |  |  ··· freezes the last materia inventory slot as empty, allowing you to quickly destroy
|  |  |  |  ··· any unwanted materia by moving them to the final slot
|  |  |  Maximum power starting equipment
|  |  |  |  Sets the weapon stats for every starting weapon (Buster Sword, Leather Glove , Gatling
|  |  |  |  ··· Gun , Mythril Clip , Guard Stick , Spear , 4-point Shuriken , Yellow M-phone ,
|  |  |  |  ··· Quicksilver) to 'perfect' stats
|  |  |  |  |  This includes, but isn't limited to:
|  |  |  |  |  |  Four pairs of linked materia slots, triple materia growth rate, maximum attack
|  |  |  |  |  |  ··· value, maximum attack accuracy value (never miss a physical attack)
|  |  |  |  Also sets 'perfect' stats for the Bronze Bangle
|  |  |  |  |  This includes, but isn't limited to:
|  |  |  |  |  |  Four pairs of linked materia slots, triple materia growth rate, maximum defense,
|  |  |  |  |  |  ··· and maximum evasion rate (never get hit by a physical attack)
|  |  |  |  Also sets 'perfect' stats for the Power Wrist
|  |  |  |  |  This includes, but isn't limited to:
|  |  |  |  |  |  Absorb all elemental attacks, immune to every status effect except: poison, haste,
|  |  |  |  |  |  ··· regen, barrier, mbarrier, reflect, shield
|  |  |  |  |  Note: poison isn't added to the list of immunities because being afflicted by the
|  |  |  |  |  ··· poison status will regenerate your HP
|  |  In battle
|  |  |  Lucky 7s
|  |  |  |  Set every character's current battle HP and maximum battle HP to 7,777 (which triggers
|  |  |  |  ··· the "All 7s Fever!" game mechanic)
|  |  |  |  |  Further reading: https://finalfantasy.fandom.com/wiki/All_Lucky_7s
|  |  |  |  |  Note 1: deactivating this will NOT return your characters' current and maximum HP to
|  |  |  |  |  ··· their values before activation. Your maximum HP will remain at 7,777 until the
|  |  |  |  |  ··· end of the encounter
|  |  |  |  |  Note 2: don't activate this at the same time as any other cheat that repeatedly
|  |  |  |  |  ··· changes either your current or maximum HP e.g. "Maximum HP" or "Rest in peace"
|  |  |  Rest in peace
|  |  |  |  Set every character's current battle HP to 1
|  |  |  |  |  Note 1: useful in combination with the "Frequent Random Encounters" cheat if you want
|  |  |  |  |  ··· to quickly get into battle and wipe your party to return to the main menu (for
|  |  |  |  |  ··· versions of the game that don't support a soft reset, such as Steam)
|  |  |  |  |  Note 2: don't activate this at the same time as any other cheat that repeatedly
|  |  |  |  |  ··· changes either your current or maximum HP e.g. "Maximum HP" or "Lucky 7s"
|  |  |  Maximum HP
|  |  |  |  Set every character's current battle HP and maximum battle HP to 9,999
|  |  |  |  |  Note 1: deactivating this will NOT return your characters' current and maximum HP to
|  |  |  |  |  ··· their values before activation. Your maximum HP will remain at 9,999 until the
|  |  |  |  |  ··· end of the encounter
|  |  |  |  |  Note 2: don't activate this at the same time as any other cheat that repeatedly
|  |  |  |  |  ··· changes either your current or maximum HP e.g. "Lucky 7s" or "Rest in peace"
|  |  |  Maximum MP
|  |  |  |  Set every character's current battle MP and maximum battle MP to 999
|  |  |  |  |  Note: deactivating this will NOT return your characters' current and maximum MP to
|  |  |  |  |  ··· their values before activation. Your maximum MP will remain at 999 until the end
|  |  |  |  |  ··· of the encounter
|  |  |  Fast limit breaks
|  |  |  |  Keeps all characters' limit break maters full
|  |  |  |  |  Note: this might not appear to take effect immediately. While the real limit break
|  |  |  |  |  ··· value will be fixed at 255 (full), the displayed limit break meter will take a
|  |  |  |  |  ··· second or so to fill, and the limit break option won't become available on the
|  |  |  |  |  ··· battle command menu until it fills
|  |  |  Full ATB Meter
|  |  |  |  Keeps all characters' ATB meters full
|  |  Random encounters frequency
|  |  |  Instant random encounters (world)
|  |  |  |  Sets the random encounter 'ticker' to a high value such that it should initiate a random
|  |  |  |  ··· encounter after the player has taken one 'step' on the world map
|  |  |  No random encounters (world)
|  |  |  |  When activated: Sets the byte that determines whether world random encounters can occur
|  |  |  |  ··· to 0 (disallowed)
|  |  |  |  When deactivated: Sets the byte that determines whether world random encounters can
|  |  |  |  ··· occur to 1 (allowed)
|  |  |  |  |  Note: deactivation doesn't change the 'ticker' value to its default, so you may enter
|  |  |  |  |  ··· a random encounter merely one step after deactivating this
|  |  |  Instant random encounters (field)
|  |  |  |  Sets the random encounter 'ticker' to a high value such that it should initiate a random
|  |  |  |  ··· encounter after the player has taken one 'step' in a field map
|  |  |  No random encounters (field)
|  |  |  |  When activated: Sets the byte that determines whether world random encounters can occur
|  |  |  |  ··· to 0 (disallowed)
|  |  |  |  When deactivated: Sets the byte that determines whether world random encounters can
|  |  |  |  ··· occur to 1 (allowed)
|  |  |  |  |  Note: deactivation doesn't change the 'ticker' value to its default, so you may enter
|  |  |  |  |  ··· a random encounter merely one step after deactivating this
|  |  Miscellaneous cheats
|  |  |  Save / PHS anywhere
|  |  |  |  Always have the ability to save or use the PHS system from the menu (provided that those
|  |  |  |  ··· menu options have been unlocked)
|  |  |  |  |  Note: entering the PHS screen when you only have access to one or two party members
|  |  |  |  |  ··· will make it impossible to leave the screen, unless you change your current
|  |  |  |  |  ··· roster to include three party members. See Miscellaneous &gt; Current roster for
|  |  |  |  |  ··· those options
|  |  |  Enter debug room (PlayStation only)
|  |  |  |  Forces the next field screen you enter to be the developer's first debug room
|  |  |  |  |  Note 1: this only works on PlayStation versions of the game and the behaviour of the
|  |  |  |  |  ··· debug rooms may change between those versions. You MUST deactivate this in order
|  |  |  |  |  ··· to transition to any other screen than the first debug room. If you keep this
|  |  |  |  |  ··· activated, you will simply keep re-entering the same room with Yuffie and be
|  |  |  |  |  ··· unable to reach any of the other debug rooms
|  |  |  |  |  Note 2: This doesn't work on any Steam versions I've tested, but you may have some
|  |  |  |  |  ··· success
|  |  |  Speed hack
|  |  |  |  Allows the game to run at a higher speed, up to 5 times
|  |  |  |  |  Note: only seems to work intermittently. You're probably better off using the "Enable
|  |  |  |  |  ··· Speedhack" menu in Cheat Engine. This is here as a convenience should you wish to
|  |  |  |  |  ··· assign a hotkey to it
|  |  |  Colour theme settings
|  |  |  |  Allows you to cycle forwards, backwards, or select from a list of premade menu themes.
|  |  |  |  ··· All themes used were taken from the following Imgur album:
|  |  |  |  https://imgur.com/a/sKP6G
|  |  |  |  |  Note: this changes the menu themes in real-time, allowing you to adjust the colours
|  |  |  |  |  ··· during battles and dialogue
|  Statistics
|  |  Timers
|  |  |  Total play time
|  |  |  Assorted timers
|  |  |  |  This shows various timers that appear throughout the game, such as the bomb timer at the
|  |  |  |  ··· beginning of the game
|  |  Displayed Stats
|  |  |  Note: changing these stats won't have any real effect in most cases. See the Real Stats
|  |  |  ··· menu in order to make effective changes
|  |  |  Shows the following stats for each character in your current roster
|  |  |  |  Current HP
|  |  |  |  |  A value from 1 to 9,999
|  |  |  |  Maximum HP
|  |  |  |  |  A value from 1 to 9,999
|  |  |  |  Current MP
|  |  |  |  |  A value from 1 to 999
|  |  |  |  Maximum MP
|  |  |  |  |  A value from 1 to 999
|  |  |  |  Strength
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Dexterity
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Vitality
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Magic
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Spirit
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Lucky
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Attack
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Defense
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Magic Attack
|  |  |  |  |  A value from 1 to 255
|  |  |  |  Magic Defense
|  |  |  |  |  A value from 1 to 255
|  |  Real Stats
|  |  |  Note: there are two menus, sorted by character and sorted by stat. This might be helpful if
|  |  |  ··· you wish to max out only one character, or give all characters the same stat change
|  |  |  Shows the following stats for all characters
|  |  |  |  Limit break availability
|  |  |  |  |  The amount of limit break meter left over from your last battle
|  |  |  |  |  A value from 0 to 255 (255 means limit break meter full and ready to use)
|  |  |  |  Current HP
|  |  |  |  |  A value from 1 to 9,999
|  |  |  |  Maximum HP
|  |  |  |  |  A value from 1 to 9,999
|  |  |  |  Current MP
|  |  |  |  |  A value from 1 to 999
|  |  |  |  Maximum MP
|  |  |  |  |  A value from 1 to 999
|  |  |  |  Base attributes
|  |  |  |  |  The character's raw stats from levelling up - unaffected by equipped items or stat
|  |  |  |  |  ··· boosting consumables
|  |  |  |  |  Strength
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Dexterity
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Vitality
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Magic
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Spirit
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Lucky
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  Supplemented attributes
|  |  |  |  |  The character's additional stat increases from taking stat boosting consumables, such
|  |  |  |  |  ··· as Power Source
|  |  |  |  |  Strength
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Dexterity
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Vitality
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Magic
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Spirit
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  |  Lucky
|  |  |  |  |  |  A value from 1 to 255
|  |  |  |  Currently equipped weapon
|  |  |  |  |  The weapon the character will wield during battle. The character's battle stats will
|  |  |  |  |  ··· be affected by the chosen weapon's stats. If you select a weapon intended for use
|  |  |  |  |  ··· by a different character, the weapon model might be invisible
|  |  |  |  |  |  Note: weapon doesn't have to be acquired in order to be equipped. For example, you
|  |  |  |  |  |  ··· could equip Sephiroth's normally unobtainable Masamune
|  |  |  |  Currently equipped armour
|  |  |  |  |  Note: armour doesn't have to be acquired in order to be equipped
|  |  |  |  Currently equipped accessory
|  |  |  |  |  Note: accessory doesn't have to be acquired in order to be equipped
|  |  |  |  Added status effect
|  |  |  |  |  Which status effect is currently active on the character, if any (can be either
|  |  |  |  |  ··· sadness or fury)
|  |  |  |  Total kills
|  |  |  |  |  The total number of killing blows the character has dealt during the whole game
|  |  |  |  Selected limit level
|  |  |  |  |  A value from 1 to 4 indicating which limit break level is currently selected.
|  |  |  |  |  ··· Changing the chosen limit break level from the game menu empties your limit break
|  |  |  |  |  ··· meter. Changing this value does not
|  |  |  |  Times limit break level # used
|  |  |  |  |  The total number of times the character has used a limit break of this level
|  |  |  |  |  |  Note: usually a character acquires the second limit break attack for that level
|  |  |  |  |  |  ··· once they have used the first limit break attack 8 times. Changing this value
|  |  |  |  |  |  ··· to 8 or higher will make most characters learn the second limit break attack
|  |  |  |  |  |  ··· at the next battle results screen
|  |  |  |  Current level
|  |  |  |  |  A value from 0 to 99
|  |  |  |  |  |  Note: this doesn't change your current EXP, so you can temporarily increase this
|  |  |  |  |  |  ··· to 99 for some easier fights, then revert it back to the original value
|  |  |  |  |  |  ··· without any permanent effects
|  |  |  |  EXP to next level
|  |  |  |  |  The amount of EXP required to level up. If set to 1 and frozen, would cause the
|  |  |  |  |  ··· character to level up after every battle that awards some EXP
|  |  In-battle Stats
|  |  |  ATB
|  |  |  |  The character's current ATB meter level
|  |  |  |  A value from 0 to 255
|  |  |  Limit break availability
|  |  |  |  The character's current limit break meter level
|  |  |  |  A value from 0 to 255
|  |  |  |  |  Note: this might not be immediately reflected in the displayed limit break meter,
|  |  |  |  |  ··· however it is the 'real' value. The displayed meter will gradually grow towards
|  |  |  |  |  ··· this value, which may take some seconds
|  |  |  Current MP
|  |  |  |  A value from 1 to 999
|  |  |  Maximum MP
|  |  |  |  A value from 1 to 999
|  |  |  |  |  Note: this value won't appear on the battle menu
|  |  |  Current HP
|  |  |  |  A value from 1 to 9,999
|  |  |  Maximum HP
|  |  |  |  A value from 1 to 9,999
|  |  |  |  |  Note: this value won't change the maximum HP value shown on the battle menu, but
|  |  |  |  |  ··· changing this to a higher value will allow your current HP to increase above the
|  |  |  |  |  ··· shown amount
|  |  Accessory attributes
|  |  |  Two bonus stats
|  |  |  |  Strength, Vitality, Magic, Spirit, Dexterity, Luck
|  |  |  Bonus amount
|  |  |  |  A value from 1 to 255
|  |  |  Automatically applied status effect
|  |  |  |  The status effect that is permanently active on characters with this accessory equipped
|  |  |  |  Can be one of the following:
|  |  |  |  |  Haste, Berserk, Doom, Reflect, Barrier, None
|  |  |  Equippable characters
|  |  |  |  Which individual character the accessory can be equipped by, or everyone
|  |  |  Elemental defense type
|  |  |  |  The type of defense against elemental damage
|  |  |  |  Can be one of the following:
|  |  |  |  |  Absorb, Invalid, Halve, None
|  |  |  Elemental defenses
|  |  |  |  Sets whether or not the accessory provides protection from any of the following
|  |  |  |  ··· elements:
|  |  |  |  |  Fire, Ice, Lightning, Earth, Poison, Gravity, Water, Wind, Holy
|  |  |  Defend against statuses
|  |  |  |  Sets whether or not the accessory provides protection from any of the following status
|  |  |  |  ··· effects:
|  |  |  |  |  Death, Near-Death, Sleep, Poison, Sadness, Fury, Confusion, Silence, Haste, Slow,
|  |  |  |  |  ··· Stop, Frog, Small, Slow-Numb, Petrify, Regen, Barrier, MBarrier, Reflect, Shield,
|  |  |  |  |  ··· Death-Sentence, Manipulate, Berserk, Peerless, Paralyzed, Darkness
|  |  Armour attributes
|  |  |  Defense
|  |  |  |  The amount of physical damage mitigation
|  |  |  |  A value from 1 to 255
|  |  |  Magic Defense
|  |  |  |  The amount of magical damage mitigation
|  |  |  |  A value from 1 to 255
|  |  |  Defense %
|  |  |  |  The likelihood your character will evade a physical attack
|  |  |  |  A value from 1 to 255
|  |  |  Magic Defense %
|  |  |  |  The likelihood your character will evade a magical attack
|  |  |  |  A value from 1 to 255
|  |  |  Added status resistance
|  |  |  |  Sets which of the following status effects the accessory provides protection from:
|  |  |  |  |  None, Death, Near-Death, Sleep, Poison, Sadness, Fury, Confusion, Silence, Haste,
|  |  |  |  |  ··· Slow, Stop, Frog, Small, Slow-Numb, Petrify, Regen, Barrier, MBarrier, Reflect,
|  |  |  |  |  ··· Shield, Death-Sentence, Manipulate, Berserk, Peerless, Paralyzed, Darkness
|  |  |  Stat bonuses
|  |  |  |  Up to four of the following stats can be boosted:
|  |  |  |  |  Strength, Vitality, Magic, Spirit, Dexterity, Luck
|  |  |  Materia growth rate
|  |  |  |  The multiplier used by all equipped materia for the end of battle AP reward
|  |  |  |  Can be None, Normal, Double, Triple
|  |  |  Materia slots
|  |  |  |  The materia slot types available in the armour
|  |  |  |  Sorted by pairs, can be one of the following:
|  |  |  |  |  A single slot, two unlinked slots, two linked slots, two linked slots with a
|  |  |  |  |  ··· different visual style (found on ultimate weapons)
|  |  |  Equippable characters
|  |  |  |  Which character the accessory can be equipped by
|  |  Weapon attributes
|  |  |  Attack
|  |  |  |  The amount of physical damage during an attack
|  |  |  |  A value from 1 to 255
|  |  |  Attack %
|  |  |  |  The accuracy of the physical attack
|  |  |  Attack range
|  |  |  |  Limits the weapon to close range attacks only, or also allows for long range attack
|  |  |  Bonus magic
|  |  |  |  Bonus to the magic stat of the character equipping the weapon
|  |  |  Bonus spirit
|  |  |  |  Bonus to the spirit stat of the character equipping the weapon
|  |  |  Added status effect
|  |  |  |  Can be one of the following: Death, Near-death, Sleep, Poison, Sadness, Fury, Confusion,
|  |  |  |  ··· Silence, Haste, Slow, Stop, Frog, Small, Slow-numb, Petrify, Regen, Barrier,
|  |  |  |  ··· MBarrier, Reflect, Dual, Shield, Death-sentence, Manipulate, Berserk, Peerless,
|  |  |  |  ··· Paralyzed, Darkness
|  |  |  Added elemental effect
|  |  |  |  Can be one of the following: Fire, Ice, Lightning, Earth, Poison, Gravity, Water, Wind,
|  |  |  |  ··· Holy
|  |  |  Materia growth rate
|  |  |  |  The multiplier used by all equipped materia for the end of battle AP reward
|  |  |  |  Can be None, Normal, Double, Triple
|  |  |  Materia slots
|  |  |  |  The materia slot types available in the armour
|  |  |  |  Sorted by pairs, can be one of the following:
|  |  |  |  |  A single slot, two unlinked slots, two linked slots, two linked slots with a
|  |  |  |  |  ··· different visual style (found on ultimate weapons)
|  |  |  Equippable characters
|  |  |  |  Which character the accessory can be equipped by
|  |  Chocobo attributes
|  |  |  Colour
|  |  |  |  The chocobo's colour determines what kind of terrain and water it can travel over on the
|  |  |  |  ··· world map. Gold has the greatest mobility, and is required in order to access every
|  |  |  |  ··· materia cave in the world
|  |  |  Gender
|  |  |  |  Only important when breeding chocobos, as you must have at least one male and female who
|  |  |  |  ··· have neither been recently born or mated
|  |  |  Class
|  |  |  |  The class is determined by the number of races the chocobo has finished in first place.
|  |  |  |  ··· 0 to 2: Class C; 3 to 5: Class B; 6 to 8: Class A, 9+: Class S
|  |  |  Current Dash
|  |  |  |  The current dash value for the chocobo, which determines their dashing speed during
|  |  |  |  ··· races
|  |  |  Maximum Dash
|  |  |  |  The maximum dash value for the chocobo, which determines their dashing speed during
|  |  |  |  ··· races. The chocobo cannot train its current dash value to be any higher than this
|  |  |  |  ··· maximum, no matter how well you feed it
|  |  |  Current Run
|  |  |  |  The current run value for the chocobo, which determines their normal running speed
|  |  |  |  ··· during races
|  |  |  Maximum Run
|  |  |  |  The maximum run value for the chocobo, which determines their normal running speed
|  |  |  |  ··· during races. The chocobo cannot train its current run value to be any higher than
|  |  |  |  ··· this maximum, no matter how well you feed it
|  |  |  Acceleration
|  |  |  |  How quickly the chocobo will reach its full potential speed
|  |  |  Cooperation
|  |  |  |  How well it obeys Manual Control
|  |  |  Intelligence
|  |  |  |  How well it uses Auto Control
|  |  |  Personality
|  |  |  |  Also refered to as Run Type. I'm very unclear on what this is and how it works
|  |  |  Stamina
|  |  |  |  The chocobo's maximum stamina pool
|  |  |  |  A value from 1 to 9,999
|  |  |  Further reading: http://forums.qhimm.com/index.php?topic=3241.0
|  |  Post-battle rewards
|  |  |  Gil
|  |  |  |  Main currency throughout the game
|  |  |  EXP
|  |  |  |  Levels up your party members
|  |  |  AP
|  |  |  |  Levels up your materia
|  |  Battles fought
|  |  |  The number of battles entered. A battle that you escape from still counts as a battle
|  |  |  ··· fought
|  |  Battles escaped
|  |  |  The number of battles you fled from
|  Inventory
|  |  Gil
|  |  |  Main currency throughout the game
|  |  Gold Points (GP)
|  |  |  Main currency used at the Gold Saucer
|  |  |  Reference: https://finalfantasy.fandom.com/wiki/Currency#GP
|  |  Battle points
|  |  |  Total number of acquired battle points
|  |  |  Reference: https://finalfantasy.fandom.com/wiki/Currency#Battle_Points
|  |  Battle points (while in arena)
|  |  |  Number of battle points you've accrued so far in this arena battle
|  |  Menu items
|  |  |  All items shown in the in-game Item menu
|  |  In-battle items
|  |  |  All items shown in the in-battle Item menu
|  |  Materia
|  |  |  All materia not currently equipped by any character. Visible on the in-game Materia menu
|  |  |  ··· when selecting a weapon or armour materia slot
|  Miscellaneous
|  |  Show table information
|  |  |  Shows this document in a new window
|  |  Templates menu
|  |  |  Every cheat entry under this header is referenced in some other entry's dropdown selection
|  |  |  ··· options. If you rename or remove any of these entries, some aspects of other parts of
|  |  |  ··· the table will probably stop working correctly
|  |  Random encounter settings
|  |  |  (World) Random encounter settings
|  |  |  |  Can random encounters occur?
|  |  |  |  |  A value of 1 allows the ticker to run, and random encounters to occur. A value of 0
|  |  |  |  |  ··· prevents this
|  |  |  |  Distance until encounters can occur
|  |  |  |  |  After leaving a battle, your 'distance' value is a small negative number. Once it
|  |  |  |  |  ··· counts up to zero, then a ticker starts to loop
|  |  |  |  Random encounter looping ticker
|  |  |  |  |  At the end of each short loop, there is a chance a random encounter will initiate
|  |  |  |  Random encounter loops counter
|  |  |  |  |  The number of times the ticker has looped. It seems random encounters are more likely
|  |  |  |  |  ··· to initiate the higher this value gets
|  |  |  (Field) Random encounter settings
|  |  |  |  Random encounter looping ticker
|  |  |  |  |  At the end of each short loop, there is a chance a random encounter will initiate
|  |  Menu options availability
|  |  |  Determine which of the following are visible and available options in the main game menu:
|  |  |  |  Item, Magic, Materia, Equip, Status, Order, Limit, Config, PHS, Save
|  |  Save &amp; PHS availability
|  |  |  Determine if the save and / or PHS menus can be used
|  |  Built-in debug mode
|  |  |  Shows the current map number. If you freeze the value to decial 65 (hexadecimal 41) then
|  |  |  ··· you might be able to load into the inital debug room during a field screen transition
|  |  |  |  Note: only seems to work on PlayStation versions
|  |  Config menu
|  |  |  Menu RGB settings
|  |  |  |  Set the Red Green Blue values for all four corners of the menus
|  |  |  |  |  Note: Steam versions of the game store the values in groups of four bytes - separated
|  |  |  |  |  ··· by a single byte that seems to do nothing - whereas the PlayStation versions use
|  |  |  |  |  ··· groups of three bytes
|  |  |  |  |  Note: bytes are in the order Red Green Blue but the game uses Little Endian byte
|  |  |  |  |  ··· order. If you wish to write these values as an array of bytes, simply use a value
|  |  |  |  |  ··· like RR GG BB (where RR = red value; GG = green value; BB = blue value). If you
|  |  |  |  |  ··· wish to write these values as three or four byte values (depending on whether
|  |  |  |  |  ··· you're using a PlayStation or Steam version) then you must reverse the order - as
|  |  |  |  |  ··· writing RRGGBB in Little Endian would become the byte sequence BB GG RR
|  |  |  |  References
|  |  |  |  |  Little Endian: https://en.wikipedia.org/wiki/Endianness#Little-endian
|  |  |  |  |  RGB Colour Picker: https://www.google.com/search?q=color+picker
|  |  |  Battle speed
|  |  |  |  Sets the speed that ATB guages charge in battles
|  |  |  |  Value from 0 to 255 (0 fastest, 255 slowest)
|  |  Current roster
|  |  |  Lets you change which character is in which current party member slot
|  |  |  |  Note: may cause game-breaking bugs if you choose duplicate characters, or put a
|  |  |  |  ··· character in your party you're not meant to have access to at that point in the game
Known issues
|  French version on Steam (FF7_FR.exe)
|  |  Chocobo stables 5 and 6 have their stats in a different location to the first 4 stables. The
|  |  ··· cheat table doesn't yet implement a fix for this
|  TTreeNodes.GetNodeFromIndex Index Out of Bounds error
|  |  If there is a suitable remedy, I will try to implement it. Until then, you can keep track of
|  |  ··· the bug report at the official Cheat Engine forums
|  |  https://forum.cheatengine.org/viewtopic.php?t=610281
Potential questions
|  Why have you put all the LUA code in the enable section of the initialisation script, rather than
|  ··· in the autorun portion of the script, or in an automatic script when the cheat table is
|  ··· loaded?
|  |  I feel more comfortable knowing that nothing in the table will run without the user first
|  |  ··· having a chance to look through all the code first. I'm sure most people won't take much
|  |  ··· interest, but for those who want to look through to check there's nothing potentially
|  |  ··· malicious, they're able to do so before their first use
|  |  Also, I assume it will make things much more convenient for people who wish to copy and paste
|  |  ··· the whole table into another cheat table of their own - should they wish to use some of
|  |  ··· the features of mine along with theirs
|  Will the table have full support for Japanese versions of the game, including having the cheat
|  ··· table itself translated to Japanese?
|  |  The table is compatible with the PlayStation 1 International Japanese version, but I doubt
|  |  ··· that I'll be able to implement full language support for it. For now, it defaults to
|  |  ··· displaying the whole table in English (including using the English names for all items,
|  |  ··· weapons, etc.). From what I've read, the Japanese version of the game uses significantly
|  |  ··· different text encoding, and it would be far more complicated to support Japanese than for
|  |  ··· languages that use the Latin alphabet
|  |  For further reading, please consult the qhimm.com wiki article on text encoding:
|  |  http://web.archive.org/web/20161006234528/http://wiki.qhimm.com/view/FF7/Text_encoding
Final notes
|  During the minification process, the comments made in the LUA scripts have been removed. These
|  ··· comments provided links to references and source materials for all the code I used that was
|  ··· written by someone else, or a resource I used that helped me to understand some aspects of
|  ··· the game. The unminified versions can be found on the GitHub or GitLab pages mentioned in the
|  ··· Authors section, near the beginning of the document
|  If you visit those pages, you can find the URLs to the sources or reference materials in the
|  ··· various code comments (typically just after the function declaration). I also referenced
|  ··· various threads on the qhimm.com forums and wiki that were very helpful in understanding some
|  ··· of the game mechanics (especially chocobo stats)
|  I'm not sure if anyone will end up using this cheat table, but I've put quite a lot of time and
|  ··· effort into its creation. If you wish to copy any parts of this and share them with others,
|  ··· please try to keep the links to the various sources and reference materials intact, as well
|  ··· as not removing any authors from the documentation. If you make any significant changes, then
|  ··· please consider adding yourself to the Authors section
|  Thank you for taking the time to read. I hope you find this helpful, and that you're looking
|  ··· forward to the Final Fantasy 7 Remake as much as I am :)]]
function checkCriteria(a, b, c, d)
local e = type(a)
local f, g;
local b = b or ""
local h = false;
local i = false;
local matches = false;
debugPrint(9, "Value : " .. tostring(a), nil, "checkCriteria")
debugPrint(9, "Type : " .. e, nil, "checkCriteria")
if type(c) == "table" then f, g = c[1], c[2] else f, g = 0, c end ;
if b and e == string.lower(b) then h = true else h = true end ;
if c then if f &lt;= a and g &gt;= a then i = true end else i = true end ;
if h and i then matches = true end ;
debugPrint(9, "Match type : " .. tostring(h) .. "  Match range : " .. tostring(g), nil, "checkCriteria")
debugPrint(9, "Matches : " .. tostring(matches), nil, "checkCriteria")
if d and h then
local j;
if e == "number" then if a &lt; f then j = f elseif a &gt; g then j = g end elseif e == "string" then j = string.sub(a, 1,
g) end ;
return j
else return matches end
end;
function setOptional(l, m, n, o, p)
debugPrint(5, "Checking : " .. tostring(l) .. "  Type : " .. type(l), nil, "setOptional")
if l == nil then
debugPrint(8, "Returning default : " .. tostring(m), nil, "setOptional")
return m
end ;
if type(l) == "table" and l.checklist then for q = 1, #l.checklist do
local r = checkCriteria(l.checklist[q], n, o)
if r then
if p then
local s = checkCriteria(l.checklist[q], n, o, true)
debugPrint(8, "Returning : " .. tostring(s), nil, "setOptional")
return s
end ;
debugPrint(8, "Returning : " .. tostring(l.checklist[q]), nil, "setOptional")
return l.checklist[q]
end
end end ;
if checkCriteria(l, n, o) then
if p then
local s = checkCriteria(l, n, o, p)
debugPrint(8, "Returning : " .. tostring(s), nil, "setOptional")
return s
end ;
debugPrint(8, "Returning : " .. tostring(l), nil, "setOptional")
return l
end ;
debugPrint(8, "Returning : nil", nil, "setOptional")
return nil
end;
is_ready = false;
ready_state = nil;
matches = true;
debug_verbosity = 0;
module_address = 0;
base_mem = 0;
allow_requires = false;
s_en = "[Enable]\n"
s_dis = "[Disable]\n"
s_lua = "{$lua}\n"
s_asm = "{$asm}\n"
dp = debugPrint;
tbs = to_byte_string;
lcm = lazy_child_maker;
lcd = lazy_child_deleter;
lwt = lazy_write_timer;
hx = to_hex_string;
nb = number_bases;
ps = string.pstring;
function detect_ps1_game_version()
local t = "cdrom:\\"
local u = "BOOT = cdrom:\\"
local v, w;
if getAddressSafe("mednafen_psx_hw_libretro.dll") or getAddressSafe("mednafen_psx_libretro.dll") then v = t elseif getAddressSafe("ePSXe.exe") then v = u end ;
if v then
debugPrint(4, "Signature : " .. string.pstring(v), nil, "detect_ps1_game_version")
w = string_to_byte_string(v, "00 00 00 00 ")
else w = "00 00 00 00 00 00 00 00 63 64 72 6F 6D 3A 5C" end ;
debugPrint(4, "Searching for bytes : " .. string.pstring(w), nil, "detect_ps1_game_version")
local x;
x = easy_scan(base_mem, nil, w)
x = string.format("%X", x)
debugPrint(4, "Found " .. x, nil, "detect_ps1_game_version")
local y = tonumber(tostring(x), 16)
debugPrint(5, "Game identifier string address : " .. nb(y), nil, "detect_ps1_game_version")
local z = readString(y + #string.split(w, " "))
z = string.split(z, ";")[1]
z = string.gsub(z, "%.", "")
debugPrint(5, "Game identifier string : " .. z, nil, "detect_ps1_game_version")
return z
end;
function create_dropdown_list(A)
local B = createStringlist()
B.Sorted = true;
for C, D in pairs(A) do if type(C) == "number" and type(D) == "string" then B.add(C .. ":" .. D) end end ;
print(B.Text)
return B
end;
function create_dropdown_string(A)
local E = ""
local F;
for C, D in ipairs(A) do if type(C) == "number" and type(D) == "string" then
F = tostring(C) .. ":" .. tostring(D) .. "\n"
E = E .. F
end end ;
for q = 1, #A do
F = tostring(A[q][1]) .. ":" .. A[q][2] .. "\n"
E = E .. F
end ;
return E
end;
function set_dropdown_list(G, H, I)
local J;
local K;
local L;
if I then
J = setOptional(I.dadli, false)
K = setOptional(I.ddro, false)
L = setOptional(I.dddo, false)
end ;
G.DropDownList.Text = H
end;
function cls() GetLuaEngine().MenuItem5.doClick() end;
function get_mr_desc(M) return AddressList.getMemoryRecordByDescription(M) end;
function get_mr_id(N) return AddressList.getMemoryRecordByID(N) end;
function find_signature(O)
local P = AOBScan(O)
return tonumber(P[0], 16)
end;
function set_memory_record(G, Q, R, S)
local T = Q.off or Q.offset or nil;
local M = Q.desc or Q.description or nil;
local U = Q.type;
local V = Q.ddl or Q.dropdown_linked or Q.dropdownlinked or nil;
local W = Q.dmui or nil;
local X = Q.ostdp or nil;
local Y = Q.mtrdvltdl or nil;
local Z = Q.hex or nil;
local I = Q.opt or Q.options or nil;
local _ = Q.child or Q.children or nil;
local a0 = S or nil;
if debug_verbosity &gt; 0 then
debugPrint(5, "Description : " .. M, nil, "setMemrec")
debugPrint(5, "Base address : " .. nb(R), nil, "setMemrec")
debugPrint(5, "Offset : " .. nb(T), nil, "setMemrec")
end ;
if type(U) == "string" then
debugPrint(5, "Type : " .. U, nil, "setMemrec")
if U == "header" then
G.type = 0;
G.isGroupHeader = true
else
G.type = 13;
G.CustomTypeName = U
end
elseif type(U) == "table" then
G.type = U['type']
for C, D in pairs(U['options']) do if C == "Binary.Startbit" then G.Binary.Startbit = D elseif C == "Binary.Size" then G.Binary.Size = D elseif C == "Aob.Size" then G.Aob.Size = D elseif C == "String.Size" then G.String.Size = D elseif C == "String.Unicode" then G.String.Unicode = D elseif C == "String.Codepage" then G.String.Codepage = D end end
else G.type = U end ;
if M then G.Description = M end ;
if R and T and type ~= "header" then G.Address = R + T end ;
if V then
debugPrint(5, "Dropdown linked : " .. V, nil, "setMemrec")
G.DropDownLinked = true;
G.DropDownLinkedMemrec = V
end ;
if W then
debugPrint(5, "Disallow manual user input", nil, "setMemrec")
G.DropDownReadOnly = true
end ;
if X then
debugPrint(5, "Only show the description part", nil, "setMemrec")
G.DropDownDescriptionOnly = true
end ;
if Y then
debugPrint(5, "Make the record display values like the dropdown list", nil, "setMemrec")
G.DisplayAsDropDownListItem = true
end ;
if Z then
debugPrint(5, "Show as hexadecimal", nil, "setMemrec")
G.ShowAsHex = true
end ;
if I then
G.Options = I;
debugPrint(5, "Options : " .. string.pstring(I), nil, "setMemrec")
end ;
if a0 then G.appendToEntry(a0) end ;
if _ then for q = 1, #_ do
local a1 = {}
for C, D in pairs(_[q]) do a1[C] = D end ;
for a2 = 1, #_[q] do a1[a2] = _[q][a2] end ;
debugPrint(8, "Child element : " .. string.pstring(a1), nil, "setMemrec")
set_memory_record(create_mr(), a1, R, G)
end end
end;
function delayed_deactivate(a3, a4)
local a5 = createTimer()
a5.Interval = setOptional(a4, 100)
a5.OnTimer = function(a5)
a3.Active = false;
a5.Destroy()
end
end;
function easy_scan(a6, a7, a8)
local a9 = createMemScan()
a9.OnlyOneResult = true;
local aa = a6 or 0;
local ab = a7 or 0x7fffffffffff;
a9.firstScan(soExactValue, vtByteArray, nil, a8, nil, aa, ab, "", nil, nil, true, nil, nil, nil)
a9.waitTillDone()
return a9.Result
end;
function create_mr()
local ac = getAddressList().createMemoryRecord()
return ac
end;
function show_memo(ad, ae, af, ag)
local ae = ae or 1000;
local af = af or 1000;
local ag = ag or 12;
local ah = createForm(true)
ah.Name = "Information"
ah.Width = ae;
ah.Height = af;
ah.Top = 10;
ah.Left = 10;
local ai = createMemo(ah)
ai.Width = ae;
ai.Height = af;
ai.Lines.add(ad)
ai.setScrollbars(ssAutoVertical)
ai.ReadOnly = true;
ai.Color = 0x101010;
ai.Font.Color = 0xF0F0F0;
ai.Font.Name = "Consolas"
ai.Font.Size = ag;
ah.onClose = function() ah.destroy() end;
return ah
end;
function debugSetter(aj)
local ak = 10;
local al = 0;
local am = inputQuery("Set debugging level",
"Enter new debugging level (from 0 to 10) or press Escape key to set to 0.\n*** WARNING: setting this to 10 will show EVERY debug message ***",
"1")
if am == nil then aj = al else
local an = tonumber(am)
if an &lt; al then aj = al elseif an &gt; ak then aj = ak else aj = an end ;
if aj &gt; al then print("Setting debug level to " .. aj) end
end ;
return aj
end;
function debugPrint(ao, ap, aq, ar)
local as = aq or debug_verbosity or 0;
local at;
if ar == nil then at = "" else at = "[" .. ar .. "]  " end ;
if as &gt;= ao then print(at .. ap) end
end;
function printFunctionParameters(au, av)
local aw = av or "func"
for C, D in pairs(au) do if type(D) == "table" then
print("( " .. aw .. " ) [ " .. tostring(C) .. " ] { " .. type(D) .. " } ")
recursive_print(D)
else print("( " .. aw .. " ) [ " .. tostring(C) .. " ] { " .. type(D) .. " } " .. tostring(D)) end end
end;
function test_error(ax) if string.lower(ax) == "assertion" or string.lower(ax) == "assert" then assert(1 == 2,
"Test assertion error") else error(ax) end end;
function dumb_timer(av, ay, ...)
debugPrint(1, "Called dumb_timer()", nil, "dumb_timer")
debugPrint(1, "Iterations : " .. ay, nil, "dumb_timer")
local az, aA, test_time;
az = os.clock()
for q = 1, ay do av(select(1, ...)) end ;
aA = os.clock()
test_time = aA - az;
return test_time
end;
function test_timer(av, aB, aC, ...)
local aD = aB or 0;
local aE = aC or false;
debugPrint(1, "Function name : " .. tostring(av), nil, "test_timer")
debugPrint(1, "Function iterations : " .. tostring(aD), nil, "test_timer")
debugPrint(1, "Print : " .. tostring(aE), nil, "test_timer")
if aB == 0 then
local aF = 10;
local aG = 10;
local aH = 1;
local aI;
local aJ = false;
i_ = 0;
aD = math.floor(aF ^ i_)
print("Running smart iterations. Target time : " .. aH .. " seconds")
for q = 0, aG do
if aJ then
print(q + 1 .. " : Running " .. cv(aD, true) .. " iterations")
aI = dumb_timer(av, aD, ...)
print("Completed in " .. aI .. " seconds")
print("Averaged " .. aI / aD .. " seconds per run")
return
end ;
print(q + 1 .. " : Running " .. cv(aD, true) .. " iterations")
aI = dumb_timer(av, aD, ...)
print("Completed in " .. aI .. " seconds")
if aI &gt; aH then
print("Averaged " .. aI / aD .. " seconds per run")
return
elseif aI * aF &gt; aH then
aD = aH / (aI / aD)
aJ = true
else
i_ = i_ + 1;
aD = math.floor(aF ^ i_)
end
end
else dumb_timer(av, aD, ...) end ;
if aE then print("Ran test " .. cv(aD) .. " times.\nCompleted in " .. test_time .. " seconds") end ;
return test_time
end;
function test_suite()
create_number_list("__test__")
create_numbered_table("__test__")
join_tables("__test__")
table.zip("__test__")
end;
function wt(aK)
print(type(aK))
return type(aK)
end;
function selected_tn()
local aL = AddressList.Component[0]
local aM = aL.Selected;
if aM then
print("TreeNode Index : " .. string.pstring(aM.Index))
print("Text: " .. string.pstring(aM.Text))
print("Parent: " .. string.pstring(aM.Parent))
print("Level: " .. string.pstring(aM.Level))
print("HasChildren: " .. string.pstring(aM.HasChildren))
print("Expanded: " .. string.pstring(aM.Expanded))
print("Count : " .. string.pstring(aM.Count))
print("Items[]: " .. string.pstring(aM.Items))
print("Index: " .. string.pstring(aM.Index))
print("AbsoluteIndex: " .. string.pstring(aM.AbsoluteIndex))
print("Selected: " .. string.pstring(aM.Selected))
print("MultiSelected: " .. string.pstring(aM.MultiSelected))
print("Data: " .. string.pstring(aM.Data))
end
end;
function lazy_write_timer(aN, aO)
local aP = setOptional(aN.number_of_children, 1, "number")
local R = setOptional(aN.base_address, 0, "number")
local aQ = setOptional(aN.base_offset, 0, "number")
local aR = setOptional(aN.base_increment, 4, "number")
local aS = setOptional(aN.offset_increment, 4, "number")
local aT = setOptional(aN.base_value, 99, "number")
local aU = setOptional(aN.value_increment, 0, "number")
local aV = setOptional(aN.write_interval, 100, "number", { 10, 60000 }, true)
local aW = setOptional(aN.max_value, 100, "number")
local aX = setOptional(aN.min_value, 1, "number")
local aY = setOptional(aN.type, 0, "number")
local A = setOptional(aN.values_table, nil, "table")
if debug_verbosity &gt; 0 then
debugPrint(3, "Debug output for lazyWriteTimer function", nil, "lazyWriteTimer")
debugPrint(3, "Number of child entries : " .. nb(aP), nil, "lazyWriteTimer")
debugPrint(3, "Base address : " .. nb(R), nil, "lazyWriteTimer")
debugPrint(3, "Base offset : " .. nb(aQ), nil, "lazyWriteTimer")
debugPrint(3, "Base increment : " .. nb(aR), nil, "lazyWriteTimer")
debugPrint(3, "Offset increment : " .. nb(aS), nil, "lazyWriteTimer")
debugPrint(3, "Offsets :", nil, "lazyWriteTimer")
debugPrint(3, string.pstring(offsets_table))
if debug_verbosity &gt;= 3 then recursive_print(offsets_table) end ;
debugPrint(3, "Base value : " .. nb(aT), nil, "lazyWriteTimer")
debugPrint(3, "Value increment :  " .. nb(aU), nil, "lazyWriteTimer")
debugPrint(3, "Minimum value : " .. nb(aX), nil, "lazyWriteTimer")
debugPrint(3, "Maximum value : " .. nb(aW), nil, "lazyWriteTimer")
end ;
local aZ = setOptional(aO, createTimer(nil, false))
aZ.Interval = setOptional(aN.interval, aV)
aZ.OnTimer = function(aZ)
local a_;
local b0;
if A then for q = 1, #A do
a_ = R + aQ + A[q][1]
b0 = A[q][2]
debugPrint(5, "Address : " .. nb(a_) .. "  Value : " .. nb(b0), nil, "lazyWriteTimer")
if aY == 1 then writeSmallInteger(a_, b0) elseif aY == 2 then writeInteger(a_,
b0) elseif aY == 3 then writeQword(a_, b0) else writeBytes(a_, to_byte_string(b0)) end
end else for q = 0, aP - 1 do
a_ = R + aQ + aR * q;
b0 = aT + aU * q;
debugPrint(5, "Address : " .. nb(a_) .. "  Value : " .. nb(b0), nil, "lazyWriteTimer")
if aY == 1 then writeSmallInteger(a_, b0) elseif aY == 2 then writeInteger(a_,
b0) elseif aY == 3 then writeQword(a_, b0) else writeBytes(a_, to_byte_string(b0)) end
end end
end;
return aZ
end;
function lazy_child_maker(aN)
if debug_verbosity &gt; 9 then printFunctionParameters(aN, "lazyChildMaker") end ;
local b1 = aN.parent;
local aP = setOptional(aN.number_of_children, 3)
local R = setOptional(aN.base_address, 0)
local aQ = setOptional(aN.base_offset, 0)
local aR = setOptional(aN.base_increment, 0)
local aS = setOptional(aN.offset_increment, 4)
local offsets_table = setOptional(aN.offsets, {})
local aT = setOptional(aN.base_value, 1)
local aU = setOptional(aN.value_increment, 0)
local aW = setOptional(aN.max_value, 100)
local aX = setOptional(aN.min_value, 1)
local b2 = setOptional(aN.descriptions_list, {})
local b3 = setOptional(aN.matrices, nil)
local Q = setOptional(aN.args_table, {})
local b4 = setOptional(aN.desc_prepend, "Entry ")
local b5 = setOptional(aN.desc_append, "")
local V = setOptional(aN.dropdown_linked, nil)
local b6 = setOptional(aN.type, 2)
local b7 = setOptional(aN.custom_type_name, nil)
local b8 = setOptional(aN.nested, nil)
local I = setOptional(aN.options, nil)
local b9 = setOptional(aN.collapse_parent, false)
if b2[1] then aP = #b2 end ;
if debug_verbosity &gt; 0 then
debugPrint(3, "Debug output for LazyChildMaker function", nil, "lazyChildMaker")
debugPrint(1, "Trying to generate child entries for " .. b1.description, nil, "lazyChildMaker")
debugPrint(1, "ID : " .. b1.ID, nil, "lazyChildMaker")
debugPrint(3, "Number of child entries : " .. nb(aP), nil, "lazyChildMaker")
debugPrint(3, "Base address : " .. nb(R), nil, "lazyChildMaker")
debugPrint(3, "Base offset : " .. nb(aQ), nil, "lazyChildMaker")
debugPrint(3, "Base increment : " .. nb(aR), nil, "lazyChildMaker")
debugPrint(3, "Offset increment : " .. nb(aS), nil, "lazyChildMaker")
debugPrint(3, "Offsets :", nil, "lazyChildMaker")
debugPrint(3, string.pstring(offsets_table))
if debug_verbosity &gt;= 3 then recursive_print(offsets_table) end ;
debugPrint(3, "Base value : " .. nb(aT), nil, "lazyChildMaker")
debugPrint(3, "Value increment :  " .. nb(aU), nil, "lazyChildMaker")
debugPrint(3, "Minimum value : " .. nb(aX), nil, "lazyChildMaker")
debugPrint(3, "Maximum value : " .. nb(aW), nil, "lazyChildMaker")
debugPrint(3, "Descriptions list:", nil, "lazyChildMaker")
if debug_verbosity &gt;= 3 then recursive_print(b2) end ;
debugPrint(3, string.pstring(b2))
debugPrint(3, "Size : " .. nb(b6), nil, "lazyChildMaker")
debugPrint(3, "Nested : " .. tostring(b8), nil, "lazyChildMaker")
end ;
if b3 and type(b3) == "table" and pairs(b3) then handle_matrices(aN) end ;
if Q[1] then
if debug_verbosity &gt; 3 then
debugPrint(3, "Arguments table length : " .. #Q, nil, "lazyChildMaker")
recursive_print(Q)
end ;
for q = 0, #Q - 1 do
local ba = getAddressList().createMemoryRecord()
set_memory_record(ba, Q[q + 1], R + aQ, b1)
end ;
return
end ;
for q = 0, aP - 1 do
debugPrint(5, "Iteration : " .. nb(q), nil, "lazyChildMaker")
local ba = getAddressList().createMemoryRecord()
if type(b2[q + 1]) == "string" then ba.description = b2[q + 1] else ba.description = b4 .. q + 1 .. b5 end ;
local a_;
if q == 0 then a_ = R + aQ else a_ = R + aQ + aR * q end ;
debugPrint(5, "Address : " .. nb(a_), nil, "lazyChildMaker")
ba.address = a_;
local bb = nil;
if aT then
bb = aT;
if aU then bb = bb + aU * q end
end ;
if bb then
debugPrint(5, "Current value : " .. nb(bb), nil, "lazyChildMaker")
if aN.base_value then if aN.max_value or aN.min_value then ba.value = bb % (1 + aW - aX) + aX else ba.value = bb end end
end ;
if offsets_table[1] then
debugPrint(1, "Offsets list has length greater than 0", nil, "lazyChildMaker")
ba.address = R + aQ;
ba.setOffsetCount(#offsets_table)
for a2 = 1, #offsets_table do ba.setOffset(a2 - 1, offsets_table[a2]) end ;
local val = offsets_table[#offsets_table] + q * aS;
ba.setOffset(#offsets_table - 1, val)
end ;
local bc, bd, U;
if type(b2[q + 1]) == "table" then
debugPrint(3, "Description " .. q + 1 .. " is a table.  Length : " .. nb(#b2[q + 1]), nil, "lazyChildMaker")
if debug_verbosity &gt;= 5 then recursive_print(b2[q + 1]) end ;
if #b2[q + 1] == 3 then
bd, U, bc = b2[q + 1][1], b2[q + 1][2], b2[q + 1][3]
debugPrint(7, "Offset : " .. nb(bd) .. "  Type : " .. U .. "  Description : " .. bc, nil, "lazyChildMaker")
elseif #b2[q + 1] == 2 then
local be, bf = b2[q + 1][1], b2[q + 1][2]
debugPrint(7, "First : " .. be .. "  Second : " .. bf, nil, "lazyChildMaker")
if type(be) == "number" and type(bf) == "string" then bd, bc = be, bf elseif type(be) == "string" and type(bf) == "number" then bd, bc = bf, be end
else
bd = b2[q + 1].off;
bc = b2[q + 1].desc
end ;
if val then ba.setOffset(#offsets_table - 1, bd) else ba.address = R + aQ + bd end ;
ba.description = bc
end ;
debugPrint(5, "Type is : " .. type(U) .. "  Value : " .. tostring(U), nil, "lazyChildMaker")
if b7 then
debugPrint(5, "Custom type is : " .. b7, nil, "lazyChildMaker")
ba.type = 13;
ba.CustomTypeName = b7
else ba.type = setOptional(U, b6) end ;
if V then
debugPrint(5, "Linked dropdown : " .. V, nil, "lazyChildMaker")
ba.DropDownLinked = true;
ba.DropDownLinkedMemrec = V
end ;
if I then ba.Options = I end ;
if b9 then b1.Collapsed = true end ;
if b8 then
local bg = b1.Child[q]
debugPrint(5, "Nesting inside child : (" .. bg.ID .. ")  " .. bg.Description, nil, "lazyChildMaker")
ba.appendToEntry(bg)
else ba.appendToEntry(b1) end
end
end;
function lazy_child_deleter(G, bh)
local ac = G;
debugPrint(1, "Invoked lazyChildDeleter()", nil, "lazyChildDeleter")
debugPrint(2, "Deleting all child entries of (" .. ac.id .. ") " .. ac.description, nil, "lazyChildDeleter")
local bi = ac.Count;
debugPrint(3, "Memory record children : " .. bi, nil, "lazyChildDeleter", nil, "lazyChildDeleter")
if bi &gt; 0 then
local bj, bk = 1, bi;
debugPrint(5, "For i = " .. bj .. ", " .. bk .. "  ( " .. 1 + bk - bj .. " )", nil, "lazyChildDeleter")
for q = 1, bi do
local bl = ac.Child[0]
local bm = bl.description;
local bn = bl.id;
debugPrint(7, "Iteration : " .. q, nil, "lazyChildDeleter")
debugPrint(8, "Deleting ID : " .. bn .. "  Name : " .. bm, nil, "lazyChildDeleter")
bl.destroy()
debugPrint(9, "Successfully destroyed (" .. bn .. ") " .. bm, nil, "lazyChildDeleter")
end
end ;
if bh then G.Options = nil end
end;
function child_deactivator(bo, bp) if bo.Count and bo.Count &gt; 0 then for q = 0, bo.Count - 1 do
bo.Child[q].Active = false;
if bp then child_deactivator(bo.Child[q], bp) end
end end end;
function to_hex_string(bq)
out_str = string.format("%X", bq)
return out_str
end;
function number_bases(bq) if bq then
local E = "0x" .. string.format("%X", bq) .. "  ( " .. cv(bq) .. " )"
return E
else return "nil" end end;
function table_to_string(br, bs, bt, bu, bv)
local bs = bs or " "
local bt = bt or false;
local bu = bu or false;
local bv = bv or false;
local bw = {}
local bx = {}
local by = ""
local bz = ""
debugPrint(3, "Inside tableToString()", nil, "tableToString")
debugPrint(5, "Delimiter : " .. bs, nil, "tableToString")
debugPrint(5, "Reversed : " .. tostring(bt), nil, "tableToString")
debugPrint(5, "To hex : " .. tostring(bu), nil, "tableToString")
debugPrint(5, "Return all : " .. tostring(bv), nil, "tableToString")
if debug_verbosity &gt;= 5 then recursive_print(br) end ;
for q = 1, #br do
local b0;
debugPrint(7, "Iteration : " .. q, nil, "tableToString")
if bt then
b0 = br[-q]
debugPrint(7, "Current value : " .. b0, nil, "tableToString")
else b0 = br[q] end ;
debugPrint(7, "Current value : " .. b0, nil, "tableToString")
bw[q] = tostring(b0)
bx[q] = hx(tonumber(b0))
by = by .. tostring(b0) .. bs;
bz = bz .. hx(b0) .. bs
end ;
by = string.sub(by, 1, -2)
bz = string.sub(bz, 1, -2)
debugPrint(5, "Decimal string : " .. by, nil, "tableToString")
debugPrint(5, "Hexadecimal string : " .. bz, nil, "tableToString")
if bv then
local bA = {}
bA.dec_string = by;
bA.hex_string = bz;
bA.dec_table = bw;
bA.hex_table = bx;
return bA
end ;
if bu then return bz else return by end
end;
function to_byte_string(bq, bB, bC)
local bD = bB or false;
local return_as_hex = return_as_hex or false;
local bE = string.format("%X", bq)
local bF = #bE + #bE % 2;
local bG = math.floor(bF / 2)
if #bE % 2 == 1 then bE = "0" .. bE end ;
local bH = {}
local bI = ""
local bJ = ""
debugPrint(3, "As hex : " .. bE, nil, "toByteString")
debugPrint(5, "Hex length : " .. bF, nil, "toByteString")
debugPrint(5, "Bytes length : " .. bG, nil, "toByteString")
for q = 1, math.floor(bF / 2) do
if bC and #bH == bC then break end ;
local bK = bF - q * 2 + 1;
local bL = bF - (q - 1) * 2;
debugPrint(7, "Start at char pos : " .. bK .. "  End at char pos : " .. bL, nil, "toByteString")
local bM = string.sub(bE, bK, bL)
bI = bI .. bM .. " "
bJ = bJ .. string.format("%X", tonumber(bM, 16)) .. " "
bH[#bH + 1] = tonumber(bM, 16)
end ;
bI = string.sub(bI, 1, -2)
bJ = string.sub(bJ, 1, -2)
if debug_verbosity &gt;= 5 then recursive_print(bH) end ;
if bD then
local bN = {}
bN.as_hex = bE;
bN.hex_length = bF;
bN.bytes_length = bG;
bN.bytes_table = bH;
bN.bytes_string = bI;
bN.bytes_decimal_string = bJ;
return bN
end ;
return bH
end;
function check_print_output_width(aW, bO)
local aW = aW or 500;
local bO = bO or "#"
local E = ""
for q = 1, aW // 5 do E = E .. string.rpad(tostring(q * 5), 5, bO) end ;
print(E)
end;
string.lpad = function(bP, bQ, bR)
if bR == nil then bR = ' ' end ;
return bP .. string.rep(bR, bQ - #bP)
end;
string.rpad = function(bP, bQ, bR)
if bR == nil then bR = ' ' end ;
return string.rep(bR, bQ - #bP) .. bP
end;
string.split = function(bS, bT)
if bT == nil then bT = "%s" end ;
local a5 = {}
for bP in string.gmatch(bS, "([^" .. bT .. "]+)") do table.insert(a5, bP) end ;
return a5
end;
function string_to_byte_string(bU, bV, bW)
local bX = bV or ""
local bY = bW or ""
local bZ = ""
local b_ = ""
local c0 = stringToByteTable(bU)
for c1, bR in ipairs(c0) do
bZ = bZ .. string.format("%X", bR) .. " "
b_ = b_ .. tostring(bR) .. " "
end ;
local c2 = {}
c2.hex_string = bX .. bZ .. bY;
c2.dec_string = bX .. b_ .. bY;
return c2.hex_string
end;
function cv(c3, c4, c5)
if c4 then c3 = math.floor(c3) end ;
local c6 = c3;
while true do
c6, k = string.gsub(c6, "^(-?%d+)(%d%d%d)", "%1,%2")
if k == 0 then break end
end ;
return c6
end;
string.pstring = function(c7, c8, c9, ca)
if c7 == "__test__" then
local cb = { "1", "One", { 1, 2 }, "Five:Six", nil, ['some_key'] = 'some_value', ['some_other_key'] = 'some_other_value' }
print("Running test version of string.pstring() with following table")
recursive_print(cb)
local cc = string.pstring(cb, c8, c9, ca)
print("Resulting output")
print(cc)
return
end ;
local cd = c9 or "="
local ce = c8 or ", "
local cf = ca or true;
local cg = type(c7)
if cg == "string" then return '"' .. c7 .. '"' elseif cg == "number" then return tostring(c7) elseif cg == "nil" then return "nil" elseif cg == "table" then
local E = "{ "
local ch;
for q = 1, #c7 do
ch = string.pstring(c7[q], c8, c9, cf)
E = E .. ch .. ce
end ;
for C, D in pairs(c7) do if cf and type(C) == "number" then elseif cd == "=" then
local ci = '[' .. string.pstring(C) .. ']'
local cj = string.pstring(D)
ch = ci .. cd .. cj .. ce;
E = E .. ch
else
ch = string.pstring(C) .. cd .. string.pstring(D) .. ce;
E = E .. ch
end end ;
E = E .. "}"
return E
else return tostring(c7) end
end;
function deep_copy(ck)
local cl = {}
local function cm(ck)
if type(ck) ~= "table" then return ck elseif cl[ck] then return cl[ck] end ;
local cn = {}
cl[ck] = cn;
for c1, D in pairs(ck) do cn[cm(c1)] = cm(D) end ;
return setmetatable(cn, getmetatable(ck))
end;
return cm(ck)
end;
function print_dictionary(co, cp, bE)
local cq = cp or false;
for C, D in pairs(co) do
local cr;
if type(D) == "number" and bE then cr = "0x" .. string.format("%X",
D) elseif type(D) == "string" then cr = '"' .. tostring(D) .. '"' else cr = tostring(D) end ;
if cq then print('"' .. tostring(C) .. '" : ' .. cr .. ",") else print(C .. " = " .. cr) end
end
end;
function recursive_print(cs, ct, q)
local ct = ct or 100;
local q = q or ""
if ct &lt; 1 then
print "ERROR: Item limit reached."
return ct - 1
end ;
local cu = type(cs)
if cu ~= "table" then
print(q, cu, cs)
return ct - 1
end ;
print(q, cu)
for k, cw in pairs(cs) do
ct = recursive_print(cw, ct, q .. "\t[" .. tostring(k) .. "]")
if ct &lt; 0 then break end
end ;
return ct
end;
function multiply_table(br, cx)
debugPrint(5, "Called multiply_table()", nil, "multiply_table")
local cy = {}
for q = 1, #br do
debugPrint(7, "Iteration : " .. q .. "  Number : " .. br[q] .. "  Multiplier : " .. cx, nil, "multiply_table")
cy[q] = tonumber(br[q]) * cx
end ;
return cy
end;
function add_tables(cz)
debugPrint(5, "Called add_tables()", nil, "add_tables")
local cA = 0;
local cB = {}
for q = 1, #cz do
local cC = #cz[q]
if cC &gt; cA then cA = cC end
end ;
for q = 1, cA do cB[q] = 0 end ;
for q = 1, #cz do
debugPrint(7, "Iteration : " .. q, nil, "add_tables")
for a2 = 1, cA do
debugPrint(9, "Iteration : " .. q .. " : " .. a2, nil, "add_tables")
if cz[q][a2] then cB[a2] = cB[a2] + cz[q][a2] end
end
end ;
return cB
end;
function create_shaped_table(br, cD, cE)
local cF = cD or false;
local cG = cE or false;
debugPrint(3, "Remove numbered keys : " .. tostring(cF), nil, "create_shaped_table")
debugPrint(3, "Force lower case keys : " .. tostring(cG), nil, "create_shaped_table")
if br[1] and br.shape then
if debug_verbosity &gt;= 3 then recursive_print(br) end ;
local c2 = {}
for q = 1, #br do
debugPrint(5, "Outer loop iteration : " .. q, nil, "create_shaped_table")
local cH = {}
for C, D in pairs(br[q]) do
debugPrint(7, "Current key : " .. tostring(C) .. "  Type : " .. type(C) .. "  Value : " .. tostring(D), nil,
"create_shaped_table")
local cI;
if cF and type(C) == "number" then local cJ elseif type(C) == "string" and cG then cI = string.lower(C) else cI = C end ;
if cI then
debugPrint(7, "New key : " .. tostring(cI), nil, "create_shaped_table")
cH[cI] = D
end
end ;
for a2 = 1, #br.shape do
debugPrint(7, "Inner loop iteration : " .. a2, nil, "create_shaped_table")
local cK = br[q][a2]
local cL = br.shape[a2]
local cM;
debugPrint(7,
"Key : {" .. type(cL) .. "} [" .. cL .. "]  Value : (" .. type(cK) .. ") &lt;" .. string.pstring(cK) .. "&gt;",
nil, "create_shaped_table")
if cG then cM = string.lower(cL) else cM = cL end ;
debugPrint(7,
"Setting new key : {" .. type(cM) .. "} [" .. cM .. "]  Value : (" .. type(cK) .. ") &lt;" .. string.pstring(cK) .. "&gt;",
nil, "create_shaped_table")
cH[cM] = cK
end ;
for C, D in pairs(br.shape) do cH[C] = D end ;
c2[q] = cH
end ;
return c2
else return br end
end;
function check_matching_values(cN, cO)
local matches = 0;
local cP = 0;
local c2 = {}
local cQ = {}
local cR = {}
assert(cN and cO, "Need both an associative table and a value to check")
for C, D in pairs(cN) do if D == cO then
matches = matches + 1;
cQ[#cQ + 1] = C
else
cR[#cR + 1] = C;
cP = cP + 1
end end ;
c2.matched_keys = cQ;
c2.mismatched_keys = cR;
c2.matched_count = matches;
c2.mismatch_count = cP;
c2.key_count = matches + cP;
return c2
end;
function range_string_to_number_list(bU)
debugPrint(9, "In string : " .. bU, nil, "range_string_to_number_list")
local cS, cT;
local cU = {}
local cV = 1;
local cW = string.split(bU, ":")
if #cW &gt; 1 then
cS = tonumber(cW[1])
cT = tonumber(cW[2])
for q = cS, cT do
cU[cV] = q;
cV = cV + 1
end ;
return cU
else return { bU } end
end;
function create_number_list(cX)
if cX == "__test__" then
local cY = { { 1, 2, "3:7" }, { 10, 11, "15:21" }, 23, 27, { 29, 30 }, { 31 } }
print("[INFO] Running test version of create_number_list() with following table")
recursive_print(cY)
print("[INFO] Resulting table")
local cZ = { 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 27, 29, 30, 31 }
local cc = create_number_list(cY)
recursive_print(cc)
print("[INFO] Comparing actual result with expected result")
if deep_compare(cZ,
cc) then print("[INFO] Actual result and expected result match. create_number_list('__test__') complete") else print("[WARN] Actual result and expected result do not match. create_number_list('__test__') failed") end ;
test_timer(create_number_list, 0, true, cY)
return
end ;
local c_ = {}
if type(cX) == "table" then for q = 1, #cX do
local d0;
if type(cX[q]) == "table" then d0 = create_number_list(cX[q]) elseif type(cX[q]) == "string" then d0 = range_string_to_number_list(cX[q]) elseif type(cX[q]) == "number" then c_[#c_ + 1] = cX[q] end ;
if d0 then for a2 = 1, #d0 do c_[#c_ + 1] = d0[a2] end end
end end ;
if type(cX) == "string" then
local d0 = range_string_to_number_list(cX)
for q = 1, #d0 do c_[#c_ + 1] = d0[q] end
end ;
return c_
end;
function get_dictionary_length(cN)
local d1 = 0;
for C, D in pairs(cN) do d1 = d1 + 1 end ;
return d1
end;
function create_numbered_table(c_, H)
if c_ == "__test__" then
local cY = { 1, 3, 5, 7, 9, 10, 12, 14, 16, 20 }
local d2 = { "1", "3", "5", "7", "9", "10", "12", "14", "16", "20" }
print("[INFO] Running test version of create_numbered_table() with following tables")
recursive_print(cY)
recursive_print(d2)
print("[INFO] Resulting table")
local cc = create_numbered_table(cY, d2)
local cZ = { { 1, "1" }, { 3, "3" }, { 5, "5" }, { 7, "7" }, { 9, "9" }, { 10, "10" }, { 12, "12" }, { 14, "14" }, { 16, "16" }, { 20, "20" } }
recursive_print(cc)
print("[INFO] Comparing actual result with expected result")
if deep_compare(cZ,
cc) then print("[INFO] Actual result and expected result match. create_number_list('__test__') complete") else print("[WARN] Actual result and expected result do not match. create_number_list('__test__') failed") end ;
print("Testing run time")
test_timer(create_numbered_table, 0, true, table.unpack({ cY, d2 }))
return
end ;
local c2 = {}
debugPrint(5, "Number list and string list", nil, "create_numbered_table")
if debug_verbosity &gt; 5 then
recursive_print(c_)
recursive_print(H)
end ;
assert(#c_ == #H, "Number list and string list have different lengths")
for q = 1, #c_ do c2[#c2 + 1] = { c_[q], H[q] } end ;
return c2
end;
function join_tables(...)
if select(1, ...) == "__test__" then
local d3 = { { 1, 2, 3, 4, 5 }, { 6, 7, 8, 9, 10 }, { "a", "b", "c" }, { { "first", 1 }, { "second", 2 }, "third" } }
print("[INFO] Running test version of create_numbered_table() with following tables")
recursive_print(d3)
local cc = join_tables(table.unpack(d3))
local cZ = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "a", "b", "c", { "first", 1 }, { "second", 2 }, "third" }
print("[INFO] Resulting table")
recursive_print(cc)
print("[INFO] Comparing actual result with expected result")
if deep_compare(cZ,
cc) then print("[INFO] Actual result and expected result match. create_number_list('__test__') complete") else
print("[WARN] Actual result and expected result do not match. create_number_list('__test__') failed")
return
end ;
print("Testing run time")
test_timer(join_tables, 0, true, table.unpack(d3))
return
end ;
local be = select(1, ...)
local d4 = select("#", ...)
if d4 &gt; 1 then for q = 2, d4 do
local d5 = select(q, ...)
for a2 = 1, #d5 do
local d6 = d5[a2]
be[#be + 1] = d6
end
end end ;
return be
end;
function table.flatten(d7)
local cc = {}
local function d8(d7) for d9, cw in ipairs(d7) do if type(cw) == "table" then d8(cw) else table.insert(cc,
cw) end end end;
d8(d7)
return cc
end;
function table.zip(...)
if select("#", ...) == 1 and select(1, ...) == "__test__" then
local d3 = { { 1, 2, 3 }, { "4", "5", "6" }, { 7, "8", 9, "10" }, { "11", { 12, 13, 14 }, 15, "16, 17" } }
print("[INFO] Running test version of table.zip() with following table")
recursive_print(d3)
print("[INFO] Resulting table")
local cZ = { { 1, "4", 7, "11" }, { 2, "5", "8", { 12, 13, 14 } }, { 3, "6", 9, 15 }, { "10", "16, 17" } }
local cc = table.zip(table.unpack(d3))
print(string.pstring(cc, nil, nil, true))
recursive_print(cc)
print("[INFO] Comparing actual result with expected result")
if deep_compare(cZ,
cc) then print("[INFO] Actual result and expected result match. table.zip('__test__') complete") else print("[WARN] Actual result and expected result do not match. table.zip('__test__') failed") end ;
print("Testing run time")
test_timer(table.zip, 0, true, table.unpack(d3))
return
end ;
local da = 0;
for q = 1, select("#", ...) do
local db = #select(q, ...)
if db &gt; da then da = db end
end ;
local c2 = {}
for q = 1, da do
local cH = {}
for a2 = 1, select("#", ...) do
local D = select(a2, ...)[q] or nil;
cH[#cH + 1] = D
end ;
c2[q] = cH
end ;
return c2
end;
function table.contains(a5, D)
for d9, cw in pairs(a5) do if cw == D then return true end end ;
return false
end;
function table.extract(d7, dc)
local cc = {}
for d9, cw in ipairs(d7) do table.insert(cc, cw[dc]) end ;
return cc
end;
function table.flatten(d7)
local cc = {}
local function d8(d7) for d9, cw in ipairs(d7) do
string.pstring(d9)
string.pstring(cw)
if type(cw) == "table" then d8(cw) else table.insert(cc, cw) end
end end;
d8(d7)
return cc
end;
function table.implode(d7, dd, de, df)
local cc = ""
for d9, cw in ipairs(d7) do
if cc ~= "" and df then cc = cc .. df end ;
cc = cc .. dd .. cw .. de
end ;
return cc
end;
function table.insertflat(dg, dh) if type(dh) == "table" then for d9, D in ipairs(dh) do table.insertflat(dg,
D) end else table.insert(dg, dh) end end;
function table.isempty(a5) return next(a5) == nil end;
function table.join(...)
local cc = {}
for d9, a5 in ipairs(arg) do if type(a5) == "table" then for d9, cw in ipairs(a5) do table.insert(cc,
cw) end else table.insert(cc, a5) end end ;
return cc
end;
function table.keys(dg)
local di = {}
for k, d9 in pairs(dg) do table.insert(di, k) end ;
return di
end;
function table.merge(...)
local cc = {}
for d9, a5 in ipairs(arg) do if type(a5) == "table" then for k, cw in pairs(a5) do cc[k] = cw end else error("invalid value") end end ;
return cc
end;
function table.translate(d7, dj)
local cc = {}
for d9, D in ipairs(d7) do
local dk;
if type(dj) == "function" then dk = dj(D) else dk = dj[D] end ;
if dk then table.insert(cc, dk) end
end ;
return cc
end;
function deep_compare(dl, dm, dn)
local dq = type(dl)
local dr = type(dm)
if dq ~= dr then return false end ;
if dq ~= 'table' and dr ~= 'table' then return dl == dm end ;
local ds = getmetatable(dl)
if not dn and ds and ds.__eq then return dl == dm end ;
for dt, du in pairs(dl) do
local dw = dm[dt]
if dw == nil or not deep_compare(du, dw) then return false end
end ;
for dx, dw in pairs(dm) do
local du = dl[dx]
if du == nil or not deep_compare(du, dw) then return false end
end ;
return true
end;
table.print = recursive_print;
force_lang = nil;
current_lang = "eng"
weapon_stats = {}
armour_stats = {}
real_stats = {}
display_stats = {}
battle_stats = {}
battle_atb = {}
battle_limit_break = {}
chocobo_stats_1 = {}
chocobo_stats_2 = {}
battle_char_names = {}
menu_options = {}
initial_weapons = { { "Buster Sword", 0, { 0x23, 0xFF, 0x11, 0xFF, 0x12, 0xFF, 0x01, 0x00, 0x60, 0x00, 0xFF, 0xF8, 0xFF, 0xFF, 0x01, 0x02, 0x00, 0x04, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x1B, 0x05, 0x09, 0xFF, 0xFF, 0xFF, 0xFF } }, { "Leather Glove", 16, { 0x23, 0xFF, 0x11, 0xFF, 0x0D, 0xFF, 0x01, 0x02, 0x63, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x5E, 0x05, 0x24, 0xFF, 0xFF, 0xFE, 0xFF } }, { "Gatling Gun", 32, { 0x03, 0xFF, 0x11, 0xFF, 0x0E, 0xFF, 0x01, 0x00, 0x61, 0x10, 0xFF, 0xF8, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x2E, 0x2F, 0x2D, 0xFF, 0xFF, 0xFF, 0xFF } }, { "Mythril Clip", 48, { 0x23, 0xFF, 0x11, 0xFF, 0x18, 0xFF, 0x01, 0x00, 0x64, 0x00, 0xFF, 0xF8, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x06, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x8D, 0x05, 0x24, 0xFF, 0xFF, 0xFE, 0xFF } }, { "Guard Stick", 62, { 0x23, 0xFF, 0x11, 0xFF, 0x0C, 0xFF, 0x01, 0x00, 0x63, 0x00, 0xFF, 0xF8, 0xFF, 0xFF, 0x08, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x02, 0x01, 0x03, 0xFF, 0x02, 0x01, 0x04, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x17, 0x05, 0x36, 0xFF, 0xFF, 0xF6, 0xFF } }, { "Spear", 73, { 0x23, 0xFF, 0x11, 0xFF, 0x2C, 0xFF, 0x01, 0x00, 0x61, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x00, 0x01, 0x00, 0x10, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x08, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x56, 0x5A, 0x05, 0x18, 0xFF, 0xFF, 0xF6, 0xFF } }, { "4-point Shuriken", 87, { 0x03, 0xFF, 0x11, 0xFF, 0x17, 0xFF, 0x01, 0x00, 0x64, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x06, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x55, 0x05, 0x30, 0xFF, 0xFF, 0xF6, 0xFF } }, { "Yellow M-phone", 101, { 0x23, 0xFF, 0x11, 0xFF, 0x24, 0xFF, 0x01, 0x00, 0x64, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x08, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x35, 0x22, 0x05, 0x24, 0xFF, 0xFF, 0xF6, 0xFF } }, { "Quicksilver", 114, { 0x03, 0xFF, 0x11, 0xFF, 0x26, 0xFF, 0x01, 0x00, 0x6E, 0x00, 0xFF, 0xF9, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x20, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x0A, 0xFF, 0xFF, 0xFF, 0x06, 0x07, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x12, 0x7B, 0x2F, 0x2A, 0xFF, 0xFF, 0xF6, 0xFF } } }
perfect_weapon_stats_1 = { 0x03, 0xFF, 0x11, 0xFF, 0xFE, 0xFF, 0x03, 0x00, 0xFE, 0x00, 0xFF, 0xF8, 0xFF, 0xFF }
perfect_weapon_stats_2 = { 0x02, 0x00, 0x04, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0x06, 0x07, 0x06, 0x07, 0x06, 0x07, 0x06, 0x07, 0x12, 0x1B, 0x05, 0x09, 0xFF, 0xFF, 0xFF, 0xFF }
initial_armour = { 0x00, 0xFF, 0x08, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF }
perfect_armour_stats = { 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0x00, 0x06, 0x07, 0x06, 0x07, 0x06, 0x07, 0x06, 0x07, 0x03, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x02, 0x03, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF }
initial_accessory = { 0x00, 0xFF, 0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0xFE, 0xFF }
perfect_accessory_stats = { 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xF7, 0x7E, 0xE0, 0x07, 0xFF, 0x01, 0xFE, 0xFF }
config_menu_settings = { shape = { "off", "type", "desc" }, { 0, 0, "Battle speed" }, { 1, 0, "Battle message" }, { 2, 0, "Sound / Controller / Cursor / ATB" }, { 3, 0, "Camera angle / Magic order" }, { 0x14, 0, "Field message speed" } }
materia_array = { shape = { "Offset", "Value" }, { 0, 0x49 }, { 4, 0x48 }, { 8, 0x47 }, { 12, 0x46 }, { 16, 0x45 }, { 20, 0x44 }, { 24, 0x41 }, { 28, 0x40 }, { 32, 0x3E }, { 36, 0x3D }, { 40, 0x3C }, { 44, 0x3B }, { 48, 0x3A }, { 52, 0x39 }, { 56, 0x38 }, { 60, 0x37 }, { 64, 0x36 }, { 68, 0x35 }, { 72, 0x34 }, { 76, 0x33 }, { 80, 0x32 }, { 84, 0x31 }, { 88, 0x23 }, { 92, 0x22 }, { 96, 0x21 }, { 100, 0x20 }, { 104, 0x1F }, { 108, 0x1E }, { 112, 0x1D }, { 116, 0x1C }, { 120, 0x1B }, { 124, 0x1A }, { 128, 0x19 }, { 132, 0x18 }, { 136, 0x17 }, { 140, 0x30 }, { 144, 0x2C }, { 148, 0x2B }, { 152, 0x2A }, { 156, 0x29 }, { 160, 0x28 }, { 164, 0x27 }, { 168, 0x25 }, { 172, 0x24 }, { 176, 0x15 }, { 180, 0x14 }, { 184, 0x13 }, { 188, 0x0F }, { 192, 0x0E }, { 196, 0x12 }, { 200, 0x11 }, { 204, 0x10 }, { 208, 0x0D }, { 212, 0x0C }, { 216, 0x0B }, { 220, 0x0A }, { 224, 0x09 }, { 228, 0x08 }, { 232, 0x07 }, { 236, 0x06 }, { 240, 0x05 }, { 244, 0x04 }, { 248, 0x03 }, { 252, 0x02 }, { 256, 0x01 }, { 260, 0x00 }, { 264, 0x5A }, { 268, 0x59 }, { 272, 0x58 }, { 276, 0x57 }, { 280, 0x56 }, { 284, 0x55 }, { 288, 0x54 }, { 292, 0x53 }, { 296, 0x52 }, { 300, 0x51 }, { 304, 0x50 }, { 308, 0x4F }, { 312, 0x4E }, { 316, 0x4D }, { 320, 0x4C }, { 324, 0x4B }, { 328, 0x4A }, { 796, 0xFFFFFFFF } }
function custom_type_menu_item_qty()
if type(ff7_menu_item_qty_bytestovalue) == "function" then return end ;
local dy = "FF7 Menu Item Quantity"
local dz = 2;
local dA = "ff7_menu_item_qty_"
function ff7_menu_item_qty_bytestovalue(dB, dC, dD)
if dB == 255 and dC == 255 then return 0 end ;
local dE = final_fantasy_vii_menu_items(dB, dC)
return dE.qty
end;
function ff7_menu_item_qty_valuetobytes(dF, dD)
local dG, dH = readBytes(dD, 2, false)
local dI = dH % 2;
if dF &gt; 99 then dF = 99 end ;
return dG, dF * 2 + dI
end;
registerCustomTypeLua(dy, dz, ff7_menu_item_qty_bytestovalue, ff7_menu_item_qty_valuetobytes, isFloat)
end;
function custom_type_menu_item_id()
if type(ff7_menu_item_id_bytestovalue) == "function" then return end ;
local dy = "FF7 Menu Item ID"
local dz = 2;
local dA = "ff7_menu_item_id_"
function ff7_menu_item_id_bytestovalue(dB, dC, dD)
if dB == 255 and dC == 255 then return 65535 end ;
local dE = final_fantasy_vii_menu_items(dB, dC)
return dE.id
end;
function ff7_menu_item_id_valuetobytes(dF, dD)
local dG, dH = readBytes(dD, 2, false)
local dJ = dH // 2;
local dK = 2 * dJ + dF // 256;
local dL = dF % 256;
return dL, dK
end;
registerCustomTypeLua(dy, dz, ff7_menu_item_id_bytestovalue, ff7_menu_item_id_valuetobytes, isFloat)
end;
function custom_type_3_bytes()
if type(three_bytes_bytestovalue) == "function" then return end ;
local dy = "3 Bytes"
local dz = 3;
local dA = "three_bytes_"
function three_bytes_bytestovalue(dB, dC, dM, dD)
local dN = dB + dC * 256 + dM * 256 ^ 2;
return dN
end;
function three_bytes_valuetobytes(dF, dD)
local dO = "000000" .. string.format("%X", dF)
local dG = tonumber(dO:sub(#dO - 1, #dO), 16)
local dH = tonumber(dO:sub(#dO - 3, #dO - 2), 16)
local dP = tonumber(dO:sub(#dO - 5, #dO - 4), 16)
return dG, dH, dP
end;
registerCustomTypeLua(dy, dz, three_bytes_bytestovalue, three_bytes_valuetobytes, isFloat)
end;
function custom_type_ff7_string()
assert(1 == 0, "Don't call custom_type_ff7_string : not implemented")
local dy = "FF7 String"
local dz = 9;
local dA = "ff7_string_"
function ff7_string_bytestovalue(dB, dC, dM, dQ, dR, dS, dT, dU, dV, dD)
local dW = { dB, dC, dM, dQ, dR, dS, dT, dU, dV }
local dX = 32;
local E = ""
for q = 1, #dW do
if dW[q] == 0 then break end ;
E = E .. string.char(dW[q] + dX)
end ;
return E
end;
function ff7_string_valuetobytes(dF, dD) return 0 end;
registerCustomTypeLua(dy, dz, ff7_string_bytestovalue, ff7_string_valuetobytes, isFloat)
end;
function register_custom_types()
custom_type_menu_item_qty()
custom_type_menu_item_id()
custom_type_3_bytes()
end;
function load_ff7_config()
if process then
for q = 1, #steam_versions do if process == steam_versions[q][1] .. ".exe" then
cfg = steam_versions[q][3]
base_mem = 0x400000;
current_lang = force_lang or steam_versions[q][4]
return steam_versions[q][2]
end end ;
local dY = detect_ps1_game_version()
for q = 1, #playstation_versions do for a2 = 1, #playstation_versions[q][2] do if playstation_versions[q][2][a2] == dY then
cfg = playstation_versions[q][3]
current_lang = force_lang or playstation_versions[q][4]
return playstation_versions[q][1] .. " (" .. dY .. ")"
end end end
end ;
return "Could not detect game version and load its config"
end;
function set_base_mem()
modules = { { "mednafen_psx_hw_libretro.dll", 0x829D20 }, { "mednafen_psx_libretro.dll", 0x52ED00 }, { "ePSXe.exe", 0xA82020 } }
processes = { { "ePSXe.exe", 0xA82020 } }
debugPrint(2, "Invoked set_modules()", nil, "set_modules")
for q = 1, #modules do
debugPrint(4, "Checking for " .. modules[q][1], nil, "set_modules")
local dZ = getAddressSafe(modules[q][1])
if dZ then
debugPrint(4, "Found " .. modules[q][1], nil, "set_modules")
module_address = dZ;
base_mem = dZ + modules[q][2]
debugPrint(6, "module_address = " .. dZ .. "  base_mem = " .. base_mem, nil, "set_modules")
return
end
end ;
for q = 1, #processes do if process == processes[q][1] then
base_mem = processes[q][2]
debugPrint(4, "Found " .. process, nil, "set_modules")
return
end end ;
if process then for q = 1, #steam_versions do if process == steam_versions[q][1] .. ".exe" then return end end end ;
base_mem = find_ff7_base_mem()
return
end;
function compare_versions()
print("[INFO] Comparing feature support for each known version of Final Fantasy VII")
print("[INFO] More unimplemented addresses generally means more features missing")
local d_ = {}
for q = 1, #steam_versions do d_[#d_ + 1] = { steam_versions[q][2], steam_versions[q][3] } end ;
for q = 1, #playstation_versions do d_[#d_ + 1] = { playstation_versions[q][1], playstation_versions[q][3] } end ;
for q = 1, #d_ do
local e0 = check_matching_values(d_[q][2], unimplemented)
local E = "Name : " .. d_[q][1] .. "\nTotal addresses : " .. e0.key_count .. "\nUnimplemented addresses : " .. e0.matched_count;
print(E)
print("Missing addresses")
for q = 1, #e0.matched_keys do print("\t" .. e0.matched_keys[q]) end ;
print("-----------------------------------------")
end
end;
function final_fantasy_vii_menu_items(bq, e1)
local dK;
local dL;
local dE = {}
if bq == 65535 or bq == 255 and e1 == 255 then return "empty" end ;
if bq &gt; 255 then
local dO = string.format("%X", bq)
dK = dO:sub(#dO - 3, #dO - 2)
dK = tonumber(dK, 16)
dL = dO:sub(#dO - 1, #dO)
dL = tonumber(dL, 16)
elseif bq &lt;= 255 and e1 &lt;= 255 then
dL = bq;
dK = e1
end ;
dE.id_byte = dL;
dE.qty_byte = dK;
dE.id = dL + dK % 2 * 256;
dE.qty = math.floor(dK / 2)
if debug_verbosity &gt; 7 then
debugPrint(7, "Properties table : ", nil, "final_fantasy_vii_menu_items")
recursive_print(dE)
end ;
return dE
end;
function find_ff7_base_mem()
local e2 = "03 00 00 00 80 0C 5A 27 08 00 40 03 00 00 00 00"
local cc = easy_scan(0, nil, e2)
if cc then return cc end
end;
function set_data()
weapon_stats = { ['shape'] = { "off", "type", "desc" }, { 4, 0, tr.atk[current_lang] }, { 8, 0, tr.atk[current_lang] .. " %" }, { 0, 0, tr.atk_range[current_lang], ddl = "weapon_range_template" }, { 0x18, 0, tr.bonus_mag[current_lang], ddl = "weapon_stat_bonus_template" }, { 0x19, 0, tr.bonus_spi[current_lang], ddl = "weapon_stat_bonus_template" }, { 5, 0, tr.added_status[current_lang], ddl = "weapon_status_effect_template" }, { nil, "header", tr.added_elem[current_lang], options = "moHideChildren", children = create_shaped_table({ ['shape'] = { "off", "type", "desc" }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, tr.fire[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, tr.ice[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, tr.lightning[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 3, ['Binary.Size'] = 1 } }, tr.earth[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 4, ['Binary.Size'] = 1 } }, tr.poison[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 5, ['Binary.Size'] = 1 } }, tr.gravity[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 6, ['Binary.Size'] = 1 } }, tr.water[current_lang] }, { 0x10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 7, ['Binary.Size'] = 1 } }, tr.wind[current_lang] }, { 0x11, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, tr.holy[current_lang] } }) }, { 6, 0, tr.mat_growth[current_lang], ddl = "materia_growth_template" }, { nil, "header", tr.mat_slots[current_lang], options = "moHideChildren", children = create_shaped_table({ ['shape'] = { "off", "type", "desc" }, { 0x1C, 1, tr.mat_slots[current_lang] .. " 1 &amp; 2", hex = true, ddl = "materia_slots_template" }, { 0x1E, 1, tr.mat_slots[current_lang] .. " 3 &amp; 4", hex = true, ddl = "materia_slots_template" }, { 0x20, 1, tr.mat_slots[current_lang] .. " 5 &amp; 6", hex = true, ddl = "materia_slots_template" }, { 0x22, 1, tr.mat_slots[current_lang] .. " 7 &amp; 8", hex = true, ddl = "materia_slots_template" } }) }, { 0xE, 0, tr.equip_char[current_lang], ddl = "equippable_character_template" } }
armour_stats = { ['shape'] = { "off", "type", "desc" }, { 2, 0, tr.def[current_lang] }, { 3, 0, tr.mag_def[current_lang] }, { 4, 0, tr.def[current_lang] .. " %" }, { 5, 0, tr.mag_def[current_lang] .. " %" }, { 6, 0, tr.resist_status[current_lang], ddl = "weapon_status_effect_template" }, { nil, "header", "Stat bonuses", options = "moHideChildren", children = { { ['off'] = 0x18, ['type'] = 0, ['desc'] = tr.bonus_stat_type[current_lang] .. " 1", ddl = "armour_stat_bonus_template", children = { { ['off'] = 0x1C, ['type'] = 0, ['desc'] = tr.bonus_stat_val[current_lang] .. " 1" } } }, { ['off'] = 0x19, ['type'] = 0, ['desc'] = tr.bonus_stat_type[current_lang] .. " 2", ddl = "armour_stat_bonus_template", children = { { ['off'] = 0x1D, ['type'] = 0, ['desc'] = tr.bonus_stat_val[current_lang] .. " 2" } } }, { ['off'] = 0x1A, ['type'] = 0, ['desc'] = tr.bonus_stat_type[current_lang] .. " 3", ddl = "armour_stat_bonus_template", children = { { ['off'] = 0x1E, ['type'] = 0, ['desc'] = tr.bonus_stat_val[current_lang] .. " 3" } } }, { ['off'] = 0x1B, ['type'] = 0, ['desc'] = tr.bonus_stat_type[current_lang] .. " 4", ddl = "armour_stat_bonus_template", children = { { ['off'] = 0x1F, ['type'] = 0, ['desc'] = tr.bonus_stat_val[current_lang] .. " 4" } } } } }, { 0x11, 0, tr.mat_growth[current_lang], ddl = "materia_growth_template" }, { nil, "header", tr.mat_slots[current_lang], options = "moHideChildren", children = { { ['off'] = 9, ['type'] = 1, ['desc'] = tr.mat_slots[current_lang] .. " 1 &amp; 2", hex = true, ddl = "materia_slots_template" }, { ['off'] = 11, ['type'] = 1, ['desc'] = tr.mat_slots[current_lang] .. " 3 &amp; 4", hex = true, ddl = "materia_slots_template" }, { ['off'] = 13, ['type'] = 1, ['desc'] = tr.mat_slots[current_lang] .. " 5 &amp; 6", hex = true, ddl = "materia_slots_template" }, { ['off'] = 15, ['type'] = 1, ['desc'] = tr.mat_slots[current_lang] .. " 7 &amp; 8", hex = true, ddl = "materia_slots_template" } } }, { 0x12, 0, tr.equip_char[current_lang], ddl = "equippable_character_template" } }
accessory_stats = { shape = { "off", "type", "desc" }, { 0, 0, tr.bonus_stat[current_lang], ddl = "armour_stat_bonus_template", children = { { ['off'] = 2, ['type'] = 0, ['desc'] = tr.bonus_amount[current_lang] } } }, { 1, 0, tr.bonus_stat[current_lang], ddl = "armour_stat_bonus_template", children = { { ['off'] = 3, ['type'] = 0, ['desc'] = tr.bonus_amount[current_lang] } } }, { 5, 0, tr.auto_stat_effect[current_lang], ddl = "auto_status_template" }, { 12, 0, tr.equip_chars[current_lang], ddl = "equippable_character_template" }, { 4, 0, tr.elem_def_type[current_lang], ddl = "elemental_defense_type_template" }, { nil, "header", tr.elem_defenses[current_lang], options = "moHideChildren", children = create_shaped_table({ ['shape'] = { "off", "type", "desc", ['ddl'] = "has_protection_template" }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, elem_names[current_lang][1] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, elem_names[current_lang][2] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, elem_names[current_lang][3] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 3, ['Binary.Size'] = 1 } }, elem_names[current_lang][4] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 4, ['Binary.Size'] = 1 } }, elem_names[current_lang][5] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 5, ['Binary.Size'] = 1 } }, elem_names[current_lang][6] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 6, ['Binary.Size'] = 1 } }, elem_names[current_lang][7] }, { 6, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 7, ['Binary.Size'] = 1 } }, elem_names[current_lang][8] }, { 7, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, elem_names[current_lang][9] } }) }, { nil, "header", tr.status_def[current_lang], options = "moHideChildren", children = create_shaped_table({ ['shape'] = { "off", "type", "desc", ['ddl'] = "has_protection_template" }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, sta_names[current_lang][1] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, sta_names[current_lang][2] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, sta_names[current_lang][3] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 3, ['Binary.Size'] = 1 } }, sta_names[current_lang][4] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 4, ['Binary.Size'] = 1 } }, sta_names[current_lang][5] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 5, ['Binary.Size'] = 1 } }, sta_names[current_lang][6] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 6, ['Binary.Size'] = 1 } }, sta_names[current_lang][7] }, { 8, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 7, ['Binary.Size'] = 1 } }, sta_names[current_lang][8] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, sta_names[current_lang][9] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, sta_names[current_lang][10] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, sta_names[current_lang][11] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 3, ['Binary.Size'] = 1 } }, sta_names[current_lang][12] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 4, ['Binary.Size'] = 1 } }, sta_names[current_lang][13] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 5, ['Binary.Size'] = 1 } }, sta_names[current_lang][14] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 6, ['Binary.Size'] = 1 } }, sta_names[current_lang][15] }, { 9, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 7, ['Binary.Size'] = 1 } }, sta_names[current_lang][16] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, sta_names[current_lang][17] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, sta_names[current_lang][18] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, sta_names[current_lang][19] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 4, ['Binary.Size'] = 1 } }, sta_names[current_lang][21] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 5, ['Binary.Size'] = 1 } }, sta_names[current_lang][22] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 6, ['Binary.Size'] = 1 } }, sta_names[current_lang][23] }, { 10, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 7, ['Binary.Size'] = 1 } }, sta_names[current_lang][24] }, { 11, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, sta_names[current_lang][25] }, { 11, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, sta_names[current_lang][26] }, { 11, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, sta_names[current_lang][27] } }) } }
real_stats = { shape = { "off", "type", "desc" }, { 13, 0, tr.lb[current_lang] }, { 42, 1, tr.cur_hp[current_lang] }, { 44, 1, tr.max_hp[current_lang] }, { 46, 1, tr.cur_mp[current_lang] }, { 48, 1, tr.max_mp[current_lang] }, { 0, 0, tr.base_str[current_lang] }, { 4, 0, tr.base_dex[current_lang] }, { 1, 0, tr.base_vit[current_lang] }, { 2, 0, tr.base_mag[current_lang] }, { 3, 0, tr.base_spi[current_lang] }, { 5, 0, tr.base_luc[current_lang] }, { 6, 0, tr.extra_str[current_lang] }, { 10, 0, tr.extra_dex[current_lang] }, { 7, 0, tr.extra_vit[current_lang] }, { 8, 0, tr.extra_mag[current_lang] }, { 9, 0, tr.extra_spi[current_lang] }, { 11, 0, tr.extra_luc[current_lang] }, { 26, 0, tr.cur_weapon[current_lang], ddl = "equipped_weapon_template" }, { 27, 0, tr.cur_armour[current_lang], ddl = "equipped_armour_template" }, { 28, 0, tr.cur_acc[current_lang], ddl = "equipped_accessory_template" }, { 29, 0, tr.added_status[current_lang], ddl = "menu_status_effect_template" }, { 34, 1, tr.total_kills[current_lang] }, { 12, 0, tr.cur_lb_level[current_lang] }, { 36, 0, tr.lb_1_used[current_lang] }, { 38, 0, tr.lb_2_used[current_lang] }, { 40, 0, tr.lb_3_used[current_lang] }, { -1, 0, tr.cur_level[current_lang] }, { 58, 2, tr.cur_exp[current_lang] }, { 126, 2, tr.exp_to_level[current_lang] } }
display_stats = { shape = { "Offset", "Type", "Description" }, { 14, 1, tr.cur_hp[current_lang] }, { 16, 1, tr.max_hp[current_lang] }, { 18, 1, tr.cur_mp[current_lang] }, { 20, 1, tr.max_mp[current_lang] }, { 0, 0, tr.str[current_lang] }, { 4, 0, tr.dex[current_lang] }, { 1, 0, tr.vit[current_lang] }, { 2, 0, tr.mag[current_lang] }, { 3, 0, tr.spi[current_lang] }, { 5, 0, tr.luc[current_lang] }, { 6, 1, tr.atk[current_lang] }, { 8, 1, tr.def[current_lang] }, { 10, 1, tr.mag_atk[current_lang] }, { 12, 1, tr.mag_def[current_lang] } }
battle_stats = { shape = { "Offset", "Type", "Description" }, { -4, 1, tr.cur_mp[current_lang] }, { -2, 1, tr.max_mp[current_lang] }, { 0, 2, tr.cur_hp[current_lang] }, { 4, 2, tr.max_hp[current_lang] } }
battle_atb = { { 0, 0, tr.atb[current_lang] } }
battle_limit_break = { { 0, 0, tr.lb[current_lang] } }
chocobo_stats_1 = { shape = { "off", "type", "desc" }, { 0xF, 0, tr.choc_colour[current_lang], ddl = "chocobo_colour_template" }, { 0xE, 0, tr.choc_gender[current_lang], ddl = "chocobo_gender_template" }, { 0xD, 0, tr.choc_wins[current_lang], ddl = "chocobo_class_template" }, { 0, 1, tr.cur_dash[current_lang] }, { 2, 1, tr.max_dash[current_lang] }, { 4, 1, tr.cur_run[current_lang] }, { 6, 1, tr.max_run[current_lang] }, { 8, 0, tr.accel[current_lang] }, { 9, 0, tr.coop[current_lang] }, { 0xA, 0, tr.intel[current_lang] }, { 0xB, 0, tr.persona[current_lang] } }
chocobo_stats_2 = { shape = { "off", "type", "desc" }, { 0, 1, tr.stamina[current_lang] } }
battle_char_names = { tr.top_char[current_lang], tr.mid_char[current_lang], tr.bot_char[current_lang], tr.enemy[current_lang] .. " ?", tr.enemy[current_lang] .. " 1", tr.enemy[current_lang] .. " 2", tr.enemy[current_lang] .. " 3", tr.enemy[current_lang] .. " 4", tr.enemy[current_lang] .. " 5" }
menu_options = create_shaped_table({ ['shape'] = { "off", "type", "desc", ['ddl'] = "menu_options_template" }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, tr.item[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, tr.magic[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 2, ['Binary.Size'] = 1 } }, tr.materia[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 3, ['Binary.Size'] = 1 } }, tr.equip[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 4, ['Binary.Size'] = 1 } }, tr.status[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 5, ['Binary.Size'] = 1 } }, tr.order[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 6, ['Binary.Size'] = 1 } }, tr.limit[current_lang] }, { 0, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 7, ['Binary.Size'] = 1 } }, tr.config[current_lang] }, { 1, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 0, ['Binary.Size'] = 1 } }, tr.phs[current_lang] }, { 1, { ['type'] = 9, ['options'] = { ['Binary.Startbit'] = 1, ['Binary.Size'] = 1 } }, tr.save[current_lang] } })
end;
register_custom_types()
function frequent_world_battles(e3)
local e4 = createTimer(nil, false)
debugPrint(5, "Set", nil, "frequent_world_battles")
e4.OnTimer = function()
local e5 = base_mem + cfg.random_battles_world_enabled;
local e6 = base_mem + cfg.random_battles_world_safe_distance;
local e7 = base_mem + cfg.random_battles_world_loop_count;
debugPrint(5, "Activated", nil, "frequent_world_battles")
debugPrint(8, "World random encounters enabled : " .. nb(e5), nil, "frequent_world_battles")
debugPrint(8, "World random encounters safe distance : " .. nb(e6), nil, "frequent_world_battles")
debugPrint(8, "World random encounters loop count : " .. nb(e7), nil, "frequent_world_battles")
writeBytes(e5, 1)
writeInteger(e6, 0xF)
writeBytes(e7, 0xFF)
end;
if e3 then
e4.Interval = 100;
e4.Enabled = true
end ;
return e4
end;
function no_world_battles(e3)
NoWorldRandomEncounters = createTimer(nil, false)
no_wb = NoWorldRandomEncounters;
no_wb.OnTimer = function()
local e5 = base_mem + cfg.random_battles_world_enabled;
writeBytes(e5, 0)
end;
if e3 then
no_wb.Interval = 100;
no_wb.Enabled = true
end ;
return no_wb
end;
function frequent_field_battles(e3)
local e8 = createTimer(nil, false)
local e9 = e8;
e9.OnTimer = function() writeSmallInteger(base_mem + cfg.random_battles_field, 0xFEE0) end;
if e3 then
e9.Interval = 100;
e9.Enabled = true
end ;
return e9
end;
function no_field_battles(e3)
NoFieldRandomEncounters = createTimer(nil, false)
no_fb = NoFieldRandomEncounters;
no_fb.OnTimer = function() writeSmallInteger(base_mem + cfg.random_battles_field, 0x0) end;
if e3 then
no_fb.Interval = 20;
no_fb.Enabled = true
end ;
return no_fb
end;
function fast_limit_breaks(e3)
local aN = { number_of_children = 3, base_address = base_mem + cfg.battle_limit_break_base, base_increment = cfg.battle_limit_break_offset, base_value = 255 }
local ea = lwt(aN)
if e3 then ea.Enabled = true end ;
return ea
end;
function full_atb(e3)
local aN = { number_of_children = 3, base_address = base_mem + cfg.battle_atb_base, base_increment = cfg.battle_atb_offset, base_value = 255 }
local eb = lwt(aN)
if e3 then
eb.Interval = 100;
eb.Enabled = true
end ;
return eb
end;
function all_key_items() writeBytes(base_mem + cfg.key_items,
{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07 }) end;
function battle_hp_current(e3, ec)
local aN = { number_of_children = 3, base_address = base_mem + cfg.battle_stats_base, base_increment = cfg.battle_stats_offset, base_value = ec, type = 1 }
local ed = lazy_write_timer(aN)
if e3 then ed.Enabled = true end ;
return ed
end;
function battle_hp_max(e3, ec)
local aN = { number_of_children = 3, base_address = base_mem + cfg.battle_stats_base + 4, base_increment = cfg.battle_stats_offset, base_value = ec, type = 1 }
local ee = lazy_write_timer(aN)
if e3 then ee.Enabled = true end ;
return ee
end;
function battle_mp_max(e3, ef)
local aN = { number_of_children = 3, base_address = base_mem + cfg.battle_stats_base - 2, base_increment = cfg.battle_stats_offset, base_value = ef, type = 1 }
local eg = lazy_write_timer(aN)
if e3 then eg.Enabled = true end ;
return eg
end;
function battle_mp_current(e3, ef)
local aN = { number_of_children = 3, base_address = base_mem + cfg.battle_stats_base - 4, base_increment = cfg.battle_stats_offset, base_value = ef, type = 1 }
local eh = lazy_write_timer(aN)
if e3 then eh.Enabled = true end ;
return eh
end;
function infinite_items(e3, ei)
local ej = ei or 99;
local ek = ej * 2;
local el = { 0x00, ek, 0x01, ek, 0x02, ek, 0x03, ek, 0x04, ek, 0x05, ek, 0x06, ek, 0x07, ek, 0x08, ek, 0x09, ek, 0x0A, ek, 0x0B, ek, 0x0C, ek, 0x0D, ek, 0x0E, ek, 0x0F, ek, 0x10, ek, 0x11, ek, 0x12, ek, 0x13, ek, 0x14, ek, 0x15, ek, 0x16, ek, 0x17, ek, 0x18, ek, 0x19, ek, 0x1A, ek, 0x1B, ek, 0x1C, ek, 0x1D, ek, 0x1E, ek, 0x1F, ek, 0x20, ek, 0x21, ek, 0x22, ek, 0x23, ek, 0x24, ek, 0x25, ek, 0x26, ek, 0x27, ek, 0x28, ek, 0x29, ek, 0x2A, ek, 0x2B, ek, 0x2C, ek, 0x2D, ek, 0x2E, ek, 0x2F, ek, 0x30, ek, 0x31, ek, 0x32, ek, 0x33, ek, 0x34, ek, 0x35, ek, 0x36, ek, 0x37, ek, 0x38, ek, 0x39, ek, 0x3A, ek, 0x3B, ek, 0x3C, ek, 0x3D, ek, 0x3E, ek, 0x3F, ek, 0x40, ek, 0x41, ek, 0x42, ek, 0x43, ek, 0x44, ek, 0x45, ek, 0x46, ek, 0x47, ek, 0x48, ek, 0x49, ek, 0x4A, ek, 0x4B, ek, 0x4C, ek, 0x4D, ek, 0x4E, ek, 0x4F, ek, 0x50, ek, 0x51, ek, 0x52, ek, 0x53, ek, 0x54, ek, 0x55, ek, 0x56, ek, 0x57, ek, 0x58, ek, 0x59, ek, 0x5A, ek, 0x5B, ek, 0x5C, ek, 0x5D, ek, 0x5E, ek, 0x5F, ek, 0x60, ek, 0x61, ek, 0x62, ek, 0x63, ek, 0x64, ek, 0x65, ek, 0x66, ek, 0x67, ek, 0x68, ek, 0x00, ek + 1, 0x01, ek + 1, 0x02, ek + 1, 0x03, ek + 1, 0x04, ek + 1, 0x05, ek + 1, 0x06, ek + 1, 0x07, ek + 1, 0x08, ek + 1, 0x09, ek + 1, 0x0A, ek + 1, 0x0B, ek + 1, 0x0C, ek + 1, 0x0D, ek + 1, 0x0E, ek + 1, 0x0F, ek + 1, 0x10, ek + 1, 0x11, ek + 1, 0x12, ek + 1, 0x13, ek + 1, 0x14, ek + 1, 0x15, ek + 1, 0x16, ek + 1, 0x17, ek + 1, 0x18, ek + 1, 0x19, ek + 1, 0x1A, ek + 1, 0x1B, ek + 1, 0x1C, ek + 1, 0x1D, ek + 1, 0x1E, ek + 1, 0x1F, ek + 1, 0x20, ek + 1, 0x21, ek + 1, 0x22, ek + 1, 0x23, ek + 1, 0x24, ek + 1, 0x25, ek + 1, 0x26, ek + 1, 0x27, ek + 1, 0x28, ek + 1, 0x29, ek + 1, 0x2A, ek + 1, 0x2B, ek + 1, 0x2C, ek + 1, 0x2D, ek + 1, 0x2E, ek + 1, 0x2F, ek + 1, 0x30, ek + 1, 0x31, ek + 1, 0x32, ek + 1, 0x33, ek + 1, 0x34, ek + 1, 0x35, ek + 1, 0x36, ek + 1, 0x37, ek + 1, 0x38, ek + 1, 0x39, ek + 1, 0x3A, ek + 1, 0x3B, ek + 1, 0x3C, ek + 1, 0x3D, ek + 1, 0x3E, ek + 1, 0x3F, ek + 1, 0x80, ek, 0x81, ek, 0x82, ek, 0x83, ek, 0x84, ek, 0x85, ek, 0x86, ek, 0x87, ek, 0x88, ek, 0x89, ek, 0x8A, ek, 0x8B, ek, 0x8C, ek, 0x8D, ek, 0x8E, ek, 0x8F, ek, 0x90, ek, 0x91, ek, 0x92, ek, 0x93, ek, 0x94, ek, 0x95, ek, 0x96, ek, 0x97, ek, 0x98, ek, 0x99, ek, 0x9A, ek, 0x9B, ek, 0x9C, ek, 0x9D, ek, 0x9E, ek, 0x9F, ek, 0xA0, ek, 0xA1, ek, 0xA2, ek, 0xA3, ek, 0xA4, ek, 0xA5, ek, 0xA6, ek, 0xA7, ek, 0xA8, ek, 0xA9, ek, 0xAA, ek, 0xAB, ek, 0xAC, ek, 0xAD, ek, 0xAE, ek, 0xAF, ek, 0xB0, ek, 0xB1, ek, 0xB2, ek, 0xB3, ek, 0xB4, ek, 0xB5, ek, 0xB6, ek, 0xB7, ek, 0xB8, ek, 0xB9, ek, 0xBA, ek, 0xBB, ek, 0xBC, ek, 0xBD, ek, 0xBE, ek, 0xBF, ek, 0xC0, ek, 0xC1, ek, 0xC2, ek, 0xC3, ek, 0xC4, ek, 0xC5, ek, 0xC6, ek, 0xC7, ek, 0xC8, ek, 0xC9, ek, 0xCA, ek, 0xCB, ek, 0xCC, ek, 0xCD, ek, 0xCE, ek, 0xCF, ek, 0xD0, ek, 0xD1, ek, 0xD2, ek, 0xD3, ek, 0xD4, ek, 0xD5, ek, 0xD6, ek, 0xD7, ek, 0xD8, ek, 0xD9, ek, 0xDA, ek, 0xDB, ek, 0xDC, ek, 0xDD, ek, 0xDE, ek, 0xDF, ek, 0xE0, ek, 0xE1, ek, 0xE2, ek, 0xE3, ek, 0xE4, ek, 0xE5, ek, 0xE6, ek, 0xE7, ek, 0xE8, ek, 0xE9, ek, 0xEA, ek, 0xEB, ek, 0xEC, ek, 0xED, ek, 0xEE, ek, 0xEF, ek, 0xF0, ek, 0xF1, ek, 0xF2, ek, 0xF3, ek, 0xF4, ek, 0xF5, ek, 0xF6, ek, 0xF7, ek, 0xF8, ek, 0xF9, ek, 0xFA, ek, 0xFB, ek, 0xFC, ek, 0xFD, ek, 0xFE, ek }
local em = { 0x00, ek, 0x01, ek, 0x02, ek, 0x03, ek, 0x04, ek, 0x05, ek, 0x06, ek, 0x07, ek, 0x08, ek, 0x09, ek, 0x0A, ek, 0x0B, ek, 0x0C, ek, 0x0D, ek, 0x0E, ek, 0x0F, ek, 0x10, ek, 0x11, ek, 0x12, ek, 0x13, ek, 0x14, ek, 0x15, ek, 0x16, ek, 0x17, ek, 0x18, ek, 0x19, ek, 0x1A, ek, 0x1B, ek, 0x1C, ek, 0x1D, ek, 0x1E, ek, 0x1F, ek, 0x20, ek, 0x21, ek, 0x22, ek, 0x23, ek, 0x24, ek, 0x25, ek, 0x26, ek, 0x27, ek, 0x28, ek, 0x29, ek, 0x2A, ek, 0x2B, ek, 0x2C, ek, 0x2D, ek, 0x2E, ek, 0x2F, ek, 0x30, ek, 0x31, ek, 0x32, ek, 0x33, ek, 0x34, ek, 0x35, ek, 0x36, ek, 0x37, ek, 0x38, ek, 0x39, ek, 0x3A, ek, 0x3B, ek, 0x3C, ek, 0x3D, ek, 0x3E, ek, 0x3F, ek, 0x40, ek, 0x41, ek, 0x42, ek, 0x43, ek, 0x44, ek, 0x45, ek, 0x46, ek, 0x47, ek, 0x48, ek, 0x49, ek, 0x4A, ek, 0x4B, ek, 0x4C, ek, 0x4D, ek, 0x4E, ek, 0x4F, ek, 0x50, ek, 0x51, ek, 0x52, ek, 0x53, ek, 0x54, ek, 0x55, ek, 0x56, ek, 0x57, ek, 0x58, ek, 0x59, ek, 0x5A, ek, 0x5B, ek, 0x5C, ek, 0x5D, ek, 0x5E, ek, 0x5F, ek, 0x60, ek, 0x61, ek, 0x62, ek, 0x63, ek, 0x64, ek, 0x65, ek, 0x66, ek, 0x67, ek, 0x68, ek, 0x80, ek, 0x81, ek, 0x82, ek, 0x83, ek, 0x84, ek, 0x85, ek, 0x86, ek, 0x87, ek, 0x88, ek, 0x89, ek, 0x8A, ek, 0x8B, ek, 0x8C, ek, 0x8D, ek, 0x8E, ek, 0x8F, ek, 0x90, ek, 0x91, ek, 0x92, ek, 0x93, ek, 0x94, ek, 0x95, ek, 0x96, ek, 0x97, ek, 0x98, ek, 0x99, ek, 0x9A, ek, 0x9B, ek, 0x9C, ek, 0x9D, ek, 0x9E, ek, 0x9F, ek, 0xA0, ek, 0xA1, ek, 0xA2, ek, 0xA3, ek, 0xA4, ek, 0xA5, ek, 0xA6, ek, 0xA7, ek, 0xA8, ek, 0xA9, ek, 0xAA, ek, 0xAB, ek, 0xAC, ek, 0xAD, ek, 0xAE, ek, 0xAF, ek, 0xB0, ek, 0xB1, ek, 0xB2, ek, 0xB3, ek, 0xB4, ek, 0xB5, ek, 0xB6, ek, 0xB7, ek, 0xB8, ek, 0xB9, ek, 0xBA, ek, 0xBB, ek, 0xBC, ek, 0xBD, ek, 0xBE, ek, 0xBF, ek, 0xC0, ek, 0xC1, ek, 0xC2, ek, 0xC3, ek, 0xC4, ek, 0xC5, ek, 0xC6, ek, 0xC7, ek, 0xC8, ek, 0xC9, ek, 0xCA, ek, 0xCB, ek, 0xCC, ek, 0xCD, ek, 0xCE, ek, 0xCF, ek, 0xD0, ek, 0xD1, ek, 0xD2, ek, 0xD3, ek, 0xD4, ek, 0xD5, ek, 0xD6, ek, 0xD7, ek, 0xD8, ek, 0xD9, ek, 0xDA, ek, 0xDB, ek, 0xDC, ek, 0xDD, ek, 0xDE, ek, 0xDF, ek, 0xE0, ek, 0xE1, ek, 0xE2, ek, 0xE3, ek, 0xE4, ek, 0xE5, ek, 0xE6, ek, 0xE7, ek, 0xE8, ek, 0xE9, ek, 0xEA, ek, 0xEB, ek, 0xEC, ek, 0xED, ek, 0xEE, ek, 0xEF, ek, 0xF0, ek, 0xF1, ek, 0xF2, ek, 0xF3, ek, 0xF4, ek, 0xF5, ek, 0xF6, ek, 0xF7, ek, 0xF8, ek, 0xF9, ek, 0xFA, ek, 0xFB, ek, 0xFC, ek, 0xFD, ek, 0xFE, ek, 0x00, ek + 1, 0x01, ek + 1, 0x02, ek + 1, 0x03, ek + 1, 0x04, ek + 1, 0x05, ek + 1, 0x06, ek + 1, 0x07, ek + 1, 0x08, ek + 1, 0x09, ek + 1, 0x0A, ek + 1, 0x0B, ek + 1, 0x0C, ek + 1, 0x0D, ek + 1, 0x0E, ek + 1, 0x0F, ek + 1, 0x10, ek + 1, 0x11, ek + 1, 0x12, ek + 1, 0x13, ek + 1, 0x14, ek + 1, 0x15, ek + 1, 0x16, ek + 1, 0x17, ek + 1, 0x18, ek + 1, 0x19, ek + 1, 0x1A, ek + 1, 0x1B, ek + 1, 0x1C, ek + 1, 0x1D, ek + 1, 0x1E, ek + 1, 0x1F, ek + 1, 0x20, ek + 1, 0x21, ek + 1, 0x22, ek + 1, 0x23, ek + 1, 0x24, ek + 1, 0x25, ek + 1, 0x26, ek + 1, 0x27, ek + 1, 0x28, ek + 1, 0x29, ek + 1, 0x2A, ek + 1, 0x2B, ek + 1, 0x2C, ek + 1, 0x2D, ek + 1, 0x2E, ek + 1, 0x2F, ek + 1, 0x30, ek + 1, 0x31, ek + 1, 0x32, ek + 1, 0x33, ek + 1, 0x34, ek + 1, 0x35, ek + 1, 0x36, ek + 1, 0x37, ek + 1, 0x38, ek + 1, 0x39, ek + 1, 0x3A, ek + 1, 0x3B, ek + 1, 0x3C, ek + 1, 0x3D, ek + 1, 0x3E, ek + 1, 0x3F, ek + 1 }
MaxQuantityAllItems = createTimer(nil, false)
mqai = MaxQuantityAllItems;
mqai.OnTimer = function() writeBytes(base_mem + cfg.menu_items_base, em) end;
mqai.Interval = 100;
if e3 then mqai.Enabled = true end ;
return mqai
end;
function prompt_theme()
local en = ""
for q = 1, #rgb_themes do en = en .. "\n" .. q .. "\t" .. rgb_themes[q].title .. " by " .. rgb_themes[q].author end ;
local am = inputQuery("Choose theme number",
"Enter the corresponding number of your desired theme from the list below" .. en, "1")
if type(tonumber(am)) == "number" then theme_setter(tonumber(am)) else end
end;
function theme_setter(eo)
local ep = #rgb_themes;
current_theme = (eo - 1) % ep + 1;
local eq = rgb_themes[current_theme]
if debug_verbosity &gt;= 1 then
debugPrint(1, "Applying theme #" .. current_theme)
recursive_print(eq)
end ;
local er = { eq.tl.r, eq.tl.g, eq.tl.b }
local tr = { eq.tr.r, eq.tr.g, eq.tr.b }
local es = { eq.bl.r, eq.bl.g, eq.bl.b }
local et = { eq.br.r, eq.br.g, eq.br.b }
write_rgb(er, tr, es, et)
end;
function write_rgb(eu, ev, ew, ex)
if eu == "__test__" then
local ey = { { 0, 10, 20 }, { 80, 90, 100 }, { 160, 170, 180 }, { 240, 250, 255 } }
print("Running test version of write_rgb() with following table")
recursive_print(ey)
write_rgb(table.unpack(ey))
return
end ;
local ez = { ['tl'] = { base_mem + cfg.menu_rgb + cfg.menu_rgb_offset * 0, eu }, ['tr'] = { base_mem + cfg.menu_rgb + cfg.menu_rgb_offset * 1, ev }, ['bl'] = { base_mem + cfg.menu_rgb + cfg.menu_rgb_offset * 2, ew }, ['br'] = { base_mem + cfg.menu_rgb + cfg.menu_rgb_offset * 3, ex } }
for C, D in pairs(ez) do
local dD = D[1]
local val = D[2]
debugPrint(3, "Writing RGB (" .. string.pstring(val) .. ") to " .. nb(dD))
writeBytes(dD, val)
end
end;
rgb_themes = { { ["title"] = "Default Menu", ["author"] = "unknown", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 176 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 80 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 128 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 32 } }, { ["title"] = "Aeris' Flowers", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 0 }, ["bl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 }, ["tr"] = { ["r"] = 255, ["g"] = 276, ["b"] = 88 }, ["br"] = { ["r"] = 255, ["g"] = 176, ["b"] = 0 } }, { ["title"] = "Aqualung", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 0, ["g"] = 50, ["b"] = 175 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 255 }, ["tr"] = { ["r"] = 0, ["g"] = 200, ["b"] = 255 }, ["br"] = { ["r"] = 0, ["g"] = 50, ["b"] = 175 } }, { ["title"] = "Auron's Robe", ["author"] = "des kr", ["tl"] = { ["r"] = 120, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 80, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 150, ["g"] = 150, ["b"] = 0 } }, { ["title"] = "Aurora Borealis", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 81, ["g"] = 0, ["b"] = 255 }, ["tr"] = { ["r"] = 255, ["g"] = 111, ["b"] = 111 }, ["br"] = { ["r"] = 173, ["g"] = 197, ["b"] = 0 } }, { ["title"] = "Beam of Darkness", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 27, ["g"] = 135, ["b"] = 30 }, ["bl"] = { ["r"] = 0, ["g"] = 33, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 33, ["b"] = 0 }, ["br"] = { ["r"] = 27, ["g"] = 135, ["b"] = 30 } }, { ["title"] = "Black Waltz", ["author"] = "des kr", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 60 }, ["tr"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Blue Moon", ["author"] = "shawNe0", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 000 }, ["bl"] = { ["r"] = 49, ["g"] = 67, ["b"] = 115 }, ["tr"] = { ["r"] = 36, ["g"] = 88, ["b"] = 255 }, ["br"] = { ["r"] = 68, ["g"] = 255, ["b"] = 255 } }, { ["title"] = "Catastrophe", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 35, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 36, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 95, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 1, ["g"] = 0, ["b"] = 32 } }, { ["title"] = "Chocobo Plains", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 100, ["g"] = 106, ["b"] = 0 }, ["bl"] = { ["r"] = 50, ["g"] = 57, ["b"] = 0 }, ["tr"] = { ["r"] = 50, ["g"] = 64, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Clash of the Elements", ["author"] = "Shadow Flare", ["tl"] = { ["r"] = 105, ["g"] = 12, ["b"] = 37 }, ["bl"] = { ["r"] = 35, ["g"] = 35, ["b"] = 35 }, ["tr"] = { ["r"] = 45, ["g"] = 45, ["b"] = 45 }, ["br"] = { ["r"] = 37, ["g"] = 12, ["b"] = 105 } }, { ["title"] = "Cosmo Candle", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 175, ["g"] = 50, ["b"] = 0 }, ["bl"] = { ["r"] = 255, ["g"] = 200, ["b"] = 0 }, ["tr"] = { ["r"] = 50, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 120, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Dark Light", ["author"] = "Majin Legacy", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 128, ["g"] = 128, ["b"] = 128 } }, { ["title"] = "Dark Side of the Moon", ["author"] = "des kr", ["tl"] = { ["r"] = 122, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 150, ["g"] = 150, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 62 } }, { ["title"] = "Earth Colors", ["author"] = "deathguise950", ["tl"] = { ["r"] = 0, ["g"] = 120, ["b"] = 255 }, ["bl"] = { ["r"] = 90, ["g"] = 60, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 130, ["b"] = 0 }, ["br"] = { ["r"] = 90, ["g"] = 60, ["b"] = 0 } }, { ["title"] = "Egokiller801's Preset", ["author"] = "Egokiller801", ["tl"] = { ["r"] = 0, ["g"] = 166, ["b"] = 166 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 88, ["g"] = 0, ["b"] = 112 }, ["br"] = { ["r"] = 255, ["g"] = 137, ["b"] = 043 } }, { ["title"] = "Eternal Rainbow", ["author"] = "The Yellow Mage", ["tl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 0 }, ["tr"] = { ["r"] = 255, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 255 }, ["br"] = { ["r"] = 0, ["g"] = 255, ["b"] = 0 } }, { ["title"] = "Final Fantasy X", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 105, ["g"] = 189, ["b"] = 235 }, ["bl"] = { ["r"] = 105, ["g"] = 189, ["b"] = 235 }, ["tr"] = { ["r"] = 205, ["g"] = 205, ["b"] = 122 }, ["br"] = { ["r"] = 236, ["g"] = 179, ["b"] = 255 } }, { ["title"] = "From the Abyss", ["author"] = "Shadow Flare", ["tl"] = { ["r"] = 95, ["g"] = 0, ["b"] = 140 }, ["bl"] = { ["r"] = 16, ["g"] = 28, ["b"] = 16 }, ["tr"] = { ["r"] = 20, ["g"] = 35, ["b"] = 20 }, ["br"] = { ["r"] = 76, ["g"] = 0, ["b"] = 10 } }, { ["title"] = "Golden Ray", ["author"] = "sonicboom52591", ["tl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 }, ["bl"] = { ["r"] = 85, ["g"] = 84, ["b"] = 0 }, ["tr"] = { ["r"] = 85, ["g"] = 84, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Holy Unleashed", ["author"] = "BlackDoom", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 }, ["tr"] = { ["r"] = 125, ["g"] = 100, ["b"] = 30 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Icy Fields", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 }, ["bl"] = { ["r"] = 0, ["g"] = 88, ["b"] = 129 }, ["tr"] = { ["r"] = 0, ["g"] = 88, ["b"] = 176 }, ["br"] = { ["r"] = 0, ["g"] = 255, ["b"] = 255 } }, { ["title"] = "Lifestream Rainbow", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 255, ["g"] = 255, ["b"] = 175 }, ["bl"] = { ["r"] = 0, ["g"] = 200, ["b"] = 255 }, ["tr"] = { ["r"] = 50, ["g"] = 100, ["b"] = 128 }, ["br"] = { ["r"] = 255, ["g"] = 175, ["b"] = 255 } }, { ["title"] = "Light of Darkness", ["author"] = "Final_Valkyrie", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 100, ["g"] = 100, ["b"] = 100 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "HH_King's Preset", ["author"] = "HH_King", ["tl"] = { ["r"] = 45, ["g"] = 44, ["b"] = 27 }, ["tr"] = { ["r"] = 58, ["g"] = 44, ["b"] = 57 }, ["bl"] = { ["r"] = 89, ["g"] = 44, ["b"] = 57 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Midgar Lights", ["author"] = "Cloudii_17", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 200, ["b"] = 0 }, ["tr"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "The Newspaper", ["author"] = "xoxJayoxo", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 45, ["g"] = 45, ["b"] = 45 }, ["br"] = { ["r"] = 150, ["g"] = 150, ["b"] = 150 } }, { ["title"] = "New World Order", ["author"] = "Shadow Flare", ["tl"] = { ["r"] = 0, ["g"] = 100, ["b"] = 100 }, ["bl"] = { ["r"] = 40, ["g"] = 40, ["b"] = 40 }, ["tr"] = { ["r"] = 100, ["g"] = 100, ["b"] = 100 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Night Horizon", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 74 }, ["bl"] = { ["r"] = 15, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 22, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Northern Cave", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 44, ["g"] = 176, ["b"] = 88 }, ["tr"] = { ["r"] = 44, ["g"] = 88, ["b"] = 176 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Once in a Blue Moon", ["author"] = "sonicboom52591", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 51 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 55 } }, { ["title"] = "Pea Soup", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 138, ["g"] = 170, ["b"] = 0 }, ["bl"] = { ["r"] = 81, ["g"] = 112, ["b"] = 0 }, ["tr"] = { ["r"] = 98, ["g"] = 166, ["b"] = 0 }, ["br"] = { ["r"] = 173, ["g"] = 197, ["b"] = 0 } }, { ["title"] = "Purple Haze", ["author"] = "NintendoBoy259", ["tl"] = { ["r"] = 9, ["g"] = 7, ["b"] = 15 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 79, ["g"] = 61, ["b"] = 131 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Purple Hope", ["author"] = "sonicboom52591", ["tl"] = { ["r"] = 92, ["g"] = 0, ["b"] = 122 }, ["bl"] = { ["r"] = 139, ["g"] = 0, ["b"] = 119 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Purple Rays", ["author"] = "Shadow Flare", ["tl"] = { ["r"] = 111, ["g"] = 0, ["b"] = 135 }, ["bl"] = { ["r"] = 0, ["g"] = 40, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 27, ["b"] = 0 }, ["br"] = { ["r"] = 99, ["g"] = 0, ["b"] = 120 } }, { ["title"] = "Sepia Horizon", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 60, ["g"] = 18, ["b"] = 0 }, ["bl"] = { ["r"] = 15, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 22, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Seto's Spirit", ["author"] = "zombieluzz", ["tl"] = { ["r"] = 95, ["g"] = 0, ["b"] = 95 }, ["bl"] = { ["r"] = 80, ["g"] = 40, ["b"] = 20 }, ["tr"] = { ["r"] = 105, ["g"] = 30, ["b"] = 75 }, ["br"] = { ["r"] = 90, ["g"] = 50, ["b"] = 0 } }, { ["title"] = "Silver Edge", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 129, ["g"] = 128, ["b"] = 128 }, ["bl"] = { ["r"] = 1, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 129, ["g"] = 129, ["b"] = 129 } }, { ["title"] = "Silver Landscape", ["author"] = "Legend_Saber", ["tl"] = { ["r"] = 92, ["g"] = 95, ["b"] = 91 }, ["tr"] = { ["r"] = 91, ["g"] = 88, ["b"] = 91 }, ["bl"] = { ["r"] = 80, ["g"] = 80, ["b"] = 80 }, ["br"] = { ["r"] = 31, ["g"] = 32, ["b"] = 32 } }, { ["title"] = "Simple &amp; Elegant", ["author"] = "Tyrant_Wave", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 233, ["g"] = 233, ["b"] = 233 }, ["br"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Sprite", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 115, ["g"] = 115, ["b"] = 190 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 190 }, ["bl"] = { ["r"] = 0, ["g"] = 187, ["b"] = 0 }, ["br"] = { ["r"] = 115, ["g"] = 187, ["b"] = 115 } }, { ["title"] = "Starlight Ray", ["author"] = "Sephiru", ["tl"] = { ["r"] = 000, ["g"] = 000, ["b"] = 000 }, ["bl"] = { ["r"] = 041, ["g"] = 020, ["b"] = 071 }, ["tr"] = { ["r"] = 019, ["g"] = 020, ["b"] = 042 }, ["br"] = { ["r"] = 000, ["g"] = 000, ["b"] = 000 } }, { ["title"] = "Strawberry Banana", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 150, ["g"] = 20, ["b"] = 20 }, ["bl"] = { ["r"] = 150, ["g"] = 20, ["b"] = 20 }, ["tr"] = { ["r"] = 255, ["g"] = 150, ["b"] = 150 }, ["br"] = { ["r"] = 255, ["g"] = 255, ["b"] = 0 } }, { ["title"] = "Sunkist", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 255, ["g"] = 105, ["b"] = 75 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 100 }, ["tr"] = { ["r"] = 0, ["g"] = 144, ["b"] = 118 }, ["br"] = { ["r"] = 255, ["g"] = 105, ["b"] = 75 } }, { ["title"] = "Terracotta", ["author"] = "Kong K Rool", ["tl"] = { ["r"] = 145, ["g"] = 82, ["b"] = 45 }, ["bl"] = { ["r"] = 189, ["g"] = 60, ["b"] = 39 }, ["tr"] = { ["r"] = 214, ["g"] = 142, ["b"] = 95 }, ["br"] = { ["r"] = 155, ["g"] = 86, ["b"] = 70 } }, { ["title"] = "The Planet's Dream", ["author"] = "sonicboom52591", ["tl"] = { ["r"] = 75, ["g"] = 50, ["b"] = 0 }, ["bl"] = { ["r"] = 51, ["g"] = 0, ["b"] = 84 }, ["tr"] = { ["r"] = 151, ["g"] = 38, ["b"] = 255 }, ["br"] = { ["r"] = 201, ["g"] = 32, ["b"] = 6 } }, { ["title"] = "This Guy Are Sick", ["author"] = "Snausages", ["tl"] = { ["r"] = 0, ["g"] = 175, ["b"] = 135 }, ["bl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 75 }, ["tr"] = { ["r"] = 0, ["g"] = 100, ["b"] = 130 }, ["br"] = { ["r"] = 60, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Tiger Stripe", ["author"] = "demotbra", ["tl"] = { ["r"] = 223, ["g"] = 107, ["b"] = 0 }, ["bl"] = { ["r"] = 87, ["g"] = 38, ["b"] = 15 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 255, ["g"] = 94, ["b"] = 75 } }, { ["title"] = "Venusian Sunset", ["author"] = "deathguise950", ["tl"] = { ["r"] = 110, ["g"] = 0, ["b"] = 255 }, ["bl"] = { ["r"] = 100, ["g"] = 0, ["b"] = 110 }, ["tr"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 255, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Vincent's Blood", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 0, ["g"] = 0, ["b"] = 0 }, ["bl"] = { ["r"] = 80, ["g"] = 0, ["b"] = 0 }, ["tr"] = { ["r"] = 75, ["g"] = 0, ["b"] = 0 }, ["br"] = { ["r"] = 200, ["g"] = 0, ["b"] = 0 } }, { ["title"] = "Wutai Sky", ["author"] = "Bijutsu Sensei", ["tl"] = { ["r"] = 0, ["g"] = 50, ["b"] = 175 }, ["bl"] = { ["r"] = 0, ["g"] = 200, ["b"] = 255 }, ["tr"] = { ["r"] = 0, ["g"] = 130, ["b"] = 215 }, ["br"] = { ["r"] = 255, ["g"] = 255, ["b"] = 255 } }, { ["title"] = "Xbox Bios Theme", ["author"] = "jamiedude10", ["tl"] = { ["r"] = 171, ["g"] = 171, ["b"] = 70 }, ["bl"] = { ["r"] = 133, ["g"] = 255, ["b"] = 51 }, ["tr"] = { ["r"] = 0, ["g"] = 93, ["b"] = 57 }, ["br"] = { ["r"] = 0, ["g"] = 175, ["b"] = 57 } } }
table_names = { ['placeholders'] = { ['def]'] = "placeholder_name", ["eng"] = "Placeholder Name", ['fre'] = "Nom_d'espace_réservé", ['ger'] = "Platzhaltername", ['spa'] = "Nombre_del_marcador_de_posición", ['jap'] = "プレースホルダ名" }, { ['def'] = "&lt;accessory_stats_script&gt;", ['eng'] = "Accessory attributes", ['fre'] = "Attributs accessoires", ['ger'] = "Zusatzattribute", ['spa'] = "Atributos accesorios" }, { ['def'] = "&lt;armour_stats_script&gt;", ['eng'] = "Armour attributes", ['fre'] = "Attributs d'armure", ['ger'] = "Rüstungsattribute", ['spa'] = "Atributos de armadura" }, { ['def'] = "&lt;battle_arena_points&gt;", ['eng'] = "Battle points (while in arena)", ['fre'] = "Points de bataille (dans l'arène)", ['ger'] = "Kampfpunkte (in der Arena)", ['spa'] = "Puntos de batalla (en la arena)" }, { ['def'] = "&lt;battle_items_script&gt;", ['eng'] = "In-battle items", ['fre'] = "Articles de combat", ['ger'] = "Kampfgegenstände", ['spa'] = "Objetos de batalla" }, { ['def'] = "&lt;battle_points&gt;", ['eng'] = "Battle points", ['fre'] = "Points de bataille", ['ger'] = "Kampfpunkte", ['spa'] = "Puntos de batalla" }, { ['def'] = "&lt;battle_stats_script&gt;", ['eng'] = "In-battle stats", ['fre'] = "Statistiques de combat", ['ger'] = "Kampfstatistiken", ['spa'] = "Estadísticas de batalla" }, { ['def'] = "&lt;battles_entered&gt;", ['eng'] = "Battles fought", ['fre'] = "Batailles livrées", ['ger'] = "Schlachten kämpften", ['spa'] = "Batallas peleadas" }, { ['def'] = "&lt;battles_fled&gt;", ['eng'] = "Battles escaped", ['fre'] = "Batailles échappées", ['ger'] = "Schlachten entkamen", ['spa'] = "Batallas escapadas" }, { ['def'] = "&lt;cheats_menu&gt;", ['eng'] = "Cheats", ['fre'] = "Cheats", ['ger'] = "Betrügt", ['spa'] = "Guiones de trucos" }, { ['def'] = "&lt;chocobo_stats_script&gt;", ['eng'] = "Chocobo attributes", ['fre'] = "Attributs de chocobo", ['ger'] = "Chocobo-Attribute", ['spa'] = "Atributos de chocobo" }, { ['def'] = "&lt;config_menu_menu&gt;", ['eng'] = "Config menu", ['fre'] = "Menu de configuration", ['ger'] = "Konfigurationsmenü", ['spa'] = "Menú de configuración" }, { ['def'] = "&lt;current_roster_menu&gt;", ['eng'] = "Current roster", ['fre'] = "Liste actuelle", ['ger'] = "Aktueller Dienstplan", ['spa'] = "Lista actual" }, { ['def'] = "&lt;debug_mode_menu&gt;", ['eng'] = "Built-in debug mode", ['fre'] = "Mode de débogage intégré", ['ger'] = "Eingebauter Debug-Modus", ['spa'] = "Modo de depuración incorporado" }, { ['def'] = "&lt;displayed_stats&gt;", ['eng'] = "Displayed stats (not real)", ['fre'] = "Statistiques affichées (non réelles)", ['ger'] = "Angezeigte Statistiken (nicht real)", ['spa'] = "Estadísticas mostradas (no reales)" }, { ['def'] = "&lt;in_battle_cheats&gt;", ['eng'] = "In-battle cheats", ['fre'] = "Cheats en combat", ['ger'] = "Cheats im Kampf", ['spa'] = "Trucos en la batalla" }, { ['def'] = "&lt;inventory_cheats&gt;", ['eng'] = "Inventory cheats", ['fre'] = "Astuces d'inventaire", ['ger'] = "Inventar betrügt", ['spa'] = "Trampas de inventario" }, { ['def'] = "&lt;inventory_menu&gt;", ['eng'] = "Inventory", ['fre'] = "Inventaire", ['ger'] = "Inventar", ['spa'] = "Inventario" }, { ['def'] = "&lt;materia_script&gt;", ['eng'] = "Materia", ['fre'] = "Materia", ['ger'] = "Materia", ['spa'] = "Materia" }, { ['def'] = "&lt;menu_access&gt;", ['eng'] = "Menu options availability", ['fre'] = "Disponibilité des options de menu", ['ger'] = "Menüoptionen Verfügbarkeit", ['spa'] = "Opciones de menú disponibles" }, { ['def'] = "&lt;menu_items_script&gt;", ['eng'] = "Menu items", ['fre'] = "Articles de menu", ['ger'] = "Menüpunkte", ['spa'] = "Elementos de menú" }, { ['def'] = "&lt;misc_cheats&gt;", ['eng'] = "Miscellaneous cheats", ['fre'] = "Diverses astuces", ['ger'] = "Verschiedene Cheats", ['spa'] = "Tramposos varios" }, { ['def'] = "&lt;misc_menu&gt;", ['eng'] = "Miscellaneous", ['fre'] = "Divers", ['ger'] = "Verschiedenes", ['spa'] = "Opciones misceláneas" }, { ['def'] = "&lt;post_battle_menu&gt;", ['eng'] = "Post-battle rewards", ['fre'] = "Récompenses après la bataille", ['ger'] = "Belohnungen nach dem Kampf", ['spa'] = "Récompenses après la bataille" }, { ['def'] = "&lt;random_battle_cheats&gt;", ['eng'] = "Random encounter frequency", ['fre'] = "Fréquence de rencontre aléatoire", ['ger'] = "Zufällige Begegnungsfrequenz", ['spa'] = "Frecuencia de encuentro aleatorio" }, { ['def'] = "&lt;random_battle_menu&gt;", ['eng'] = "Random encounter settings", ['fre'] = "Paramètres de rencontre aléatoires", ['ger'] = "Einstellungen für zufällige Begegnungen", ['spa'] = "Configuración de encuentro aleatorio" }, { ['def'] = "&lt;random_battle_world_map_can_occur&gt;", ['eng'] = "Can random encounters occur?", ['fre'] = "Des rencontres aléatoires peuvent-elles se produire?", ['ger'] = "Können zufällige Begegnungen auftreten?", ['spa'] = "¿Pueden ocurrir encuentros al azar?" }, { ['def'] = "&lt;random_battle_world_map_counter&gt;", ['eng'] = "Random encounter loops counter", ['fre'] = "Compteur de boucles de rencontres aléatoires", ['ger'] = "Zähler für zufällige Begegnungsschleifen", ['spa'] = "Contador de bucles de encuentro aleatorio" }, { ['def'] = "&lt;random_battle_world_map_distance&gt;", ['eng'] = "Distance until encounters can occur", ['fre'] = "Distance jusqu'à la rencontre peut se produire", ['ger'] = "Entfernung, bis Begegnungen auftreten können", ['spa'] = "Distancia hasta que puedan ocurrir encuentros." }, { ['def'] = "&lt;random_battle_world_map_loop&gt;", ['eng'] = "Random encounter looping ticker", ['fre'] = "Rencontre aléatoire boucle ticker", ['ger'] = "Zufälliger Loop-Ticker für Begegnungen", ['spa'] = "Ticker de bucle encuentro aleatorio" }, { ['def'] = "&lt;random_battle_field_map_loop&gt;", ['eng'] = "Random encounter looping ticker", ['fre'] = "Rencontre aléatoire boucle ticker", ['ger'] = "Zufälliger Loop-Ticker für Begegnungen", ['spa'] = "Ticker de bucle encuentro aleatorio" }, { ['def'] = "&lt;real_stats_by_char&gt;", ['eng'] = "Real stats (sorted by character)", ['fre'] = "Statistiques réelles (triées par caractère)", ['ger'] = "Echte Statistiken (sortiert nach Charakter)", ['spa'] = "Estadísticas reales (ordenadas por personaje)" }, { ['def'] = "&lt;real_stats_by_stat&gt;", ['eng'] = "Real stats (sorted by stat)", ['fre'] = "Statistiques réelles (triées par statistiques)", ['ger'] = "Echte Statistiken (sortiert nach Statistik)", ['spa'] = "Estadísticas reales (ordenadas por estadística)" }, { ['def'] = "&lt;save_phs&gt;", ['eng'] = "Save &amp; PHS availability", ['fre'] = "Enregistrer et disponibilité PHS", ['ger'] = "Sparen Sie &amp; PHS Verfügbarkeit", ['spa'] = "Guardar y disponibilidad de PHS" }, { ['def'] = "&lt;set_debug_level&gt;", ['eng'] = "Set debugging level", ['fre'] = "Définir le niveau de débogage", ['ger'] = "Festlegen der Debugstufe", ['spa'] = "Establecer nivel de depuración" }, { ['def'] = "&lt;stats_menu&gt;", ['eng'] = "Statistics", ['fre'] = "Statistiques", ['ger'] = "Statistiken", ['spa'] = "Estadística" }, { ['def'] = "&lt;templates_menu&gt;", ['eng'] = "Templates menu (DO NOT RENAME OR DELETE)", ['fre'] = "Menu Modèles (NE PAS RENOMMER OU SUPPRIMER)", ['ger'] = "Vorlagen-Menü (NICHT UMBENENNEN ODER LÖSCHEN)", ['spa'] = "Menú de plantillas (NO RENOMAR NI BORRAR)" }, { ['def'] = "&lt;testing_menu&gt;", ['eng'] = "For testing", ['fre'] = "Pour tester", ['ger'] = "Zum Prüfen", ['spa'] = "Para las pruebas" }, { ['def'] = "&lt;timers_menu&gt;", ['eng'] = "Timers", ['fre'] = "Minuteries", ['ger'] = "Timer", ['spa'] = "Temporizadores" }, { ['def'] = "&lt;weapon_stats_script&gt;", ['eng'] = "Weapon attributes", ['fre'] = "Attributs d'arme", ['ger'] = "Waffenattribute", ['spa'] = "Atributos del arma" }, { ['def'] = "&lt;debug_mode_1&gt;", ['eng'] = "Current screen", ['fre'] = "Écran actuel", ['ger'] = "Aktueller Bildschirm", ['spa'] = "Pantalla actual" }, { ['def'] = "&lt;debug_mode_2&gt;", ['eng'] = "Debug mode 2", ['fre'] = "Mode débogage 2", ['ger'] = "Debug-Modus 2", ['spa'] = "Modo de depuración 2" }, { ['def'] = "&lt;infinite_items_cheat&gt;", ['eng'] = "Have all menu items with infinite uses", ['fre'] = "Avoir tous les éléments de menu avec des utilisations infinies", ['ger'] = "Haben Sie alle Menüpunkte mit unbegrenzten Verwendungsmöglichkeiten", ['spa'] = "Tener todos los elementos del menú con usos infinitos" }, { ['def'] = "&lt;select_theme_script&gt;", ['eng'] = "Choose colour theme", ['fre'] = "Choisir le thème de couleur", ['ger'] = "Wählen Sie ein Farbschema", ['spa'] = "Elegir tema de color" }, { ['def'] = "&lt;previous_theme_script&gt;", ['eng'] = "Select previous colour theme", ['fre'] = "Sélectionner le thème de couleur précédent", ['ger'] = "Vorheriges Farbschema auswählen", ['spa'] = "Seleccionar tema de color anterior" }, { ['def'] = "&lt;next_theme_script&gt;", ['eng'] = "Select next colour theme", ['fre'] = "Sélectionner le thème de couleur suivant", ['ger'] = "Nächstes Farbthema auswählen", ['spa'] = "Seleccione el siguiente tema de color" }, { ['def'] = "&lt;rgb_theme_menu&gt;", ['eng'] = "Colour theme settings", ['fre'] = "Paramètres de thème de couleur", ['ger'] = "Einstellungen für Farbthemen", ['spa'] = "Ajustes de tema de color" }, { ['def'] = "&lt;all_key_items_cheat&gt;", ['eng'] = "Have all key items", ['fre'] = "Avoir tous les éléments clés", ['ger'] = "Haben Sie alle Schlüsselelemente", ['spa'] = "Tener todos los elementos clave" }, { ['def'] = "&lt;battle_speed&gt;", ['eng'] = "Battle speed", ['fre'] = "Vitesse de bataille", ['ger'] = "Kampfgeschwindigkeit", ['spa'] = "Velocidad de batalla" }, { ['def'] = "&lt;battle_message_speed&gt;", ['eng'] = "Battle message speed", ['fre'] = "Message de bataille vitesse", ['ger'] = "Kampfnachricht Geschwindigkeit", ['spa'] = "Velocidad de mensaje de batalla" }, { ['def'] = "&lt;1_hp_cheat&gt;", ['eng'] = "Rest in peace", ['fre'] = "Repose en paix", ['ger'] = "Ruhe in Frieden", ['spa'] = "Descansa en paz" }, { ['def'] = "&lt;field_message_speed&gt;", ['eng'] = "Field message speed", ['fre'] = "Vitesse du message de terrain", ['ger'] = "Geschwindigkeit der Feldnachricht", ['spa'] = "Mensaje de campo de velocidad" }, { ['def'] = "&lt;menu_rgb&gt;", ['eng'] = "Menu RGB settings", ['fre'] = "Paramètres du menu RVB", ['ger'] = "Menü RGB-Einstellungen", ['spa'] = "Ajustes de menú RGB" }, { ['def'] = "&lt;roster_top_char&gt;", ['eng'] = "Top character", ['fre'] = "Meilleur personnage", ['ger'] = "Top Charakter", ['spa'] = "Personaje superior" }, { ['def'] = "&lt;roster_mid_char&gt;", ['eng'] = "Centre character", ['fre'] = "Personnage central", ['ger'] = "Zentraler Charakter", ['spa'] = "Personaje central" }, { ['def'] = "&lt;roster_bot_char&gt;", ['eng'] = "Bottom character", ['fre'] = "Caractère du bas", ['ger'] = "Unteres Zeichen", ['spa'] = "Carácter inferior" }, { ['def'] = "&lt;menu_options_script&gt;", ['eng'] = "Menu options availability", ['fre'] = "Disponibilité des options de menu", ['ger'] = "Menüoptionen Verfügbarkeit", ['spa'] = "Opciones de menú disponibles." }, { ['def'] = "&lt;compare_versions&gt;", ['eng'] = "Compare versions", ['fre'] = "Comparer les versions", ['ger'] = "Versionen vergleichen", ['spa'] = "Comparar versiones" }, { ['def'] = "&lt;run_all_tests&gt;", ['eng'] = "Run all tests", ['fre'] = "Exécuter tous les tests", ['ger'] = "Führen Sie alle Tests aus", ['spa'] = "Ejecutar todas las pruebas" }, { ['def'] = "&lt;all_materia_cheat&gt;", ['eng'] = "Have every materia mastered", ['fre'] = "Chaque materia maîtrisé", ['ger'] = "Habe jede Materia gemeistert", ['spa'] = "Tener cada materia dominada" }, { ['def'] = "&lt;uber_starting_gear_cheat&gt;", ['eng'] = "Maximum power starting equipment", ['fre'] = "Puissance maximale de l'équipement de démarrage", ['ger'] = "Maximale Startleistung", ['spa'] = "Equipo de arranque de potencia máxima" }, { ['def'] = "&lt;lucky_7_cheat&gt;", ['eng'] = "Lucky 7s Fever", ['fre'] = "Fièvre des 7 chanceux", ['ger'] = "Glückliches Fieber 7s", ['spa'] = "Lucky 7s Fever" }, { ['def'] = "&lt;max_hp_cheat&gt;", ['eng'] = "Maximum HP", ['fre'] = "HP maximum", ['ger'] = "Maximale HP", ['spa'] = "HP máximo" }, { ['def'] = "&lt;max_mp_cheat&gt;", ['eng'] = "Maximum MP", ['fre'] = "MP maximum", ['ger'] = "Maximale MP", ['spa'] = "MP máximo" }, { ['def'] = "&lt;fast_limit_breaks_cheat&gt;", ['eng'] = "Fast limit breaks", ['fre'] = "Limites rapides", ['ger'] = "Schnelle Limitpausen", ['spa'] = "Límites rápidos" }, { ['def'] = "&lt;full_atb_cheat&gt;", ['eng'] = "Full ATB Meter", ['fre'] = "Plein compteur ATB", ['ger'] = "Volles ATB-Messgerät", ['spa'] = "Medidor ATB completo" }, { ['def'] = "&lt;fast_encounters_world&gt;", ['eng'] = "(World) Frequent random encounters", ['fre'] = "(Monde) Rencontres aléatoires fréquentes", ['ger'] = "(Welt) Häufige zufällige Begegnungen", ['spa'] = "(Mundo) Encuentros aleatorios frecuentes" }, { ['def'] = "&lt;fast_encounters_field&gt;", ['eng'] = "(Field) Frequent random encounters", ['fre'] = "(Champ) Rencontres aléatoires fréquentes", ['ger'] = "(Feld) Häufige zufällige Begegnungen", ['spa'] = "(Campo) Encuentros aleatorios frecuentes" }, { ['def'] = "&lt;no_encounters_world&gt;", ['eng'] = "(World) Disable random encounters", ['fre'] = "(Monde) Désactiver les rencontres aléatoires", ['ger'] = "(Welt) Zufällige Begegnungen deaktivieren", ['spa'] = "(Mundo) Desactivar encuentros aleatorios" }, { ['def'] = "&lt;no_encounters_field&gt;", ['eng'] = "(Field) Disable random encounters", ['fre'] = "(Champ) Désactiver les rencontres aléatoires", ['ger'] = "(Feld) Zufällige Begegnungen deaktivieren", ['spa'] = "(Campo) Desactivar encuentros aleatorios" }, { ['def'] = "&lt;save_phs_cheat&gt;", ['eng'] = "Save / PHS anywhere", ['fre'] = "Enregistrer / PHS n'importe où", ['ger'] = "Speichern Sie / PHS überall", ['spa'] = "Guardar / PHS en cualquier lugar" }, { ['def'] = "&lt;debug_room_cheat&gt;", ['eng'] = "Enter debug room (PlayStation only)", ['fre'] = "Entrez dans la salle de débogage (PlayStation uniquement)", ['ger'] = "Debug-Raum betreten (nur PlayStation)", ['spa'] = "Entrar en la sala de depuración (solo PlayStation)" }, { ['def'] = "&lt;speed_hack_cheat&gt;", ['eng'] = "Speed hack", ['fre'] = "Hack de vitesse", ['ger'] = "Speed Hack", ['spa'] = "Truco velocidad" }, { ['def'] = "&lt;auto_config_cheat&gt;", ['eng'] = "Automatically configure menu", ['fre'] = "Configurer automatiquement le menu", ['ger'] = "Menü automatisch konfigurieren", ['spa'] = "Configurar automáticamente el menú" }, { ['def'] = "&lt;random_battle_world_map_menu&gt;", ['eng'] = "(World) Random encounter settings", ['fre'] = "(Monde) Paramètres de rencontre aléatoires", ['ger'] = "(Welt) Einstellungen für zufällige Begegnungen", ['spa'] = "(Mundo) Configuración de encuentro aleatorio" }, { ['def'] = "&lt;random_battle_field_map_menu&gt;", ['eng'] = "(Field) Random encounter settings", ['fre'] = "(Champ) Paramètres de rencontre aléatoires", ['ger'] = "(Feld) Einstellungen für zufällige Begegnungen", ['spa'] = "(Campo) Configuración de encuentro aleatorio" }, { ['def'] = "&lt;random_battle_world_map_can_occur&gt;", ['eng'] = "Can random encounters occur?", ['fre'] = "Des rencontres aléatoires peuvent-elles se produire?", ['ger'] = "Können zufällige Begegnungen auftreten?", ['spa'] = "¿Pueden ocurrir encuentros al azar?" }, { ['def'] = "&lt;random_battle_world_map_distance&gt;", ['eng'] = "Safe distance until encounters can occur", ['fre'] = "Distance de sécurité jusqu'à ce que des rencontres puissent se produire", ['ger'] = "Sicherheitsabstand, bis Begegnungen auftreten können", ['spa'] = "Distancia segura hasta que puedan ocurrir encuentros" }, { ['def'] = "&lt;random_battle_world_map_loop&gt;", ['eng'] = "Looping ticker", ['fre'] = "Ticker en boucle", ['ger'] = "Looping-Ticker", ['spa'] = "Ticker bucle" }, { ['def'] = "&lt;random_battle_world_map_counter&gt;", ['eng'] = "Total ticker loops", ['fre'] = "Nombre total de boucles", ['ger'] = "Gesamtzahl der Ticker-Loops", ['spa'] = "Total de bucles de ticker" }, { ['def'] = "&lt;rgb_array&gt;", ['eng'] = "RGB Array", ['fre'] = "Tableau RVB", ['ger'] = "RGB Array", ['spa'] = "RGB Array" }, { ['def'] = "&lt;rgb_top_left&gt;", ['eng'] = "RGB Top Left", ['fre'] = "RVB en haut à gauche", ['ger'] = "RGB arriba a la izquierda", ['spa'] = "RGB arriba a la izquierda" }, { ['def'] = "&lt;rgb_top_right&gt;", ['eng'] = "RGB Top Right", ['fre'] = "RVB en haut à droite", ['ger'] = "RGB arriba a la derecha", ['spa'] = "RGB arriba a la derecha" }, { ['def'] = "&lt;rgb_bottom_left&gt;", ['eng'] = "RGB Bottom Left", ['fre'] = "RVB en bas à gauche", ['ger'] = "RGB parte inferior izquierda", ['spa'] = "RGB parte inferior izquierda" }, { ['def'] = "&lt;rgb_bottom_right&gt;", ['eng'] = "RGB Bottom Right", ['fre'] = "RVB en bas à droite", ['ger'] = "RGB abajo a la derecha", ['spa'] = "RGB abajo a la derecha" } }
tr = {}
tr.absorb = { ['def'] = "absorb", ['eng'] = "Absorb", ['fre'] = "Absorber", ['spa'] = "Absorber", ['ger'] = "Absorbieren" }
tr.accel = { ['def'] = "accel", ['eng'] = "Acceleration", ['fre'] = "Accélération", ['spa'] = "Aceleración", ['ger'] = "Beschleunigung" }
tr.added_elem = { ['def'] = "added_elem", ['eng'] = "Added Elemental Effect", ['fre'] = "Effet élémentaire ajouté", ['spa'] = "Efecto Elemental Añadido", ['ger'] = "Elementareffekt hinzugefügt" }
tr.added_status = { ['def'] = "added_status", ['eng'] = "Added Status Effect", ['fre'] = "Effet de statut ajouté", ['spa'] = "Efecto de estado agregado", ['ger'] = "Status Effekt hinzugefügt" }
tr.atb = { ['def'] = "atb", ['eng'] = "ATB", ['fre'] = "ATB", ['spa'] = "ATB", ['ger'] = "ATB" }
tr.atk = { ['def'] = "atk", ['eng'] = "Attack", ['fre'] = "Attaque", ['spa'] = "Ataque", ['ger'] = "Attacke" }
tr.barrier = { ['def'] = "barrier", ['eng'] = "Barrier", ['fre'] = "Barrière", ['spa'] = "Barrera", ['ger'] = "Barriere" }
tr.base_dex = { ['def'] = "base_dex", ['eng'] = "Base Dexterity", ['fre'] = "Dextérité", ['spa'] = "Destreza Base", ['ger'] = "Geschick" }
tr.base_luc = { ['def'] = "base_luc", ['eng'] = "Base Luck", ['fre'] = "Chance", ['spa'] = "Suerte Base", ['ger'] = "Glück" }
tr.base_mag = { ['def'] = "base_mag", ['eng'] = "Base Magic", ['fre'] = "Magie", ['spa'] = "Magia Base", ['ger'] = "Zauber" }
tr.base_spi = { ['def'] = "base_spi", ['eng'] = "Base Spirit", ['fre'] = "Esprit", ['spa'] = "Espíritu Base", ['ger'] = "Gemüt" }
tr.base_str = { ['def'] = "base_str", ['eng'] = "Base Strength", ['fre'] = "Force", ['spa'] = "Fuerza Base", ['ger'] = "Stärke" }
tr.base_vit = { ['def'] = "base_vit", ['eng'] = "Base Vitality", ['fre'] = "Vitalité", ['spa'] = "Vitalidad Base", ['ger'] = "Vitalität" }
tr.berserk = { ['def'] = "berserk", ['eng'] = "Berserk", ['fre'] = "Fou furieux", ['spa'] = "Enloquecido", ['ger'] = "Berserker" }
tr.black = { ['def'] = "black", ['eng'] = "Black", ['fre'] = "Noir", ['spa'] = "Negro", ['ger'] = "Schwarz" }
tr.blue = { ['def'] = "blue", ['eng'] = "Blue", ['fre'] = "Bleu", ['spa'] = "Azul", ['ger'] = "Blau" }
tr.bonus_stat_type = { ['def'] = "bonus_stat_type", ['eng'] = "Bonus stat type", ['fre'] = "Type de bonus", ['spa'] = "Tipo de bonificación", ['ger'] = "Bonusstatistiktyp" }
tr.bonus_stat_val = { ['def'] = "bonus_stat_val", ['eng'] = "Bonus stat value", ['fre'] = "Valeur statistique du bonus", ['spa'] = "Valor estadístico de bonificación", ['ger'] = "Bonusstatistikwert" }
tr.bot_char = { ['def'] = "bot_char", ['eng'] = "Bottom character", ['fre'] = "Caractère du bas", ['spa'] = "Carácter inferior", ['ger'] = "Unteres Zeichen" }
tr.coop = { ['def'] = "coop", ['eng'] = "Cooperation", ['fre'] = "La coopération", ['spa'] = "Cooperación", ['ger'] = "Zusammenarbeit" }
tr.cur_acc = { ['def'] = "cur_acc", ['eng'] = "Equipped Accessory", ['fre'] = "Accessoire équipé", ['spa'] = "Accesorio Equipado", ['ger'] = "Ausgestattetes Zubehör" }
tr.cur_armour = { ['def'] = "cur_armour", ['eng'] = "Equipped Armour", ['fre'] = "Armure Équipée", ['spa'] = "Armadura equipada", ['ger'] = "Ausgestattete Rüstung" }
tr.cur_dash = { ['def'] = "cur_dash", ['eng'] = "Current Dash", ['fre'] = "Tableau de bord actuel", ['spa'] = "Dash actual", ['ger'] = "Aktueller Dash" }
tr.cur_exp = { ['def'] = "cur_exp", ['eng'] = "Current EXP", ['fre'] = "EXP actuel", ['spa'] = "EXP actual", ['ger'] = "Aktuelle EXP" }
tr.cur_hp = { ['def'] = "cur_hp", ['eng'] = "Current HP", ['fre'] = "HP actuel", ['spa'] = "HP actual", ['ger'] = "Aktuelle HP" }
tr.cur_lb_level = { ['def'] = "cur_lb_level", ['eng'] = "Selected Limit Level", ['fre'] = "Niveau limite sélectionné", ['spa'] = "Nivel límite seleccionado", ['ger'] = "Ausgewählter Grenzwert" }
tr.cur_level = { ['def'] = "cur_level", ['eng'] = "Current Level", ['fre'] = "Niveau actuel", ['spa'] = "Nivel actual", ['ger'] = "Aktuelles Level" }
tr.cur_mp = { ['def'] = "cur_mp", ['eng'] = "Current MP", ['fre'] = "MP actuel", ['spa'] = "MP actual", ['ger'] = "Aktuelle MP" }
tr.cur_run = { ['def'] = "cur_run", ['eng'] = "Current Run", ['fre'] = "Course en cours", ['spa'] = "Corriente actual", ['ger'] = "Aktueller Lauf" }
tr.cur_weapon = { ['def'] = "cur_weapon", ['eng'] = "Equipped Weapon", ['fre'] = "Arme équipée", ['spa'] = "Arma equipada", ['ger'] = "Ausgestattete Waffe" }
tr.def = { ['def'] = "def", ['eng'] = "Defense", ['fre'] = "Défense", ['spa'] = "Defensa", ['ger'] = "Verteidigung" }
tr.dex = { ['def'] = "dex", ['eng'] = "Dexterity", ['fre'] = "Dextérité", ['spa'] = "Destreza", ['ger'] = "Geschicklichkeit" }
tr.doom = { ['def'] = "doom", ['eng'] = "Doom", ['fre'] = "Condamner", ['spa'] = "Condenar", ['ger'] = "Untergang" }
tr.double = { ['def'] = "double", ['eng'] = "Double", ['fre'] = "Double", ['spa'] = "Doble", ['ger'] = "Doppelt" }
tr.elem_def = { ['def'] = "elem_def", ['eng'] = "Defend against element", ['fre'] = "Défendre contre l'élément", ['spa'] = "Defender contra elemento", ['ger'] = "Verteidige dich gegen das Element" }
tr.empty = { ['def'] = "empty", ['eng'] = "Empty", ['fre'] = "Vide", ['spa'] = "Vacía", ['ger'] = "Leeren" }
tr.enemy = { ['def'] = "enemy", ['eng'] = "Enemy", ['fre'] = "Ennemi", ['spa'] = "Enemigo", ['ger'] = "Feind" }
tr.equip_char = { ['def'] = "equip_char", ['eng'] = "Can be equipped by character", ['fre'] = "Peut être équipé par personnage", ['spa'] = "Puede ser equipado por personaje", ['ger'] = "Kann von Charakter ausgestattet werden" }
tr.everyone = { ['def'] = "everyone", ['eng'] = "Everyone", ['fre'] = "Toutes les personnes", ['spa'] = "Todo el mundo", ['ger'] = "Jeder" }
tr.exp_to_level = { ['def'] = "exp_to_level", ['eng'] = "EXP to next level", ['fre'] = "EXP au niveau suivant", ['spa'] = "EXP al siguiente nivel", ['ger'] = "EXP zum nächsten Level" }
tr.extra_dex = { ['def'] = "extra_dex", ['eng'] = "Extra Dexterity", ['fre'] = "Dextérité Extra", ['spa'] = "Destreza Extra", ['ger'] = "Extra Geschick" }
tr.extra_luc = { ['def'] = "extra_luc", ['eng'] = "Extra Luck", ['fre'] = "Chance supplémentaire", ['spa'] = "Suerte Extra", ['ger'] = "Extra Glück" }
tr.extra_mag = { ['def'] = "extra_mag", ['eng'] = "Extra Magic", ['fre'] = "Magie supplémentaire", ['spa'] = "Magia Extra", ['ger'] = "Extra Zauber" }
tr.extra_spi = { ['def'] = "extra_spi", ['eng'] = "Extra Spirit", ['fre'] = "Extra Spirit", ['spa'] = "Espíritu Extra", ['ger'] = "Extra Gemüt" }
tr.extra_str = { ['def'] = "extra_str", ['eng'] = "Extra Strength", ['fre'] = "Force additionnelle", ['spa'] = "Fuerza Extra", ['ger'] = "Extra Stärke" }
tr.extra_vit = { ['def'] = "extra_vit", ['eng'] = "Extra Vitality", ['fre'] = "Vitalité supplémentaire", ['spa'] = "Vitalidad Extra", ['ger'] = "Extra Vitalität" }
tr.female = { ['def'] = "female", ['eng'] = "Female", ['fre'] = "Femelle", ['spa'] = "Hembra", ['ger'] = "Weiblich" }
tr.full = { ['def'] = "full", ['eng'] = "Full", ['fre'] = "Pleine", ['spa'] = "Completa", ['ger'] = "Voll" }
tr.fury = { ['def'] = "fury", ['eng'] = "Fury", ['fre'] = "Fureur", ['spa'] = "Furia", ['ger'] = "Zorn" }
tr.gold = { ['def'] = "gold", ['eng'] = "Gold", ['fre'] = "Or", ['spa'] = "Oro", ['ger'] = "Gold" }
tr.green = { ['def'] = "green", ['eng'] = "Green", ['fre'] = "vert", ['spa'] = "Verde", ['ger'] = "Grün" }
tr.halve = { ['def'] = "halve", ['eng'] = "Halve", ['fre'] = "Réduire de moitié", ['spa'] = "Reducir en la mitad", ['ger'] = "Halbieren" }
tr.haste = { ['def'] = "haste", ['eng'] = "Haste", ['fre'] = "Hâte", ['spa'] = "Prisa", ['ger'] = "Hast" }
tr.intel = { ['def'] = "intel", ['eng'] = "Intelligence", ['fre'] = "Intelligence", ['spa'] = "Inteligencia", ['ger'] = "Intelligenz" }
tr.invalid = { ['def'] = "invalid", ['eng'] = "Invalid", ['fre'] = "Invalide", ['spa'] = "Inválido", ['ger'] = "Ungültig" }
tr.lb = { ['def'] = "lb", ['eng'] = "Limit break availability", ['fre'] = "Limiter la disponibilité des pauses", ['spa'] = "Limitar la disponibilidad de descanso", ['ger'] = "Beschränken Sie die Verfügbarkeit von Pausen" }
tr.lb_1_used = { ['def'] = "lb_1_used", ['eng'] = "Times limit break level 1 used", ['fre'] = "Temps limite de pause niveau 1 utilisé", ['spa'] = "Tiempos límite de interrupción nivel 1 utilizado", ['ger'] = "Zeitlimit für Pausenstufe 1 verwendet" }
tr.lb_2_used = { ['def'] = "lb_2_used", ['eng'] = "Times limit break level 2 used", ['fre'] = "Temps limite pause 2 utilisé", ['spa'] = "Tiempos límite de ruptura nivel 2 utilizado", ['ger'] = "Zeitlimit Pause Level 2 verwendet" }
tr.lb_3_used = { ['def'] = "lb_3_used", ['eng'] = "Times limit break level 3 used", ['fre'] = "Temps limite de pause niveau 3 utilisé", ['spa'] = "Tiempos límite de ruptura nivel 3 utilizado", ['ger'] = "Zeitlimit Pause Level 3 verwendet" }
tr.luc = { ['def'] = "luc", ['eng'] = "Luck", ['fre'] = "Chance", ['spa'] = "Suerte", ['ger'] = "Glück" }
tr.mag = { ['def'] = "mag", ['eng'] = "Magic", ['fre'] = "Magie", ['spa'] = "mágico", ['ger'] = "Zauber" }
tr.mag_atk = { ['def'] = "mag_atk", ['eng'] = "Magic Attack", ['fre'] = "Attaque magique", ['spa'] = "Ataque mágico", ['ger'] = "Magischer Angriff" }
tr.mag_def = { ['def'] = "mag_def", ['eng'] = "Magic Defense", ['fre'] = "Défense magique", ['spa'] = "Defensa magica", ['ger'] = "Magische Verteidigung" }
tr.male = { ['def'] = "male", ['eng'] = "Male", ['fre'] = "Mâle", ['spa'] = "Masculino", ['ger'] = "Männlich" }
tr.master = { ['def'] = "master", ['eng'] = "Master", ['fre'] = "Maîtresse", ['spa'] = "Dominar", ['ger'] = "Meister" }
tr.mat_growth = { ['def'] = "mat_growth", ['eng'] = "Materia Growth Rate", ['fre'] = "Taux de croissance de la matière", ['spa'] = "Tasa de Crecimiento Materia", ['ger'] = "Materia-Wachstumsrate" }
tr.mat_slots = { ['def'] = "mat_slots", ['eng'] = "Materia Slots", ['fre'] = "Réceptacle de la matière", ['spa'] = "Receptáculo de materia", ['ger'] = "Materia-Behälter" }
tr.max_dash = { ['def'] = "max_dash", ['eng'] = "Maximum Dash", ['fre'] = "Maximum Dash", ['spa'] = "Dash maximo", ['ger'] = "Maximaler Bindestrich" }
tr.max_hp = { ['def'] = "max_hp", ['eng'] = "Maximum HP", ['fre'] = "HP maximum", ['spa'] = "HP máximo", ['ger'] = "Maximale HP" }
tr.max_mp = { ['def'] = "max_mp", ['eng'] = "Maximum MP", ['fre'] = "MP maximum", ['spa'] = "MP máximo", ['ger'] = "Maximale MP" }
tr.max_run = { ['def'] = "max_run", ['eng'] = "Maximum Run", ['fre'] = "Course maximale", ['spa'] = "Carrera máxima", ['ger'] = "Maximaler Lauf" }
tr.mid_char = { ['def'] = "mid_char", ['eng'] = "Centre character", ['fre'] = "Personnage central", ['spa'] = "Personaje central", ['ger'] = "Zentraler Charakter" }
tr.none = { ['def'] = "none", ['eng'] = "None", ['fre'] = "Aucune", ['spa'] = "Ninguna", ['ger'] = "Keiner" }
tr.normal = { ['def'] = "normal", ['eng'] = "Normal", ['fre'] = "Ordinaire", ['spa'] = "Normal", ['ger'] = "Normal" }
tr.nothing = { ['def'] = "nothing", ['eng'] = "Nothing", ['fre'] = "Rien", ['spa'] = "Nada", ['ger'] = "Nichts" }
tr.persona = { ['def'] = "persona", ['eng'] = "Personality", ['fre'] = "Personnalité", ['spa'] = "Personalidad", ['ger'] = "Persönlichkeit" }
tr.protected = { ['def'] = "protected", ['eng'] = "Protected", ['fre'] = "Protégé", ['spa'] = "Protegido", ['ger'] = "Geschützt" }
tr.range_c = { ['def'] = "range_c", ['eng'] = "Close Range", ['fre'] = "Courte portée", ['spa'] = "Quemarropa", ['ger'] = "Kurze Reichweite" }
tr.range_l = { ['def'] = "range_l", ['eng'] = "Long Range", ['fre'] = "Longue portée", ['spa'] = "De largo alcance", ['ger'] = "Langstrecken" }
tr.reflect = { ['def'] = "reflect", ['eng'] = "Reflect", ['fre'] = "Réfléchir", ['spa'] = "Reflejar", ['ger'] = "Reflektieren" }
tr.remaining_lb = { ['def'] = "remaining_lb", ['eng'] = "Remaining Limit Break", ['fre'] = "Limite de repos restante", ['spa'] = "Límite restante restante", ['ger'] = "Verbleibende Grenzwertüberschreitung" }
tr.resist_elem = { ['def'] = "resist_elem", ['eng'] = "Added Elemental Resistance", ['fre'] = "Résistance élémentaire ajoutée", ['spa'] = "Resistencia elemental añadida", ['ger'] = "Elementarwiderstand hinzugefügt" }
tr.resist_status = { ['def'] = "resist_status", ['eng'] = "Added Status Resistance", ['fre'] = "Statut ajouté de résistance", ['spa'] = "Resistencia de estado agregada", ['ger'] = "Status Resistance hinzugefügt" }
tr.sad = { ['def'] = "sad", ['eng'] = "Sadness", ['fre'] = "Tristesse", ['spa'] = "Tristeza", ['ger'] = "Trauer" }
tr.spi = { ['def'] = "spi", ['eng'] = "Spirit", ['fre'] = "Esprit", ['spa'] = "Espíritu", ['ger'] = "Geist" }
tr.stable = { ['def'] = "stable", ['eng'] = "Stable", ['fre'] = "L'écurie", ['spa'] = "Cuadra", ['ger'] = "Rennstall" }
tr.stamina = { ['def'] = "stamina", ['eng'] = "Stamina", ['fre'] = "Endurance", ['spa'] = "Aguante", ['ger'] = "Ausdauer" }
tr.status_def = { ['def'] = "status_def", ['eng'] = "Defend against status", ['fre'] = "Défendre contre le statut", ['spa'] = "Defender contra el estado", ['ger'] = "Verteidige dich gegen den Status" }
tr.str = { ['def'] = "str", ['eng'] = "Strength", ['fre'] = "Force", ['spa'] = "Fuerza", ['ger'] = "Stärke" }
tr.top_char = { ['def'] = "top_char", ['eng'] = "Top character", ['fre'] = "Meilleur personnage", ['spa'] = "Personaje superior", ['ger'] = "Top Charakter" }
tr.total_kills = { ['def'] = "total_kills", ['eng'] = "Total Kills", ['fre'] = "Total des victimes", ['spa'] = "Total de muertes", ['ger'] = "Total Kills" }
tr.triple = { ['def'] = "triple", ['eng'] = "Triple", ['fre'] = "Tripler", ['spa'] = "Triple", ['ger'] = "Verdreifachen" }
tr.unprotected = { ['def'] = "unprotected", ['eng'] = "Unprotected", ['fre'] = "Non protégé", ['spa'] = "Desprotegido", ['ger'] = "Ungeschützt" }
tr.vit = { ['def'] = "vit", ['eng'] = "Vitality", ['fre'] = "Vitalité", ['spa'] = "Vitalidad", ['ger'] = "Vitalität" }
tr.yellow = { ['def'] = "yellow", ['eng'] = "Yellow", ['fre'] = "Jaune", ['spa'] = "Amarillo", ['ger'] = "Gelb" }
tr.equip_chars = { ['def'] = "equip_chars", ['eng'] = "Equippable characters", ['fre'] = "Personnages pouvant être équipés", ['spa'] = "Personajes equipables", ['ger'] = "Ausrüstbare Charaktere" }
tr.bonus_stat = { ['def'] = "bonus_stat", ['eng'] = "Bonus stat", ['fre'] = "Bonus statistique", ['spa'] = "Bono stat", ['ger'] = "Bonusstat" }
tr.bonus_amount = { ['def'] = "bonus_amount", ['eng'] = "Bonus amount", ['fre'] = "Montant du bonus", ['spa'] = "Monto del bono", ['ger'] = "Bonusbetrag" }
tr.auto_stat_effect = { ['def'] = "auto_stat_effect", ['eng'] = "Automatically applied status effect", ['fre'] = "Effet d'état appliqué automatiquement", ['spa'] = "Efecto de estado aplicado automáticamente.", ['ger'] = "Automatisch angewendeter Statuseffekt" }
tr.elem_def_type = { ['def'] = "elem_def_type", ['eng'] = "Elemental defense type", ['fre'] = "Type de défense élémentaire", ['spa'] = "Tipo de defensa elemental", ['ger'] = "Elementarverteidigungstyp" }
tr.elem_defenses = { ['def'] = "elem_defenses", ['eng'] = "Elemental defenses", ['fre'] = "Défenses élémentaires", ['spa'] = "Defensas elementales", ['ger'] = "Elementare Verteidigung" }
tr.choc_colour = { ['def'] = "choc_colour", ['eng'] = "Colour", ['fre'] = "Couleur", ['spa'] = "Color", ['ger'] = "Farbe" }
tr.choc_gender = { ['def'] = "choc_gender", ['eng'] = "Gender", ['fre'] = "Le sexe", ['spa'] = "Género", ['ger'] = "Geschlecht" }
tr.choc_wins = { ['def'] = "choc_wins", ['eng'] = "Class (determined by number of races won)", ['fre'] = "Classe (déterminée par le nombre de courses gagnées)", ['spa'] = "Clase (determinada por el número de carreras ganadas)", ['ger'] = "Klasse (bestimmt durch die Anzahl der gewonnenen Rennen)" }
tr.atk_range = { ['def'] = "atk_range", ['eng'] = "Attack range", ['fre'] = "Portée d'attaque", ['spa'] = "Rango de ataque", ['ger'] = "Angriffsreichweite" }
tr.bonus_mag = { ['def'] = "bonus_mag", ['eng'] = "Bonus magic", ['fre'] = "Bonus de magie", ['spa'] = "Magia de bonificación", ['ger'] = "Bonus Magie" }
tr.bonus_spi = { ['def'] = "bonus_spi", ['eng'] = "Bonus spirit", ['fre'] = "Esprit bonus", ['spa'] = "Espíritu de bonificación", ['ger'] = "Bonus Geist" }
tr.fire = { ['def'] = "fire", ['eng'] = "Fire", ['fre'] = "Feu", ['spa'] = "Fuego", ['ger'] = "Hitze" }
tr.ice = { ['def'] = "ice", ['eng'] = "Ice", ['fre'] = "Glace", ['spa'] = "Hielo", ['ger'] = "Kälte" }
tr.lightning = { ['def'] = "lightning", ['eng'] = "Lightning", ['fre'] = "Foudre", ['spa'] = "Rayo", ['ger'] = "Gewitter" }
tr.earth = { ['def'] = "earth", ['eng'] = "Earth", ['fre'] = "Terre", ['spa'] = "Tierra", ['ger'] = "Erde" }
tr.poison = { ['def'] = "poison", ['eng'] = "Poison", ['fre'] = "Poison", ['spa'] = "Veneno", ['ger'] = "Gift" }
tr.gravity = { ['def'] = "gravity", ['eng'] = "Gravity", ['fre'] = "Gravité", ['spa'] = "Gravedad", ['ger'] = "Schwerekraft" }
tr.water = { ['def'] = "water", ['eng'] = "Water", ['fre'] = "Eau", ['spa'] = "Agua", ['ger'] = "Wasser" }
tr.wind = { ['def'] = "wind", ['eng'] = "Wind", ['fre'] = "Sacre", ['spa'] = "Viento", ['ger'] = "Wind" }
tr.holy = { ['def'] = "holy", ['eng'] = "Holy", ['fre'] = "Saint", ['spa'] = "Sacro", ['ger'] = "Heilig" }
tr.item = { ['def'] = "item", ['eng'] = "Item", ['fre'] = "Elément", ['spa'] = "ít", ['ger'] = "Objekt" }
tr.magic = { ['def'] = "magic", ['eng'] = "Magic", ['fre'] = "Magie", ['spa'] = "mágico", ['ger'] = "Zauber" }
tr.materia = { ['def'] = "materia", ['eng'] = "Materia", ['fre'] = "Materia", ['spa'] = "Materia", ['ger'] = "Materia" }
tr.equip = { ['def'] = "equip", ['eng'] = "Equip", ['fre'] = "Équiper", ['spa'] = "Equipar", ['ger'] = "Ausrüsten" }
tr.status = { ['def'] = "status", ['eng'] = "Status", ['fre'] = "Etat", ['spa'] = "Estado", ['ger'] = "Werte" }
tr.order = { ['def'] = "order", ['eng'] = "Order", ['fre'] = "Placer", ['spa'] = "Orden", ['ger'] = "Reihe" }
tr.limit = { ['def'] = "limit", ['eng'] = "Limit", ['fre'] = "Limite", ['spa'] = "Límite", ['ger'] = "Limit" }
tr.config = { ['def'] = "config", ['eng'] = "Config", ['fre'] = "Config", ['spa'] = "Config", ['ger'] = "Konfig" }
tr.phs = { ['def'] = "phs", ['eng'] = "PHS", ['fre'] = "PHS", ['spa'] = "PHS", ['ger'] = "PHS" }
tr.save = { ['def'] = "save", ['eng'] = "Save", ['fre'] = "Enregistrer", ['spa'] = "Salvar", ['ger'] = "Speichern" }
tr.available = { ['def'] = "available", ['eng'] = "Available", ['fre'] = "Disponible", ['spa'] = "Disponible", ['ger'] = "Verfügbar" }
tr.unavailable = { ['def'] = "unavailable", ['eng'] = "Unavailable", ['fre'] = "Indisponible", ['spa'] = "Indisponible", ['ger'] = "Nicht verfügbar" }
tr.item_id = {}
tr.item_q = {}
tr.materia_id = {}
tr.materia_exp = {}
tr.item_id.prepend = { ['def'] = "item_id.prepend", ['eng'] = "Item Slot", ['fre'] = "ID des articles dans l'emplacement", ['spa'] = "Cantidad de Artículos en la Ranura", ['ger'] = "ID der Artikel in Position" }
tr.item_id.append = { ['def'] = "item_id.append", ['eng'] = "ID", ['fre'] = "", ['spa'] = "", ['ger'] = "" }
tr.item_q.prepend = { ['def'] = "item_q.prepend", ['eng'] = "Item Slot", ['fre'] = "Quantité d'éléments dans l'emplacement", ['spa'] = "Cantidad de artículos en la ranura", ['ger'] = "Anzahl der Artikel in Position" }
tr.item_q.append = { ['def'] = "item_q.append", ['eng'] = "Quantity", ['fre'] = "", ['spa'] = "", ['ger'] = "" }
tr.materia_id.prepend = { ['def'] = "materia_id.prepend", ['eng'] = "Materia Slot", ['fre'] = "ID des articles dans l'emplacement", ['spa'] = "Cantidad de Artículos en la Ranura", ['ger'] = "ID der Artikel in Position" }
tr.materia_id.append = { ['def'] = "materia_id.append", ['eng'] = "ID", ['fre'] = "", ['spa'] = "", ['ger'] = "" }
tr.materia_exp.prepend = { ['def'] = "materia_q.prepend", ['eng'] = "Materia Slot", ['fre'] = "EXP d'éléments dans l'emplacement", ['spa'] = "EXP de artículos en la ranura", ['ger'] = "EXP der Artikel in Position" }
tr.materia_exp.append = { ['def'] = "materia_q.append", ['eng'] = "EXP", ['fre'] = "", ['spa'] = "", ['ger'] = "" }
itm_names = {}
wpn_names = {}
arm_names = {}
acc_names = {}
mat_names = {}
key_names = {}
chr_names = {}
sta_names = {}
elem_names = {}
itm_names['eng'] = { "Potion", "Hi-Potion", "X-Potion", "Ether", "Turbo Ether", "Elixir", "Megalixir", "Phoenix Down", "Antidote", "Soft", "Maiden's Kiss", "Cornucopia", "Echo Screen", "Hyper", "Tranquilizer", "Remedy", "Smoke Bomb", "Speed Drink", "Hero Drink", "Vaccine", "Grenade", "Shrapnel", "Right arm", "Hourglass", "Kiss of Death", "Spider Web", "Dream Powder", "Mute Mask", "War Gong", "Loco weed", "Fire Fang", "Fire Veil", "Antarctic Wind", "Ice Crystal", "Bolt Plume", "Swift Bolt", "Earth Drum", "Earth Mallet", "Deadly Waste", "M-Tentacles", "Stardust", "Vampire Fang", "Ghost Hand", "Vagyrisk Claw", "Light Curtain", "Lunar Curtain", "Mirror", "Holy Torch", "Bird Wing", "Dragon Scales", "Impaler", "Shrivel", "Eye drop", "Molotov", "S-mine", "8inch Cannon", "Graviball", "T/S Bomb", "Ink", "Dazers", "Dragon Fang", "Cauldron", "Sylkis Greens", "Reagan Greens", "Mimett Greens", "Curiel Greens", "Pahsana Greens", "Tantal Greens", "Krakka Greens", "Gysahl Greens", "Tent", "Power Source", "Guard Source", "Magic Source", "Mind Source", "Speed Source", "Luck Source", "Zeio Nut", "Carob Nut", "Porov Nut", "Pram Nut", "Lasan Nut", "Saraha Nut", "Luchile Nut", "Pepio Nut", "Battery", "Tissue", "Omnislash", "Catastrophe", "Final Heaven", "Great Gospel", "Cosmo Memory", "All Creation", "Chaos", "Highwind", "1/35 soldier", "Super Sweeper", "Masamune Blade", "Save Crystal", "Combat Diary", "Autograph", "Gambler", "Desert Rose", "Earth Harp", "Guide Book" }
wpn_names['eng'] = { "Buster Sword", "Mythril Saber", "Hardedge", "Butterfly Edge", "Enhance Sword", "Organics", "Crystal Sword", "Force Stealer", "Rune Blade", "Murasame", "Nail Bat", "Yoshiyuki", "Apocalypse", "Heaven's Cloud", "Ragnarok", "Ultima Weapon", "Leather Glove", "Metal Knuckle", "Mythril Claw", "Grand Glove", "Tiger Fang", "Diamond Knuckle", "Dragon Claw", "Crystal Glove", "Motor Drive", "Platinum Fist", "Kaiser Knuckle", "Work Glove", "Powersoul", "Master Fist", "God's Hand", "Premium Heart", "Gatling Gun", "Assault Gun", "Cannon Ball", "Atomic Scissors", "Heavy Vulcan", "Chainsaw", "Microlaser", "A.M Cannon", "W Machine Gun", "Drill Arm", "Solid Bazooka", "Rocket Punch", "Enemy Launcher", "Pile Banger", "Max Ray", "Missing Score", "Mythril Clip", "Diamond Pin", "Silver Barrette", "Gold Barrette", "Adaman Clip", "Crystal Comb", "Magic Comb", "Plus Barrette", "Centclip", "Hairpin", "Seraph Comb", "Behemoth Horn", "Spring Gun Clip", "Limited Moon", "Guard Stick", "Mythril Rod", "Full Metal Staff", "Striking Staff", "Prism Staff", "Aurora Rod", "Wizard Staff", "Wizer Staff", "Fairy Tale", "Umbrella", "Princess Guard", "Spear", "Slash Lance", "Trident", "Mast Ax", "Partisan", "Viper Halberd", "Javelin", "Grow Lance", "Mop", "Dragoon Lance", "Scimitar", "Flayer", "Spirit Lance", "Venus Gospel", "4-point Shuriken", "Boomerang", "Pinwheel", "Razor Ring", "Hawkeye", "Crystal Cross", "Wind Slash", "Twin Viper", "Spiral Shuriken", "Superball", "Magic Shuriken", "Rising Sun", "Oritsuru", "Conformer", "Yellow M-phone", "Green M-phone", "Blue M-phone", "Red M-phone", "Crystal M-phone", "White M-phone", "Black M-phone", "Silver M-phone", "Trumpet Shell", "Gold M-phone", "Battle Trumpet", "Starlight Phone", "HP Shout", "Quicksilver", "Shotgun", "Shortbarrel", "Lariat", "Winchester", "Peacemaker", "Buntline", "Long Barrel R", "Silver Rifle", "Sniper CR", "Supershot ST", "Outsider", "Death Penalty", "Masamune" }
arm_names['eng'] = { "Bronze Bangle", "Iron Bangle", "Titan Bangle", "Mythril Armlet", "Carbon Bangle", "Silver Armlet", "Gold Armlet", "Diamond Bangle", "Crystal Bangle", "Platinum Bangle", "Rune Armlet", "Edincoat", "Wizard Bracelet", "Adaman Bangle", "Gigas Armlet", "Imperial Guard", "Aegis Armlet", "Fourth Bracelet", "Warrior Bangle", "Shinra Beta", "Shinra Alpha", "Four Slots", "Fire Armlet", "Aurora Armlet", "Bolt Armlet", "Dragon Armlet", "Minerva Band", "Escort Guard", "Mystile", "Ziedrich", "Precious Watch", "Chocobracelet" }
acc_names['eng'] = { "Power Wrist", "Protect Vest", "Earring", "Talisman", "Choco Feather", "Amulet", "Champion Belt", "Poison Ring", "Touph Ring", "Circlet", "Star Pendant", "Silver Glasses", "Headband", "Fairy Ring", "Jem Ring", "White Cape", "Sprint Shoes", "Peace Ring", "Ribbon", "Fire Ring", "Ice Ring", "Bolt Ring", "Tetra Elemental", "Safety Bit", "Fury Ring", "Curse Ring", "Protect Ring", "Cat's Bell", "Reflect Ring", "Water Ring", "Sneak Glove", "HypnoCrown" }
mat_names['eng'] = { "MP Plus", "HP Plus", "Speed Plus", "Magic Plus", "Luck Plus", "EXP Plus", "Gil Plus", "Enemy Away", "Enemy Lure", "Chocobo Lure", "Pre-Emptive", "Long Range", "Mega All", "Counter Attack", "Slash-All", "Double Cut", "Cover", "Underwater", "HP&lt;-&gt;MP", "W-Magic", "W-Summon", "W-Item", "All", "Counter", "Magic Counter", "MP Turbo", "MP Absorb", "HP Absorb", "Elemental", "Added Effect", "Sneak Attack", "Final Attack", "Added Cut", "Steal as well", "Quadra Magic", "Steal", "Sense", "Throw", "Morph", "Deathblow", "Manipulate", "Mime", "Enemy Skill", "Master Command", "Fire", "Ice", "Earth", "Lightning", "Restore", "Heal", "Revive", "Seal", "Mystify", "Transform", "Exit", "Poison", "Gravity", "Barrier", "Comet", "Time", "Destruct", "Contain", "Full Cure", "Shield", "Ultima", "Master Magic", "Choco/Mog", "Shiva", "Ifrit", "Ramuh", "Titan", "Odin", "Leviathan", "Bahamut", "Kjata", "Alexander", "Phoenix", "Neo Bahamut", "Hades", "Typoon", "Bahamut ZERO", "Knights of Round", "Master Summon" }
key_names['eng'] = { "Cotton Dress", "Satin Dress", "Silk Dress", "Wig", "Dyed Wig", "Blonde Wig", "Glass Tiara", "Ruby Tiara", "Diamond Tiara", "Cologne", "Flower cologne", "Sexy Cologne", "Member's Card", "Lingerie", "Mystery panties", "Bikini briefs", "Pharmacy Coupons", "Disinfectant", "Deodorant", "Digestive", "Huge Materia", "Huge Materia", "Huge Materia", "Huge Materia", "Key to Ancients", "Letter to a Daughter", "Letter to a Wife", "Lunar Harp", "Basement Key", "Key to Sector 5", "Keycard 60", "Keycard 62", "Keycard 65", "Keycard 66", "Keycard 68", "Midgar parts", "Midgar parts", "Midgar parts", "Midgar parts", "Midgar parts", "PHS", "Gold Ticket", "Keystone", "Leviathan Scales", "Glacier Map", "A Coupon", "B Coupon", "C Coupon", "Black Materia", "Mythril", "Snowboard" }
chr_names['eng'] = { "Cloud", "Barret", "Tifa", "Aeris", "Red XIII", "Yuffie", "Cait Sith / past Cloud", "Vincent / past Sephiroth", "Cid" }
sta_names['eng'] = { "Death", "Near-death", "Sleep", "Poison", "Sadness", "Fury", "Confusion", "Silence", "Haste", "Slow", "Stop", "Frog", "Small", "Slow-numb", "Petrify", "Regen", "Barrier", "MBarrier", "Reflect", "Dual", "Shield", "Death-sentence", "Manipulate", "Berserk", "Peerless", "Paralyzed", "Darkness" }
elem_names['eng'] = { "Fire", "Ice", "Lightning", "Earth", "Poison", "Gravity", "Water", "Wind", "Holy" }
itm_names['fre'] = { "Potion", "Super potion", "Potion-X", "Ether", "Ether turbo", "Elixir", "Mègalixir", "Queue de Phènix", "Antidote", "Doux", "Baiser de vierge", "Corne d'abondance", "Ecran sonore", "Hyper", "Calmant", "Remêde", "Fumigêne", "Boisson de vitesse", "Boisson de hèros", "Vaccin", "Grenade", "Shrapnel", "Bras droit", "Sablier", "Baiser de la mort", "Toile d'araignèe", "Poussiêre de rëve", "Masque muet", "Gong de guerre", "Graine de fou", "Dent de feu", "Voile de feu", "Vent antarctique", "Cristal de glace", "Plume d'èclair", "Eclair furtif", "Tambour terrien", "Maillet terrien", "Matiêre â risque", "TentaculesM.", "Poussiêre d'ètoiles", "Canine de vampire", "Main de fantöme", "Griffe de vagyrisk", "Rideau clair", "Rideau lunaire", "Miroir", "Torche sacrèe", "Aile d'oiseau", "Ecailles de dragon", "Empaleur", "Rètrècisseur", "Collyre", "Molotov", "Mine-S", "Canon 2,03 mm", "Graviballe", "Bombe T/S", "Encre", "Epine paralysie", "Dent de dragon", "Chaudron", "Lègumes Sylkis", "Lègumes Reagan", "Lègumes Mimett", "Lègumes Curiel", "Lègumes Pahsana", "Lègumes Tantal", "Lègumes Krakka", "Lègumes Gysahl", "Tente", "Source de pouvoir", "Srce de protection", "Source de magie", "Source spirituelle", "Source de rapiditè", "Source de chance", "Noix de Zeio", "Noix de Caroube", "Noix de Porov", "Noix de Pram", "Noix de Lasan", "Noix de Saraha", "Noix de Luchile", "Noix de Pepio", "Batterie", "Mouchoir", "Omnislash", "Catastrophe", "Dernier paradis", "Grand èvangile", "Mèmoire Cosmos", "Tout crèation", "Chaos", "Hautvent", "Soldat 1/35", "Sweeper super", "Lame Masamune", "Cristal sauf", "Carnet de combat", "Autographe", "Joueur", "Rose du dèsert", "Harpe terrestre", "Guide" }
wpn_names['fre'] = { "Epèe broyante", "Sabre mythril", "Bord-dur", "Bord de papillon", "Super èpèe", "Organix", "Epèe cristal", "Voleur fou", "Sabre rune", "Murasame", "Coup d'ongle", "Yoshiyuki", "Apocalypse", "Nuage du paradis", "Ragnarok", "Derniêre arme", "Gant de cuir", "Poing mètallique", "Griffe mythril", "Gant majestueux", "Canine de tigre", "Poing de diamant", "Griffe de dragon", "Gant cristal", "Moteur", "Poing de platine", "Poing de Kaiser", "Gant de travail", "Arme de pouvoir", "Poing maïtre", "Main divine", "Super coeur", "Fusil automatique", "Fusil d'attaque", "Boulet canon", "Ciseau atomique", "Volcan lourd", "Tronéonneuse", "Microlaser", "A‚M Canon", "Mitrailleuse W", "Bras vis", "Bazooka solide", "Punch foudroyant", "Lanceur adversaire", "Bunker", "Rayon maxi", "Manuscrit absent", "Broche mythril", "Broche diamant", "Barrette argent", "Barrette or", "Broche Adaman", "Peigne cristal", "Peigne magique", "Barrette Plus", "Broche", "Epingle cheveux", "Peigne sèraphin", "Corne bèhèmoth", "Broche de fusil", "Lune limitèe", "Bäton de garde", "Bäton de mythril", "Bäton mètallique", "Bäton de frappe", "Bäton prisme", "Bäton aurore", "Bäton magicien", "Bäton de sage", "Conte de fèes", "Parapluie", "Garde de princesse", "Lance", "Lance-taillade", "Trident", "Häche maïtresse", "Partisan", "Vipêre hallebarde", "Javelot", "Lance croissance", "Mop", "Lance de dragon", "Cimeterre", "Fouet", "Lance spirituelle", "Evangile de Vènus", "Shuriken 4-points", "Boomerang", "Feu d'artifice", "Anneau rasoir", "Regard d'aigle", "Croix cristal", "Tailleur de vent", "Vipêre jumelle", "Spiral de Shuriken", "Superballe", "Shuriken magique", "Soleil levant", "Oritsuru", "Conformiste", "Mphone jaune", "Mphone vert", "Mphone bleu", "Mphone rouge", "Mphone cristal", "Mphone blanc", "Mphone noir", "Mphone argent", "Conque", "Mphone or", "Bugle de combat", "Tèl. d'ètoiles", "Cri HP", "Mercure", "Fusil chasse", "PetitTonneau", "Lariat", "Winchester", "Pacificateur", "Cordage", "Long tonneau R", "Fusil argent", "CR d'embuscade", "Supercoup ST", "Outsider", "Peine de mort", "Masamune" }
arm_names['fre'] = { "Bijou de bronze", "Bijou de fer", "Bijou Titan", "Cercle mythril", "Bijou de charbon", "Bracelet argent", "Bracelet or", "Bijou diamant", "Bijou cristal", "Bijou platine", "Bracelet de rune", "Veste d'èden", "Bracelet Sage", "Bijou Adaman", "Bracelet Gigas", "Garde impèrial", "Bracelet Aegis", "4ême bracelet", "Bijou de guerrier", "Bëta Shinra", "Alpha Shinra", "Quatre orifices", "Bracelet feu", "Bracelet aurore", "Bracelet èclair", "Bracelet dragon", "Cercle Minerve", "Garde d'escorte", "Mystile", "Collier", "Montre prècieuse", "Chocobracelet" }
acc_names['fre'] = { "Super poignet", "Gilet protection", "Boucle d'oreille", "Talisman", "Plume chocobo", "Amulette", "Echarpe champion", "Anneau poison", "Anneau rèsistant", "Brassard", "Pendentif ètoilè", "Lunettes argent", "Bandeau", "Anneau fèe", "Anneau de pierres", "Cape blanche", "Baskets", "Anneau de paix", "Ruban", "Anneau feu", "Anneau glace", "Anneau èclair", "Tètra èlèmentaire", "Bit de süretè", "Anneau de furie", "Anneau maudit", "Anneau protecteur", "Clochette de chat", "Anneau reflet", "Cercle d'eau", "Gant de voleur", "Hypnocouronne" }
mat_names['fre'] = { "Super MP", "Super HP", "Super vitesse", "Super magie", "Super chance", "Super EXP", "Super Gil", "Repousse-ennemi", "Appät-ennemi", "Appät-chocobo", "Prèvention", "Longue portèe", "Mèga tous", "Contre-attaque", "FurieMax", "Attaque double", "Couverture", "Sous-marin", "HP&lt;-&gt;MP", "Magie-W", "Invocation-W", "Elèment-W", "Tout", "Opposition", "Opposition Magie", "Turbo MP", "Absorption MP", "Absorption HP", "El. Base", "Effet suppl.", "Attaque Furtive", "Attaque Finale", "Coupure suppl.", "Vol simultanè", "Quadruple magie", "Voler", "Sentir", "Lancer", "Trans.", "Coup mortel", "Manipuler", "Mimer", "Talent de l'ennemi", "Commande maïtre", "Feu", "Glace", "Terre", "Foudre", "Restaurer", "Guèrir", "Ranimer", "Sceller", "Mystifier", "Transformation", "Quitter", "Poison", "Gravitè", "Barriêre", "Comête", "Temps", "Destruction", "Contenir", "Guèrison Max", "Bouclier", "Ultima", "Magie maïtresse", "Choco/Mog", "Shiva", "Ifrit", "Ramuh", "Titan", "Odin", "Lèviathan", "Bahamut", "Kujata", "Alexandre", "Phènix", "Nèo Bahamut", "Hadês", "Typhon", "Bahamut ZÉRO", "Chev. Tble Ronde", "Invocation maïtre" }
key_names['fre'] = { "Robe coton", "Robe satin", "Robe soie", "Perruque", "Perruque-br.", "Perruque-bl.", "Diadême-verre", "Diadême rubis", "Diadême diamants", "Parfum", "Parfum fleur", "Parfum sexy", "Carte membre", "Lingerie", "Slips mystêre", "Slips bikinis", "Coupons pharm.", "Dèsinfectant", "Dèodorant", "Bicarbonate", "Mèga-Materia", "Mèga-Materia", "Mèga-Materia", "Mèga-Materia", "Clef des Anciens", "A ma fille", "A ma femme", "Harpe lunaire", "Clè sous-sol", "Clè Sect. 5", "Carte 60", "Carte 62", "Carte 65", "Carte 66", "Carte 68", "Sect. Midgar", "Sect. Midgar", "Sect. Midgar", "Sect. Midgar", "Sect. Midgar", "PHS", "Ticket d'or", "Clè de pierre", "Ecailles-Lèviathan", "Carte-glacier", "Coupon A", "Coupon B", "Coupon C", "Materia noire", "Mythril", "Surf-neiges" }
chr_names['fre'] = { "Cloud", "Barret", "Tifa", "Aeris", "Red XIII", "Yuffie", "Cait Sith / Cloud passé", "Vincent / Sephiroth passé", "Cid" }
sta_names['fre'] = { "Mort", "Quasi-mort", "Sommeil", "Poison", "Triste", "Furie", "Confusion", "Silence", "Hâte", "Lent", "Stop", "Grenouille", "Mini", "Lente apathie", "Pétrifier", "Regen", "Barrière", "BarrM", "Reflet", "Double", "Bouclier", "Peine de mort", "Manipuler", "Folie", "Sans pareil", "Paralysie", "Obscurité" }
elem_names['fre'] = { "Feu", "Glace", "Foudre", "Terre", "Poison", "Gravité", "Eau", "Vent", "Saint" }
itm_names['ger'] = { "Trank", "Hi-Trank", "X-Trank", "Áther", "Turbo-Áther", "Elixier", "Megalixier", "Phõnix-Feder", "Gegenmittel", "Goldene Nadel", "Jungfernkuß", "Schrumpfhorn", "Echobombe", "Hyper", "Beruhigungsmittel", "Heilmittel", "Rauchbombe", "Turbo-Trank", "Heldentrank", "Impfstoff", "Granate", "Schrapnel", "Rechter Arm", "Goldene Sanduhr", "Todeskuß", "Spinnweben", "Traumpuder", "Schweigemaske", "Kriegsgong", "Loco-Kraut", "Feuerzahn", "Feuer-Cocktail", "Antarktischer Wind", "Eiskristall", "Blitzrauch", "Gewitterblitz", "Erdtrommel", "Erdhammer", "Giftmüll", "M-Tentakeln", "Sternenstaub", "Vampirzahn", "Geisterhand", "Basiliskenklaue", "Sonnenschleier", "Mondschleier", "Spiegel", "Heilige Fackel", "Vogelflügel", "Drachenschuppen", "Froschschenkel", "Schrumpfer", "Augentropfen", "Molotow", "S-Mine", "203mm Granate", "Graviball", "Raum/Zeit-Bombe", "Tinte", "Betãubungspfeil", "Drachenzahn", "Hexenkessel", "Sylkis-Gemüse", "Reagan-Gemüse", "Mimett-Gemüse", "Curiel-Gemüse", "Pahsana-Gemüse", "Tantle-Gemüse", "Krakka-Gemüse", "Gysahl-Gemüse", "Zelt", "Kraftkapsel", "Abwehrkapsel", "Zauberkapsel", "Gemütskapsel", "Speed-Kapsel", "Glückskapsel", "Zeyo-Nuß", "Karob-Nuß", "Porof-Nuß", "Pram-Nuß", "Lasan-Nuß", "Saraha-Nuß", "Luchil-Nuß", "Pepio-Nuß", "Batterie", "Papiertuch", "Schwertwirbel", "Katastrophe", "Himmelsfaust", "Engels-Chor", "Kosmo-Glut", "Zorn der Gõtter", "Chaos", "Highwind", "1/35-Soldat", "Supermetall Eraser", "Masamune", "Speicherkristall", "Tagebuch", "Autogramm", "Tagebuch 2", "Wüstenrose", "Erdharfe", "Reiseführer" }
wpn_names['ger'] = { "Bastard-Schwert", "Mythril-Sãbel", "Hartklinge", "Schmetterlingsklinge", "Superschwert", "Organix", "Kristallschwert", "Superdieb", "Runenschwert", "Murasame", "Nagelkeule", "Yoshiyuki", "Apokalypse", "Himmelswolke", "Ragnarõk", "Ultimative Weapon", "Lederhandschuh", "Metallfaust", "Mythril-Kralle", "Megahandschuh", "Tigerzahn", "Diamantfaust", "Drachenkralle", "Kristallhandschuh", "Motor-Faust", "Platinfaust", "Kaiserfaust", "Arbeitshandschuh", "Power Soul", "Meister-Faust", "Hand Gottes", "Herz der Sehnsucht", "Gatling-Gewehr", "Sturmgewehr", "Canon Ball", "Atomarschere", "Vulkan-Blaster", "Kettensãge", "Mikrolaser", "A/M-Kanone", "Doppel-MG", "Bohrarm", "Panzerfaust", "Raketenschlag", "Feindschleuder", "Pfahlramme", "Max-Ray", "AP-Kollektor", "Mythril-Clip", "Diamantnadel", "Silberspange", "Goldspange", "Diamantennadel", "Kristallkamm", "Zauberkamm", "Platinspange", "Cent-Clip", "Haarnadel", "Seraphinkamm", "Behemoth-Horn", "Pistolen-Clip", "Mondfinsternis", "Schutzstab", "Mythril-Stange", "Metallstock", "Schlagstock", "Prismenstab", "Aurora-Stab", "Zauberstab", "Omni-Stab", "Mãrchen-Stab", "Sonnenschirm", "Prinzess-Wãchter", "Speer", "Lanze", "Dreizack", "Frost-Axt", "Partisan", "Viper-Hellebarde", "Kurzspeer", "Himmelsspeer", "Mop", "Dragonerlanze", "Krummschwert", "Peitsche", "Geisteslanze", "Venushymne", "Vierzack-Schuriken", "Bumerang", "Windrad", "Klingenring", "Adlerauge", "Kristallkreuz", "Windklinge", "Doppelviper", "Zauber-Schuriken", "Megaball", "Zauber-Schuriken", "Morgendãmmerung", "Oritsuru", "Konformium", "Gelbes Megaphon", "Grünes Megaphon", "Blaues Megaphon", "Rotes Megaphon", "Kristall-Megaphon", "Weißes Megaphon", "Schwarz-Megaphon", "Silbernes Megaphon", "Trompetmuschel", "Goldenes Megaphon", "Kampftrompete", "Sternen-Megaphon", "MEGA-Phon", "Quecksilber", "Schrotflinte", "Kurzlauf", "Lasso", "Winchester", "Peace Maker", "Mistra-Gewehr", "Vollstrecker R", "Silberbüchse", "Heckenschützen-CR", "Gigaschuß-ST", "Outsider", "Scharfrichter", "Masamune" }
arm_names['ger'] = { "Bronze-Reif", "Eisen-Reif", "Titan-Reif", "Mythril-Armband", "Karbon-Reif", "Silber-Armband", "Gold-Armband", "Diamant-Reif", "Kristall-Rreif", "Platin-Reif", "Runen-Armband", "Edin-Reif", "Magier-Armband", "Adaman-Reif", "Gigas-Armband", "Kaisergarde", "Aegis-Armband", "Zwangs-Reif", "Krieger-Reif", "Shinra Beta", "Shinra Alfa", "Vier-Slots", "Feuer-Armband", "Aurora-Armband", "Blitz-Armband", "Drachen-Armband", "Minerva-Reif", "Geleitwache", "Mystil", "Ziedrich", "Kostbare Uhr", "Chocobo-Armband" }
acc_names['ger'] = { "Kraftarmband", "Schutzweste", "Ohrring", "Talisman", "Chocobo-Feder", "Amulett", "Meistergürtel", "Giftring", "Kraft-Ring", "Reif", "Sternen-Amulett", "Silberbrille", "Kopfband", "Elfenring", "Smaragdring", "Weißer Umhang", "Sprintschuhe", "Friedensring", "Schmuckband", "Feuerring", "Eisring", "Blitzring", "Absorbierer", "Sicherheits-Bit", "Furienring", "Ring des Fluches", "Schutzring", "Katzenglocke", "Spiegelring", "Wasserring", "Rãuberhandschuh", "Hypnokrone" }
mat_names['ger'] = { "Extra MP", "Extra HP", "Speed-Plus", "Zauber-Plus", "Glücks-Plus", "Extra EXP", "Extra Gil", "Feind-Vertreibung", "Feind-Kõder", "Chocobo-Kõder", "Prãventivangriff", "Fernangriff", "Mega-Alle", "Gegenangriff", "Generalangriff", "Multiangriff", "Schutz", "Unterwasser", "HP&lt;-&gt;MP", "2xZauber", "2xBeschwõrung", "2xObjekt", "Alle", "Konter", "Zauberkonter", "MP-Turbo", "MP-Absorption", "HP-Absorption", "Nebenwirkung", "Zusatzwirkung", "Schleichangriff", "Finaler Angriff", "Zusatzschlag", "Auch Stehlen", "Quadra-Zauber", "Raub", "Analyse", "Wurf", "Morph", "Todesstoß", "Manipulation", "Mimik", "Feindtechnik", "Premium-Befehl", "Hitze", "Kãlte", "Erde", "Gewitter", "Genesung", "Behandlung", "Wiederbelebung", "Versiegelung", "Umnebelung", "Verwandlung", "Schluß", "Gift", "Schwerkraft", "Schutz", "Asteroid", "Zeit", "Zerstõrung", "Eindãmmung", "Komplettheilung", "Schild", "Ultima", "Premium-Zauber", "Choco/Mog", "Shiva", "Ifrit", "Ramuh", "Titan", "Odin", "Leviathan", "Bahamut", "Kujata", "Alexander", "Phõnix", "Neo-Bahamut", "Hades", "Typhon", "Bahamut Zero", "Ritter der Runde", "Premium-Beschwõrung" }
key_names['ger'] = { "Baumwollkleid", "Satinkleid", "Seidenkleid", "Perücke", "Gefãrbte Perücke", "Blonde Perücke", "Glasdiadem", "Rubindiadem", "Diamantendiadem", "Eau de Cologne", "Rosenparfüm", "Sexy Parfüm", "Mitgliedskarte", "Unterwãsche", "Geheimnisvolles Hõschen", "Bikinislip", "Apothekengutschein", "Desinfektionsmittel", "Deodorant", "Abführmittel", "Große Materia", "Große Materia", "Große Materia", "Große Materia", "Schlüssel zum alten Volk", "Brief an die Tochter", "Brief an die Ehefrau", "Mondharfe", "Kellerschlüssel", "Schlüssel für Sektor 5", "Code-Karte 60", "Code-Karte 62", "Code-Karte 65", "Code-Karte 66", "Code-Karte 68", "Teil von Midgar", "Teil von Midgar", "Teil von Midgar", "Teil von Midgar", "Teil von Midgar", "PHS", "Goldticket", "Schlüsselstein", "Leviathanschuppen", "Gletscherkarte", "A-Coupon", "B-Coupon", "C-Coupon", "Schwarze Materia", "Mythril", "Snowboard" }
chr_names['ger'] = { "Cloud", "Barret", "Tifa", "Aeris", "Red XIII", "Yuffie", "Cait Sith / vergangene Cloud", "Vincent / vergangene Sephiroth", "Cid" }
sta_names['ger'] = { "Tod", "Gefahr", "Schlaf", "Gift", "Trauer", "Zorn", "Psycho", "Schweigen", "Hast", "Gemach", "Stop", "Frosch", "Zwerg", "Allm. Verstein.", "Versteinern", "Heilung", "Barriere", "ZBarrier", "Wasser", "Dual", "Schild", "Todesurteil", "Manipulieren", "Tobsucht", "Unverwundbar", "Lähmung", "Blind" }
elem_names['ger'] = { "Hitze", "Kälte", "Gewitter", "Erde", "Gift", "Schwerekraft", "Wasser", "Wind", "Heilig" }
itm_names['spa'] = { "Poción", "Poción S", "Poción X", "Éter", "Éter turbo", "Elixir", "Megaelixir", "Plumaje Fénix", "Antídoto", "Blando", "Beso doncella", "Cornucopia", "Pantalla sonora", "Hiper", "Tranquilizante", "Remedio", "Bomba humo", "Bebida velocidad", "Bebida héroe", "Vacuna", "Granada", "Metralla", "Brazo derecho", "Reloj de arena", "Beso mortal", "Telaraña", "Polvo dormir", "Máscara silencio", "Gong", "Hierbas", "Colmillo fuego", "Velo fuego", "Viento antártico", "Cristal hielo", "Pluma rayo", "Rayo rápido", "Tambor tierra", "Mazo tierra", "Basura letal", "M-Tentáculos", "Polvo estelar", "Colmillo vampiro", "Mano fantasma", "Garra Vagyrisk", "Cortina de luz", "Cortina lunar", "Espejo", "Antorcha sagrada", "Ala pájaro", "Escamas dragón", "Empalar", "Secado", "Colirio", "Molotov", "Mina S", "Cañón 20 cm.", "Gravibola", "Bomba T/S", "Tinta", "Aturdidor", "Colmillo dragón", "Caldera", "Verduras Sylkis", "Verduras Reagan", "Verduras Mimett", "Verduras Curiel", "Verduras Pahsana", "Verduras Tantal", "Verduras Krakka", "Verduras Gysahl", "Carpa", "Fuente potencia", "Fuente guardia", "Fuente magia", "Fuente espíritu", "Fuente veloc.", "Fuente suerte", "Nuez Zeio", "Nuez Algarrobo", "Nuez Porov", "Nuez Pram", "Nuez Lasan", "Nuez Saraha", "Nuez Luchile", "Nuez Pepio", "Batería", "Pañuelo", "Omnilátigo", "Catástrofe", "Cielo final", "Gran evangelio", "Mem. cósmica", "Toda creación", "Caos", "Gran viento", "Soldado 1/35", "Super barredor", "Espada Masamune", "Cristal salvador", "Diario de combate", "Autógrafo", "Jugador", "Rosa del desierto", "Arpa tierra", "Guía" }
wpn_names['spa'] = { "Espada mortal", "Sable mitrilo", "Borde duro", "Borde mariposa", "Super espada", "Orgánica", "Espada cristal", "Ladrón", "Hoja runa", "Murasame", "Garra", "Yoshiyuki", "Apocalipsis", "Nubecielo", "Ragnarok", "Arma final", "Guante piel", "Nudillo metal", "Garra mitrilo", "Gran guante", "Colmillo tigre", "Nudillo diamante", "Garra dragón", "Guante cristal", "Fuerza motor", "Puño platino", "Nudillo káiser", "Guante de trabajo", "Alma poder", "Puño maestro", "Mano de Dios", "Corazón", "Arma abrir", "Arma asalto", "Bala cañón", "Tijera atómica", "Vulcano pesado", "Motosierra", "Microláser", "Cañón A‚M", "Metralleta W", "Taladro", "Bazuka sólida", "Golpe cohete", "Lanza enemigos", "Pila Banger", "Rayo máximo", "Punto errado", "Clip mitrilo", "Aguja diamantada", "Barreta de plata", "Barreta de oro", "Clip adamán", "Peine cristal", "Peine mágico", "Barreta plus", "Centclip", "Horquilla", "Peine seraf", "Cuerno Behemoth", "Clip de pistola", "Luna limitada", "Porra", "Vara mitrilo", "Vara metal", "Vara golpeadora", "Vara prisma", "Vara aurora", "Vara mágica", "Vara Wizer", "Cuento", "Paraguas", "Guarda princesa", "Lanza", "Lanza mortal", "Tridente", "Hacha", "Partisano", "Víbora Halberd", "Jabalina", "Lanza crecimiento", "Fregador", "Lanza dragón", "Cimitarra", "Cruel", "Lanza espíritu", "Evangelio Venus", "Shuriken 4 puntos", "Bumerán", "Molinillo", "Anillo corte", "Halcón", "Cruz de cristal", "Ventolera", "Serpiente bicéfala", "Shuriken espiral", "Super bola", "Shuriken mágico", "Sol naciente", "Oritsuru", "Conformar", "M-fono amarillo", "M-fono verde", "M-fono azul", "M-fono rojo", "M-fono cristal", "M-fono blanco", "M-fono negro", "M-fono plata", "Armazón", "M-fono oro", "Trompeta", "Fono de luz", "Grito de PG", "Mercurio", "Bala", "Cañón corto", "Lazo", "Winchester", "Pacificador", "Línea", "Cañón largo R", "Rifle", "CR francotirador", "Super ST", "Forastero", "Pena de muerte", "Masamune" }
arm_names['spa'] = { "Aro de bronce", "Aro de hierro", "Aro de titanio", "Aro de mitrilo", "Aro de carbono", "Aro de plata", "Aro de oro", "Aro de diamante", "Aro de cristal", "Aro de platino", "Aro de runa", "Abrigo", "Aro de mago", "Aro de adamán", "Aro de gigas", "Guardia imperial", "Aro de Aegis", "Cuarto aro", "Aro de guerrero", "Beta Shinra", "Alfa Shinra", "4 ranuras", "Aro de fuego", "Aro de aurora", "Aro de rayo", "Aro de dragón", "Aro de Minerva", "Guardia escolta", "Mitrilo", "Cesador", "Reloj precioso", "Choco-aro" }
acc_names['spa'] = { "Muñeca poder", "Protector", "Arete", "Talismán", "Pluma choco", "Amuleto", "Cinturón campeón", "Anillo veneno", "Anillo fuerte", "Círculo", "Medallón estrella", "Vasos plata", "Diadema", "Anillo hada", "Anillo gema", "Capa blanca", "Zapatillas", "Anillo paz", "Cinta", "Anillo fuego", "Anillo hielo", "Anillo rayo", "Tetra elemental", "Trozo seguridad", "Anillo furia", "Anillo mala suerte", "Anillo protector", "Cascabel", "Anillo reflejo", "Anillo agua", "Guante furtivo", "Hipnocorona" }
mat_names['spa'] = { "Super PM", "Super PG", "Super Velocidad  ", "Super Magia", "Super suerte", "Super EXP", "Super Gil Plus", "Enemigo alejado", "Atrae-enemigos", "Atrae-Chocobo", "Prevacíos", "Larga fila", "Mega Todo", "Contraataque", "Fulminar a todos", "Corte doble", "Cubrir", "Subacuático", "PG&lt;-&gt;PM", "Magia W", "Invocación W", "Elemento W", "Todos", "Contar", "Oposición mágica", "Turbo PM", "Absorción PM", "Absorción PG", "Elemental", "Efecto añadido", "Ataque furtivo", "Ataque final", "Corte añadido", "Robo simultáneo", "Cuadrimagia", "Robar", "Sentir", "Lanzar", "Morfo", "Golpe mortal", "Manipular", "Gesticular", "Habil. enemiga", "Comando maestro", "Fuego", "Hielo", "Tierra", "Rayo", "Recuperar", "Sanar", "Revivir", "Sellar", "Mitificar", "Transformar", "Salir", "Envenenar", "Gravedad", "Barrera", "Cometa", "Tiempo", "Destruir", "Contener", "Cura total", "Escudo", "Ûltima", "Magia maestra", "Choco/Mog", "Shiva", "Ifrit", "Ramuh", "Titán", "Odín", "Leviatán", "Bahamut", "Kujata", "Alejandro", "Fénix", "Neo Bahamut", "Hades", "Typhon", "Bahamut CERO", "Cab. de la Mesa R.", "Invocar Maestro" }
key_names['spa'] = { "Vestido de algodón", "Vestido de satén", "Vestido de seda", "Peluca", "Peluca teñida", "Peluca rubia", "Diadema cristal", "Diadema rubí", "Diadema diamante", "Colonia", "Colonia floral", "Colonia sexy", "Tarjeta de miembro", "Lencería", "Bragas misterio", "Bragas bikini", "Cupones farmacia", "Desinfectante", "Desodorante", "Digestivo", "Materia enorme", "Materia enorme", "Materia enorme", "Materia enorme", "Clave a los Ancianos", "Carta a una hija", "Carta a esposa", "Arpa lunar", "Llave sótano", "Llave sector 5", "Tarjeta 60", "Tarjeta 62", "Tarjeta 65", "Tarjeta 66", "Tarjeta 68", "Piezas Midgar", "Piezas Midgar", "Piezas Midgar", "Piezas Midgar", "Piezas Midgar", "PHS", "Ticket de oro", "Piedra angular", "Escamas Leviatán", "Mapa glaciar", "Cupón A", "Cupón B", "Cupón C", "Materia Negra", "Mitrilo", "Snowboard" }
chr_names['spa'] = { "Cloud", "Barret", "Tifa", "Aeris", "Red XIII", "Yuffie", "Cait Sith / Cloud pasado", "Vincent / Sephiroth pasado", "Cid" }
sta_names['spa'] = { "Muerte", "Muerte cerca", "Sue", "Veneno", "Tristeza", "Furia", "Confusión", "Silencio", "Prisa", "Lento", "Alto", "Rana", "Pequeña", "Adormecer", "Petrificación", "Regenerar", "Barrera", "BarreraM", "Reflejo", "Doble", "Pena capital", "Manipular", "Locura", "Sin igual", "Paralizar", "Oscuridad", "Elemento" }
elem_names['spa'] = { "Fuego", "Hielo", "Rayo", "Tierra", "Veneno", "Gravedad", "Agua", "Viento", "Sacro" }
drop_down_link_tables = { ['x'] = { { 1, ['eng'] = "", ['fre'] = "", ['spa'] = "", ['ger'] = "" }, { 2, ['eng'] = "", ['fre'] = "", ['spa'] = "", ['ger'] = "" } }, ['weapon_range_template'] = { dmui = true, osdp = true, mrdvldl = true, { 3, ['eng'] = "Long Range", ['fre'] = "Longue portée", ['spa'] = "De largo alcance", ['ger'] = "Langstrecken" }, { 35, ['eng'] = "Close Range", ['fre'] = "Courte portée", ['spa'] = "Quemarropa", ['ger'] = "Kurze Reichweite" } }, ['materia_growth_template'] = { dmui = true, osdp = true, mrdvldl = true, { 0, ['eng'] = "Nothing", ['fre'] = "Rien", ['spa'] = "Nada", ['ger'] = "Nichts" }, { 1, ['eng'] = "Normal", ['fre'] = "Normal", ['spa'] = "Normal", ['ger'] = "Normal" }, { 2, ['eng'] = "Double", ['fre'] = "Double", ['spa'] = "Doble", ['ger'] = "Verdoppeln" }, { 3, ['eng'] = "Triple", ['fre'] = "Triple", ['spa'] = "Triple", ['ger'] = "Dreifach" } }, ['chocobo_gender_template'] = { dmui = true, osdp = true, mrdvldl = true, { 0, ['eng'] = "Male", ['fre'] = "Mâle", ['spa'] = "Masculino", ['ger'] = "Männlich" }, { 1, ['eng'] = "Female", ['fre'] = "Femelle", ['spa'] = "Hembra", ['ger'] = "Weiblich" } }, ['chocobo_colour_template'] = { dmui = true, osdp = true, mrdvldl = true, { 0, ['eng'] = "Yellow", ['fre'] = "Jaune", ['spa'] = "Amarillo", ['ger'] = "Gelb" }, { 1, ['eng'] = "Green", ['fre'] = "vert", ['spa'] = "Verde", ['ger'] = "Grün" }, { 2, ['eng'] = "Blue", ['fre'] = "Bleu", ['spa'] = "Azul", ['ger'] = "Blau" }, { 3, ['eng'] = "Black", ['fre'] = "Noir", ['spa'] = "Negro", ['ger'] = "Schwarz" }, { 4, ['eng'] = "Gold", ['fre'] = "Or", ['spa'] = "Oro", ['ger'] = "Gold" } }, ['armour_stat_bonus_template'] = { dmui = true, osdp = true, mrdvldl = true, { 255, ['eng'] = "None", ['fre'] = "Aucun", ['spa'] = "Ninguna", ['ger'] = "Keiner" }, { 0, ['eng'] = "Strength", ['fre'] = "Force", ['spa'] = "Fuerza", ['ger'] = "Stärke" }, { 1, ['eng'] = "Vitality", ['fre'] = "Vitalité", ['spa'] = "Vitalidad", ['ger'] = "Vitalität" }, { 2, ['eng'] = "Magic", ['fre'] = "Magie", ['spa'] = "Mágico", ['ger'] = "Zauber" }, { 3, ['eng'] = "Spirit", ['fre'] = "Esprit", ['spa'] = "Espíritu", ['ger'] = "Geist" }, { 4, ['eng'] = "Dexterity", ['fre'] = "Dextérité", ['spa'] = "Destreza", ['ger'] = "Geschicklichkeit" }, { 5, ['eng'] = "Luck", ['fre'] = "Chance", ['spa'] = "Suerte", ['ger'] = "Glück" } } }
advanced_drop_down_links = { { "armour_stat_bonus_template", { 255, "0:5" }, { tr.none, tr.str, tr.vit, tr.mag, tr.spi, tr.dex, tr.luc } }, { "auto_status_template", { 255, "0:3", 6 }, { tr.none, tr.haste, tr.berserk, tr.doom, tr.reflect, tr.barrier } }, { "chocobo_colour_template", { "0:4" }, { tr.yellow, tr.green, tr.blue, tr.black, tr.gold } }, { "chocobo_gender_template", { 0, 1 }, { tr.male, tr.female } }, { "elemental_defense_type_template", { 255, "0:2" }, { tr.none, tr.absorb, tr.invalid, tr.halve } }, { "equippable_character_template", { 255, 0, 1, 2, 4, 8, 16, 32, 64, 128 }, { tr.everyone, "Cid", "Cloud", "Barret", "Tifa", "Aeris", "Red XIII", "Yuffie", "Cait Sith", "Vincent" } }, { "equipped_accessory_template", { 255, "0:31" }, { tr.empty, acc_names } }, { "equipped_armour_template", "0:31", arm_names }, { "equipped_weapon_template", "0:127", wpn_names }, { "has_protection_template", { 0, 1 }, { tr.unprotected, tr.protected } }, { "materia_exp_template", { 16777215 }, { tr.master } }, { "materia_growth_template", "0:3", { tr.nothing, tr.normal, tr.double, tr.triple } }, { "materia_id_template", { 255, "0:21", "23:37", "39:44", "48:62", "64:65", "68:90" }, { tr.empty, mat_names } }, { "materia_slots_template", { "0000", "0005", "0505", "0706", "0302" }, { tr.empty, "[ · ]", "[ · ]  [ · ]", "[ · ]==[ · ]", "[O]==[O]" } }, { "menu_item_id_template", { 65535, "0:104", "128:319" }, { tr.empty, itm_names, wpn_names, arm_names, acc_names } }, { "menu_status_effect_template", { 0, 16, 32 }, { tr.none, tr.sad, tr.fury } }, { "weapon_range_template", { 3, 35 }, { tr.range_l, tr.range_c } }, { "weapon_stat_bonus_template", { 255 }, { tr.none } }, { "menu_options_template", { 0, 1 }, { tr.unavailable, tr.available } }, { "weapon_status_effect_template", { 255, "0:26" }, { tr.none, sta_names } } }
function update_dropdown_link_tables(I)
if I == "__test__" then
print("Running test version of update_dropdown_link_tables() with following table")
local ac = create_mr()
ac.Description = "Test memory record created by update_dropdown_link_tables"
local c_ = create_number_list("0:127")
print("Number list")
recursive_print(c_)
local eA = create_numbered_table(c_, wpn_names["fre"])
print("Numbered table")
recursive_print(eA)
local eB = create_dropdown_string(eA)
print("Dropdown string\n" .. eB)
set_dropdown_list(ac, eB)
return
end ;
debugPrint(2, "Updating dropdown link tables", nil, "update_dropdown_link_tables")
local eC = force_lang or current_lang;
for q = 1, #advanced_drop_down_links do
local eD = advanced_drop_down_links[q]
local ac = get_mr_desc(eD[1])
local c_ = create_number_list(eD[2])
local H;
if type(eD[3]) == "table" and eD[3][eC] then H = eD[3][eC] else
local eE = {}
for a2 = 1, #eD[3] do if type(eD[3][a2]) == "table" then table.insert(eE, eD[3][a2][eC]) else table.insert(eE,
eD[3][a2]) end end ;
H = table.flatten(eE)
end ;
debugPrint(5,
"Number list (" .. #c_ .. ")\n" .. string.pstring(c_) .. "\nString list (" .. #H .. ")\n" .. string.pstring(H),
nil, "update_dropdown_link_tables")
local eA = create_numbered_table(c_, H)
local eB = create_dropdown_string(eA)
set_dropdown_list(ac, eB)
end
end;
function update_memrec_names()
debugPrint(2, "Updating memory record names (applying localisation)", nil, "update_dropdown_link_tables")
for q = 1, #table_names do
local ac = get_mr_desc(table_names[q].def)
if ac then
table_names[q].id = ac.ID;
if table_names[q][current_lang] and #table_names[q][current_lang] &gt; 0 then ac.Description = table_names[q][current_lang] else ac.Description = table_names[q].eng end
end
end
end;
function revert_memrec_names()
debugPrint(2, "Reverting memory record names to their defaults", nil, "revert_memrec_names")
for q = 1, #table_names do
local ac = get_mr_id(table_names[q].id)
if ac then ac.Description = table_names[q].def end
end
end;
function load_translations()
debugPrint(2, "Loading translations and localisations", nil, "load_translations")
set_data()
update_memrec_names()
update_dropdown_link_tables()
end;
function unload_translations()
debugPrint(2, "Unloading translations and localisations", nil, "unload_translations")
revert_memrec_names()
current_lang = nil
end;
function guess_ps1_values(cN)
cN.current_roster = cN.menu_items_base - 0x4;
cN.materia_base = cN.menu_items_base + 0x280;
cN.gil = cN.menu_items_base + 0x680;
cN.total_play_time = cN.menu_items_base + 0x684;
cN.save_phs = cN.menu_items_base + 0x6C6;
cN.key_items = cN.menu_items_base + 0x6E8;
cN.chocobo_stats_1_base = cN.menu_items_base + 0x8C8;
cN.chocobo_stats_2_base = cN.menu_items_base + 0x9EC;
cN.config_menu_settings = cN.menu_items_base + 0xBDC;
cN.post_battle = cN.menu_items_base + 0xBF8;
cN.debug_mode_2 = cN.current_screen + 0xB9A or unimplemented;
cN.random_battles_world_enabled = cN.random_battles_world + 4 or unimplemented;
cN.random_battles_world_loop_count = cN.random_battles_world + 9 or unimplemented;
cN.random_battles_world_loop_tick = cN.random_battles_world + 8 or unimplemented;
cN.random_battles_world_safe_distance = cN.random_battles_world or unimplemented;
cN.menu_rgb_offset = 3
end;
function guess_steam_values(cN)
cN.random_battles_world_safe_distance = cN.random_battles_world or unimplemented;
cN.random_battles_world_loop_tick = cN.random_battles_world or unimplemented;
cN.random_battles_world_loop_count = cN.random_battles_world + 0xD or unimplemented;
cN.random_battles_world_enabled = cN.random_battles_world + 0x14 or unimplemented;
cN.menu_rgb_offset = 4;
cN.post_battle = cN.post_battle + 0x0;
cN.battle_atb_base = cN.post_battle + 0xA855;
cN.battle_limit_break_base = cN.post_battle + 0xAB00;
cN.battle_stats_base = cN.post_battle + 0xCE48;
cN.battle_items_base = cN.post_battle + 0xE094;
cN.random_battles_field = cN.post_battle + 0x3233A8;
cN.menu_stats_base = cN.gil - 0x641A;
cN.accessory_stats_base = cN.menu_stats_base + 0x2646;
cN.armour_stats_base = cN.menu_stats_base + 0x2846;
cN.weapon_stats_base = cN.menu_stats_base + 0x4296;
cN.real_stats_base = cN.menu_stats_base + 0x58F4;
cN.current_roster = cN.menu_stats_base + 0x5D96;
cN.menu_items_base = cN.menu_stats_base + 0x5D9A;
cN.materia_base = cN.menu_stats_base + 0x601A;
cN.gil = cN.menu_stats_base + 0x641A;
cN.total_play_time = cN.menu_stats_base + 0x641E;
cN.save_phs = cN.menu_stats_base + 0x6460;
cN.key_items = cN.menu_stats_base + 0x6482;
cN.chocobo_stats_1_base = cN.menu_stats_base + 0x6662;
cN.chocobo_stats_2_base = cN.menu_stats_base + 0x6786;
cN.config_menu_settings = cN.menu_stats_base + 0x6976
end;
unimplemented = 0x7FFFFFFFFFFF;
default_values = {}
dv = default_values;
dv.total_play_time = unimplemented;
dv.menu_items_base = unimplemented;
dv.menu_stats_base = unimplemented;
dv.menu_stats_offset = 0x440;
dv.battle_items_base = unimplemented;
dv.materia_base = unimplemented;
dv.real_stats_base = unimplemented;
dv.real_stats_offset = 0x84;
dv.gil = unimplemented;
dv.post_battle = unimplemented;
dv.save_phs = unimplemented;
dv.weapon_stats_base = unimplemented;
dv.weapon_stats_offset = 0x2C;
dv.armour_stats_base = unimplemented;
dv.armour_stats_offset = 0x24;
dv.chocobo_stats_1_base = unimplemented;
dv.chocobo_stats_1_offset = 0x10;
dv.chocobo_stats_2_base = unimplemented;
dv.chocobo_stats_2_offset = 0x2;
dv.config_menu_settings = unimplemented;
dv.battle_stats_base = unimplemented;
dv.battle_stats_offset = 0x68;
dv.battle_atb_base = unimplemented;
dv.battle_atb_offset = 0x44;
dv.battle_limit_break_base = unimplemented;
dv.battle_limit_break_offset = 0x34;
dv.enemy_stats_offset = 0x68;
dv.current_roster = unimplemented;
dv.random_battles_world = unimplemented;
dv.random_battles_world_enabled = unimplemented;
dv.random_battles_world_loop_count = unimplemented;
dv.random_battles_world_loop_tick = unimplemented;
dv.random_battles_world_safe_distance = unimplemented;
dv.random_battles_field = unimplemented;
dv.menu_rgb = unimplemented;
dv.menu_rgb_offset = unimplemented;
dv.current_screen = unimplemented;
dv.debug_mode_2 = unimplemented;
dv.key_items = unimplemented;
dv.accessory_stats_base = unimplemented;
dv.accessory_stats_offset = 0x10;
FF7_PSX_NTSC_US = deep_copy(default_values)
ff7_us = FF7_PSX_NTSC_US;
ff7_us.menu_items_base = 0x9CBE0;
ff7_us.menu_stats_base = 0x9D84E;
ff7_us.battle_stats_base = 0xF840C;
ff7_us.battle_atb_base = 0xF5BBD;
ff7_us.battle_limit_break_base = 0x9D866;
ff7_us.battle_items_base = 0x1671B8;
ff7_us.real_stats_base = 0x9C73A;
ff7_us.post_battle = 0x9D7D8;
ff7_us.weapon_stats_base = 0x738A0;
ff7_us.armour_stats_base = 0x71E44;
ff7_us.accessory_stats_base = 0x71C24;
ff7_us.accessory_stats_offset = 0x10;
ff7_us.random_battles_field = 0x7173C;
ff7_us.random_battles_world = 0x11627C;
ff7_us.random_battles_world_safe_distance = ff7_us.random_battles_world;
ff7_us.random_battles_world_enabled = ff7_us.random_battles_world + 4;
ff7_us.random_battles_world_loop_count = ff7_us.random_battles_world + 9;
ff7_us.random_battles_world_loop_tick = ff7_us.random_battles_world + 8;
ff7_us.menu_rgb = 0x49208;
ff7_us.current_screen = 0x9A05C;
ff7_us.debug_mode_2 = 0x9ABF6;
ff7_us.battle_limit_break_base = 0xF5E68;
ff7_us.battle_limit_break_offset = 0x34;
guess_ps1_values(ff7_us)
FF7_PSX_NTSC_JP_International = deep_copy(default_values)
ff7_int = FF7_PSX_NTSC_JP_International;
ff7_int.armour_stats_base = 0x71CAC;
ff7_int.battle_items_base = 0x1675B4;
ff7_int.menu_items_base = 0x9C230;
ff7_int.menu_stats_base = 0x9CE9E;
ff7_int.random_battles_field = 0x715A4;
ff7_int.real_stats_base = 0x9BD8A;
ff7_int.weapon_stats_base = 0x73708;
ff7_int.battle_stats_base = 0xF8808;
ff7_int.current_screen = 0x996B0;
ff7_int.battle_atb_base = 0xF5FB9;
ff7_int.battle_limit_break_base = 0xF6264;
ff7_int.random_battles_world = 0x11624C;
ff7_int.menu_rgb = 0x49040;
ff7_int.accessory_stats_base = 0x71A8C;
guess_ps1_values(ff7_int)
FF7_PSX_PAL_UK = deep_copy(default_values)
ff7_uk = FF7_PSX_PAL_UK;
ff7_uk.menu_items_base = 0x9CAAC;
ff7_uk.key_items = 0x9D194;
ff7_uk.menu_stats_base = 0x9D71A;
ff7_uk.real_stats_base = 0x9C606;
ff7_uk.weapon_stats_base = 0x73784;
ff7_uk.armour_stats_base = 0x71D28;
ff7_uk.random_battles_field = 0x71620;
ff7_uk.current_screen = 0x99F2C;
ff7_uk.random_battles_world = 0x116240;
ff7_uk.battle_stats_base = 0xF8420;
ff7_uk.battle_limit_break_base = 0xF5E7C;
ff7_uk.battle_limit_break_offset = 0x34;
ff7_uk.battle_items_base = 0x1671CC;
ff7_uk.battle_atb_base = 0xF5BD1;
ff7_uk.menu_rgb = 0x1D252C;
ff7_uk.accessory_stats_base = 0x71B08;
guess_ps1_values(ff7_uk)
ff7_steam_ENGLISH_v_1_0_9 = deep_copy(default_values)
ff7_en = ff7_steam_ENGLISH_v_1_0_9;
ff7_en.gil = 0x9C08B4;
ff7_en.post_battle = 0x59E2C0;
ff7_en.random_battles_world = 0xA3A87C;
ff7_en.menu_rgb = 0x51EFC8;
guess_steam_values(ff7_en)
ff7_steam_FRENCH_v_1_0_9 = deep_copy(default_values)
ff7_fr = ff7_steam_FRENCH_v_1_0_9;
ff7_fr.random_battles_world = 0xA18048;
ff7_fr.post_battle = 0x5A00B0;
ff7_fr.menu_rgb = 0x595F40;
ff7_fr.gil = 0xB3A5F4;
guess_steam_values(ff7_fr)
ff7_steam_GERMAN_v_1_0_9 = deep_copy(default_values)
ff7_de = ff7_steam_GERMAN_v_1_0_9;
ff7_de.gil = 0xB395E4;
ff7_de.random_battles_world = 0xA17018;
ff7_de.post_battle = 0x59F080;
ff7_de.menu_rgb = 0x595AA8;
guess_steam_values(ff7_de)
ff7_steam_SPANISH_v_1_0_9 = deep_copy(default_values)
ff7_es = ff7_steam_SPANISH_v_1_0_9;
ff7_es.gil = 0xB3B0C4;
ff7_es.post_battle = 0x5A0B10;
ff7_es.random_battles_world = 0xA18AA8;
ff7_es.menu_rgb = 0x596D80;
guess_steam_values(ff7_es)
steam_versions = { { "FF7_EN", "Final Fantasy VII for Steam (English)", ff7_steam_ENGLISH_v_1_0_9, "eng" }, { "FF7_FR", "Final Fantasy VII pour Steam (Français)", ff7_steam_FRENCH_v_1_0_9, "fre" }, { "FF7_ES", "Final Fantasy VII para Steam (Español)", ff7_steam_SPANISH_v_1_0_9, "spa" }, { "FF7_DE", "Final Fantasy VII für Steam (Deutsche)", ff7_steam_GERMAN_v_1_0_9, "ger" } }
playstation_versions = { { "Final Fantasy VII for PlayStation (NTSC-U USA)", { "SCUS_94163", "SCUS_94164", "SCUS_94165" }, FF7_PSX_NTSC_US, "eng" }, { "Final Fantasy VII International for PlayStation (NTSC-J Japan)", { "SLPS_01057", "SLPS_01058", "SLPS_01059", "SLPS_01060" }, FF7_PSX_NTSC_JP_International, "eng" }, { "Final Fantasy VII for PlayStation (PAL Europe)", { "SCES_00867", "SCES_10867", "SCES_20867" }, FF7_PSX_PAL_UK, "eng" } }

debug_ = 0
set_base_mem()
-- force_lang = "eng" -- "fre" / "eng" / "ger" / "spa"
memrec.description = load_ff7_config()
load_translations()

{$asm}
 
 
[DISABLE]
{$lua}

unload_translations()
memrec.description = "Activate / Activar / Activer / Aktivieren"
child_deactivator(memrec, true)

{$asm}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4942</ID>
          <Description>"&lt;cheats_menu&gt;"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>7081</ID>
              <Description>"&lt;inventory_cheats&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>4995</ID>
                  <Description>"&lt;infinite_items_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}
local item_quantity = 99
local i_q = item_quantity * 2
local menu_items_bytes = {0x00, i_q, 0x01, i_q, 0x02, i_q, 0x03, i_q, 0x04, i_q, 0x05, i_q, 0x06, i_q, 0x07, i_q, 0x08, i_q, 0x09, i_q, 0x0A, i_q, 0x0B, i_q, 0x0C, i_q, 0x0D, i_q, 0x0E, i_q, 0x0F, i_q, 0x10, i_q, 0x11, i_q, 0x12, i_q, 0x13, i_q, 0x14, i_q, 0x15, i_q, 0x16, i_q, 0x17, i_q, 0x18, i_q, 0x19, i_q, 0x1A, i_q, 0x1B, i_q, 0x1C, i_q, 0x1D, i_q, 0x1E, i_q, 0x1F, i_q, 0x20, i_q, 0x21, i_q, 0x22, i_q, 0x23, i_q, 0x24, i_q, 0x25, i_q, 0x26, i_q, 0x27, i_q, 0x28, i_q, 0x29, i_q, 0x2A, i_q, 0x2B, i_q, 0x2C, i_q, 0x2D, i_q, 0x2E, i_q, 0x2F, i_q, 0x30, i_q, 0x31, i_q, 0x32, i_q, 0x33, i_q, 0x34, i_q, 0x35, i_q, 0x36, i_q, 0x37, i_q, 0x38, i_q, 0x39, i_q, 0x3A, i_q, 0x3B, i_q, 0x3C, i_q, 0x3D, i_q, 0x3E, i_q, 0x3F, i_q, 0x40, i_q, 0x41, i_q, 0x42, i_q, 0x43, i_q, 0x44, i_q, 0x45, i_q, 0x46, i_q, 0x47, i_q, 0x48, i_q, 0x49, i_q, 0x4A, i_q, 0x4B, i_q, 0x4C, i_q, 0x4D, i_q, 0x4E, i_q, 0x4F, i_q, 0x50, i_q, 0x51, i_q, 0x52, i_q, 0x53, i_q, 0x54, i_q, 0x55, i_q, 0x56, i_q, 0x57, i_q, 0x58, i_q, 0x59, i_q, 0x5A, i_q, 0x5B, i_q, 0x5C, i_q, 0x5D, i_q, 0x5E, i_q, 0x5F, i_q, 0x60, i_q, 0x61, i_q, 0x62, i_q, 0x63, i_q, 0x64, i_q, 0x65, i_q, 0x66, i_q, 0x67, i_q, 0x68, i_q, 0x00, i_q+1, 0x01, i_q+1, 0x02, i_q+1, 0x03, i_q+1, 0x04, i_q+1, 0x05, i_q+1, 0x06, i_q+1, 0x07, i_q+1, 0x08, i_q+1, 0x09, i_q+1, 0x0A, i_q+1, 0x0B, i_q+1, 0x0C, i_q+1, 0x0D, i_q+1, 0x0E, i_q+1, 0x0F, i_q+1, 0x10, i_q+1, 0x11, i_q+1, 0x12, i_q+1, 0x13, i_q+1, 0x14, i_q+1, 0x15, i_q+1, 0x16, i_q+1, 0x17, i_q+1, 0x18, i_q+1, 0x19, i_q+1, 0x1A, i_q+1, 0x1B, i_q+1, 0x1C, i_q+1, 0x1D, i_q+1, 0x1E, i_q+1, 0x1F, i_q+1, 0x20, i_q+1, 0x21, i_q+1, 0x22, i_q+1, 0x23, i_q+1, 0x24, i_q+1, 0x25, i_q+1, 0x26, i_q+1, 0x27, i_q+1, 0x28, i_q+1, 0x29, i_q+1, 0x2A, i_q+1, 0x2B, i_q+1, 0x2C, i_q+1, 0x2D, i_q+1, 0x2E, i_q+1, 0x2F, i_q+1, 0x30, i_q+1, 0x31, i_q+1, 0x32, i_q+1, 0x33, i_q+1, 0x34, i_q+1, 0x35, i_q+1, 0x36, i_q+1, 0x37, i_q+1, 0x38, i_q+1, 0x39, i_q+1, 0x3A, i_q+1, 0x3B, i_q+1, 0x3C, i_q+1, 0x3D, i_q+1, 0x3E, i_q+1, 0x3F, i_q+1, 0x80, i_q, 0x81, i_q, 0x82, i_q, 0x83, i_q, 0x84, i_q, 0x85, i_q, 0x86, i_q, 0x87, i_q, 0x88, i_q, 0x89, i_q, 0x8A, i_q, 0x8B, i_q, 0x8C, i_q, 0x8D, i_q, 0x8E, i_q, 0x8F, i_q, 0x90, i_q, 0x91, i_q, 0x92, i_q, 0x93, i_q, 0x94, i_q, 0x95, i_q, 0x96, i_q, 0x97, i_q, 0x98, i_q, 0x99, i_q, 0x9A, i_q, 0x9B, i_q, 0x9C, i_q, 0x9D, i_q, 0x9E, i_q, 0x9F, i_q, 0xA0, i_q, 0xA1, i_q, 0xA2, i_q, 0xA3, i_q, 0xA4, i_q, 0xA5, i_q, 0xA6, i_q, 0xA7, i_q, 0xA8, i_q, 0xA9, i_q, 0xAA, i_q, 0xAB, i_q, 0xAC, i_q, 0xAD, i_q, 0xAE, i_q, 0xAF, i_q, 0xB0, i_q, 0xB1, i_q, 0xB2, i_q, 0xB3, i_q, 0xB4, i_q, 0xB5, i_q, 0xB6, i_q, 0xB7, i_q, 0xB8, i_q, 0xB9, i_q, 0xBA, i_q, 0xBB, i_q, 0xBC, i_q, 0xBD, i_q, 0xBE, i_q, 0xBF, i_q, 0xC0, i_q, 0xC1, i_q, 0xC2, i_q, 0xC3, i_q, 0xC4, i_q, 0xC5, i_q, 0xC6, i_q, 0xC7, i_q, 0xC8, i_q, 0xC9, i_q, 0xCA, i_q, 0xCB, i_q, 0xCC, i_q, 0xCD, i_q, 0xCE, i_q, 0xCF, i_q, 0xD0, i_q, 0xD1, i_q, 0xD2, i_q, 0xD3, i_q, 0xD4, i_q, 0xD5, i_q, 0xD6, i_q, 0xD7, i_q, 0xD8, i_q, 0xD9, i_q, 0xDA, i_q, 0xDB, i_q, 0xDC, i_q, 0xDD, i_q, 0xDE, i_q, 0xDF, i_q, 0xE0, i_q, 0xE1, i_q, 0xE2, i_q, 0xE3, i_q, 0xE4, i_q, 0xE5, i_q, 0xE6, i_q, 0xE7, i_q, 0xE8, i_q, 0xE9, i_q, 0xEA, i_q, 0xEB, i_q, 0xEC, i_q, 0xED, i_q, 0xEE, i_q, 0xEF, i_q, 0xF0, i_q, 0xF1, i_q, 0xF2, i_q, 0xF3, i_q, 0xF4, i_q, 0xF5, i_q, 0xF6, i_q, 0xF7, i_q, 0xF8, i_q, 0xF9, i_q, 0xFA, i_q, 0xFB, i_q, 0xFC, i_q, 0xFD, i_q, 0xFE, i_q}
local menu_items_bytes_sorted = {0x00, i_q, 0x01, i_q, 0x02, i_q, 0x03, i_q, 0x04, i_q, 0x05, i_q, 0x06, i_q, 0x07, i_q, 0x08, i_q, 0x09, i_q, 0x0A, i_q, 0x0B, i_q, 0x0C, i_q, 0x0D, i_q, 0x0E, i_q, 0x0F, i_q, 0x10, i_q, 0x11, i_q, 0x12, i_q, 0x13, i_q, 0x14, i_q, 0x15, i_q, 0x16, i_q, 0x17, i_q, 0x18, i_q, 0x19, i_q, 0x1A, i_q, 0x1B, i_q, 0x1C, i_q, 0x1D, i_q, 0x1E, i_q, 0x1F, i_q, 0x20, i_q, 0x21, i_q, 0x22, i_q, 0x23, i_q, 0x24, i_q, 0x25, i_q, 0x26, i_q, 0x27, i_q, 0x28, i_q, 0x29, i_q, 0x2A, i_q, 0x2B, i_q, 0x2C, i_q, 0x2D, i_q, 0x2E, i_q, 0x2F, i_q, 0x30, i_q, 0x31, i_q, 0x32, i_q, 0x33, i_q, 0x34, i_q, 0x35, i_q, 0x36, i_q, 0x37, i_q, 0x38, i_q, 0x39, i_q, 0x3A, i_q, 0x3B, i_q, 0x3C, i_q, 0x3D, i_q, 0x3E, i_q, 0x3F, i_q, 0x40, i_q, 0x41, i_q, 0x42, i_q, 0x43, i_q, 0x44, i_q, 0x45, i_q, 0x46, i_q, 0x47, i_q, 0x48, i_q, 0x49, i_q, 0x4A, i_q, 0x4B, i_q, 0x4C, i_q, 0x4D, i_q, 0x4E, i_q, 0x4F, i_q, 0x50, i_q, 0x51, i_q, 0x52, i_q, 0x53, i_q, 0x54, i_q, 0x55, i_q, 0x56, i_q, 0x57, i_q, 0x58, i_q, 0x59, i_q, 0x5A, i_q, 0x5B, i_q, 0x5C, i_q, 0x5D, i_q, 0x5E, i_q, 0x5F, i_q, 0x60, i_q, 0x61, i_q, 0x62, i_q, 0x63, i_q, 0x64, i_q, 0x65, i_q, 0x66, i_q, 0x67, i_q, 0x68, i_q, 0x80, i_q, 0x81, i_q, 0x82, i_q, 0x83, i_q, 0x84, i_q, 0x85, i_q, 0x86, i_q, 0x87, i_q, 0x88, i_q, 0x89, i_q, 0x8A, i_q, 0x8B, i_q, 0x8C, i_q, 0x8D, i_q, 0x8E, i_q, 0x8F, i_q, 0x90, i_q, 0x91, i_q, 0x92, i_q, 0x93, i_q, 0x94, i_q, 0x95, i_q, 0x96, i_q, 0x97, i_q, 0x98, i_q, 0x99, i_q, 0x9A, i_q, 0x9B, i_q, 0x9C, i_q, 0x9D, i_q, 0x9E, i_q, 0x9F, i_q, 0xA0, i_q, 0xA1, i_q, 0xA2, i_q, 0xA3, i_q, 0xA4, i_q, 0xA5, i_q, 0xA6, i_q, 0xA7, i_q, 0xA8, i_q, 0xA9, i_q, 0xAA, i_q, 0xAB, i_q, 0xAC, i_q, 0xAD, i_q, 0xAE, i_q, 0xAF, i_q, 0xB0, i_q, 0xB1, i_q, 0xB2, i_q, 0xB3, i_q, 0xB4, i_q, 0xB5, i_q, 0xB6, i_q, 0xB7, i_q, 0xB8, i_q, 0xB9, i_q, 0xBA, i_q, 0xBB, i_q, 0xBC, i_q, 0xBD, i_q, 0xBE, i_q, 0xBF, i_q, 0xC0, i_q, 0xC1, i_q, 0xC2, i_q, 0xC3, i_q, 0xC4, i_q, 0xC5, i_q, 0xC6, i_q, 0xC7, i_q, 0xC8, i_q, 0xC9, i_q, 0xCA, i_q, 0xCB, i_q, 0xCC, i_q, 0xCD, i_q, 0xCE, i_q, 0xCF, i_q, 0xD0, i_q, 0xD1, i_q, 0xD2, i_q, 0xD3, i_q, 0xD4, i_q, 0xD5, i_q, 0xD6, i_q, 0xD7, i_q, 0xD8, i_q, 0xD9, i_q, 0xDA, i_q, 0xDB, i_q, 0xDC, i_q, 0xDD, i_q, 0xDE, i_q, 0xDF, i_q, 0xE0, i_q, 0xE1, i_q, 0xE2, i_q, 0xE3, i_q, 0xE4, i_q, 0xE5, i_q, 0xE6, i_q, 0xE7, i_q, 0xE8, i_q, 0xE9, i_q, 0xEA, i_q, 0xEB, i_q, 0xEC, i_q, 0xED, i_q, 0xEE, i_q, 0xEF, i_q, 0xF0, i_q, 0xF1, i_q, 0xF2, i_q, 0xF3, i_q, 0xF4, i_q, 0xF5, i_q, 0xF6, i_q, 0xF7, i_q, 0xF8, i_q, 0xF9, i_q, 0xFA, i_q, 0xFB, i_q, 0xFC, i_q, 0xFD, i_q, 0xFE, i_q, 0x00, i_q+1, 0x01, i_q+1, 0x02, i_q+1, 0x03, i_q+1, 0x04, i_q+1, 0x05, i_q+1, 0x06, i_q+1, 0x07, i_q+1, 0x08, i_q+1, 0x09, i_q+1, 0x0A, i_q+1, 0x0B, i_q+1, 0x0C, i_q+1, 0x0D, i_q+1, 0x0E, i_q+1, 0x0F, i_q+1, 0x10, i_q+1, 0x11, i_q+1, 0x12, i_q+1, 0x13, i_q+1, 0x14, i_q+1, 0x15, i_q+1, 0x16, i_q+1, 0x17, i_q+1, 0x18, i_q+1, 0x19, i_q+1, 0x1A, i_q+1, 0x1B, i_q+1, 0x1C, i_q+1, 0x1D, i_q+1, 0x1E, i_q+1, 0x1F, i_q+1, 0x20, i_q+1, 0x21, i_q+1, 0x22, i_q+1, 0x23, i_q+1, 0x24, i_q+1, 0x25, i_q+1, 0x26, i_q+1, 0x27, i_q+1, 0x28, i_q+1, 0x29, i_q+1, 0x2A, i_q+1, 0x2B, i_q+1, 0x2C, i_q+1, 0x2D, i_q+1, 0x2E, i_q+1, 0x2F, i_q+1, 0x30, i_q+1, 0x31, i_q+1, 0x32, i_q+1, 0x33, i_q+1, 0x34, i_q+1, 0x35, i_q+1, 0x36, i_q+1, 0x37, i_q+1, 0x38, i_q+1, 0x39, i_q+1, 0x3A, i_q+1, 0x3B, i_q+1, 0x3C, i_q+1, 0x3D, i_q+1, 0x3E, i_q+1, 0x3F, i_q+1}

MaxQuantityAllItems = createTimer(nil, false)
mqai = MaxQuantityAllItems
mqai.OnTimer = function(ne)
           writeBytes(base_mem + cfg.menu_items_base, menu_items_bytes_sorted)
end

mqai.Interval = 100
mqai.Enabled = true
{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
mqai.destroy()
{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7663</ID>
                  <Description>"&lt;all_key_items_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
all_key_items()
delayed_deactivate(memrec)
{$asm}
 
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>5360</ID>
                  <Description>"&lt;all_materia_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

local args = {
values_table = materia_array,
base_address = base_mem + cfg.materia_base,
type=0,
base_value = 0,
}

local args2 = {
number_of_children = #materia_array,
base_address = base_mem + cfg.materia_base + 1,
base_increment = 4,
base_value = 0xFFFFFF,
type=8,
}

all_materia_ids = lwt(args)
all_materia_mastered = lwt(args2)

all_materia_ids.enabled = true
all_materia_mastered.enabled = true

{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

all_materia_ids.destroy()
all_materia_mastered.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7225</ID>
                  <Description>"&lt;uber_starting_gear_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

PowerfulInitialWeapons = createTimer(nil, false)
piw = PowerfulInitialWeapons
piw.OnTimer = function(ne)
    for i = 1, #initial_weapons do
    local offset = initial_weapons[i][2] * cfg.weapon_stats_offset
    local weapon_address = base_mem + cfg.weapon_stats_base + offset
    writeBytes(weapon_address, perfect_weapon_stats_1)
    writeBytes(weapon_address + 15, perfect_weapon_stats_2)
    end

    writeBytes(base_mem + cfg.armour_stats_base, perfect_armour_stats)
    writeBytes(base_mem + cfg.accessory_stats_base, perfect_accessory_stats)
end

piw.Interval = 100
piw.Enabled = true

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

piw.destroy()

for i = 1, #initial_weapons do
local offset = initial_weapons[i][2] * cfg.weapon_stats_offset
local weapon_bytes = initial_weapons[i][3]
local weapon_address = base_mem + cfg.weapon_stats_base + offset
writeBytes(weapon_address, weapon_bytes)
end

writeBytes(base_mem + cfg.armour_stats_base, initial_armour)
writeBytes(base_mem + cfg.accessory_stats_base, initial_accessory)

{$asm}

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7080</ID>
              <Description>"&lt;in_battle_cheats&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>6884</ID>
                  <Description>"&lt;lucky_7_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}

current_hp = battle_hp_current(true, 7777)
max_hp = battle_hp_max(true, 7777)

{$asm}

[DISABLE]
{$lua}

current_hp.destroy()
max_hp.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>4983</ID>
                  <Description>"&lt;1_hp_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}

current_hp = battle_hp_current(true, 1)

{$asm}

[DISABLE]
{$lua}

current_hp.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7666</ID>
                  <Description>"&lt;max_hp_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}

current_hp = battle_hp_current(true, 9999)
max_hp = battle_hp_max(true, 9999)

{$asm}

[DISABLE]
{$lua}

current_hp.destroy()
max_hp.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>6866</ID>
                  <Description>"&lt;max_mp_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

current_mana = battle_mp_current(true, 999)
max_mana = battle_mp_max(true, 999)

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
current_mana.destroy()
max_mana.destroy()
{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7587</ID>
                  <Description>"&lt;fast_limit_breaks_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

flb = fast_limit_breaks(true)

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

flb.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7588</ID>
                  <Description>"&lt;full_atb_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

fatb = full_atb(true)

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

fatb.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7079</ID>
              <Description>"&lt;random_battle_cheats&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>7076</ID>
                  <Description>"&lt;fast_encounters_world&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}
fwre = frequent_world_battles(true)
{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
fwre.Destroy()
{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7077</ID>
                  <Description>"&lt;no_encounters_world&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}
nwre = no_world_battles(true)
{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
nwre.Destroy()
writeBytes(base_mem + cfg.random_battles_world_enabled, 1)
{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>4943</ID>
                  <Description>"&lt;fast_encounters_field&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}
ffre = frequent_field_battles(true)
{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
ffre.Destroy()
{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>4980</ID>
                  <Description>"&lt;no_encounters_field&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}
nfre = no_field_battles(true)
{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}
nfre.Destroy()
{$asm}

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7082</ID>
              <Description>"&lt;misc_cheats&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>5363</ID>
                  <Description>"&lt;save_phs_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

local args = {
parent = memrec,
base_address = base_mem,
base_offset = cfg.save_phs,
base_value = 0,
type = 1,
}

save_anywhere = lwt(args)
save_anywhere.enabled = true

{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

save_anywhere.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7503</ID>
                  <Description>"&lt;debug_room_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

local args = {
parent = memrec,
base_address = base_mem,
base_offset = cfg.current_screen,
base_value = 65,
type = 0,
}

debug_room = lwt(args)
debug_room.Interval = 20
debug_room.enabled = true

{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

debug_room.destroy()

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7504</ID>
                  <Description>"&lt;speed_hack_cheat&gt;"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

speedhack_setSpeed(5)

{$asm}
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

speedhack_setSpeed(1)

{$asm}

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>7667</ID>
                  <Description>"&lt;rgb_theme_menu&gt;"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7669</ID>
                      <Description>"&lt;select_theme_script&gt;"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]

{$lua}

prompt_theme()

delayed_deactivate(memrec)

{$asm}
 
[DISABLE]

{$lua}

{$asm}

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7670</ID>
                      <Description>"&lt;previous_theme_script&gt;"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]

{$lua}

if current_theme then
else
current_theme = 1
end

theme_setter(current_theme - 1)

delayed_deactivate(memrec)

{$asm}
 
[DISABLE]

{$lua}

{$asm}

</AssemblerScript>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>17</Key>
                            <Key>188</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7668</ID>
                      <Description>"&lt;next_theme_script&gt;"</Description>
                      <LastState/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]

{$lua}

if current_theme then
else
current_theme = 1
end

theme_setter(current_theme + 1)

delayed_deactivate(memrec)

{$asm}
 
[DISABLE]

{$lua}

{$asm}

</AssemblerScript>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Toggle Activation</Action>
                          <Keys>
                            <Key>17</Key>
                            <Key>190</Key>
                          </Keys>
                          <ID>0</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4839</ID>
          <Description>"&lt;stats_menu&gt;"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>6146</ID>
              <Description>"&lt;timers_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>5653</ID>
                  <Description>"Total play time"</Description>
                  <LastState Value="27322" RealAddress="1AA96F84"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>base_mem + cfg.total_play_time</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6162</ID>
                  <Description>"Assorted timers"</Description>
                  <LastState Value="38212" RealAddress="1AA96F88"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + cfg.total_play_time + 0x4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4978</ID>
              <Description>"&lt;displayed_stats&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

for i = 1, 3 do
   local e = getAddressList().createMemoryRecord()
   e.description = battle_char_names[i]
   e.type = 11
   local e_scr = [[
local args = {
parent = memrec,
base_address = base_mem + cfg.menu_stats_base + ( cfg.menu_stats_offset * ITERATION_NUM),
descriptions_list = display_stats,
}

lcm(args)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"
]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat

{$lua}

lcd(memrec, true)

{$asm}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4979</ID>
              <Description>"&lt;real_stats_by_char&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

for i = 1, #chr_names[current_lang] do
   local e = getAddressList().createMemoryRecord()
   -- e.description = char_names[i]
   e.description = chr_names[current_lang][i]
   e.type = 11
   local e_scr = [[
local args = {
parent = memrec,
base_address = base_mem + cfg.real_stats_base + ( cfg.real_stats_offset * ITERATION_NUM),
-- descriptions_list = real_stats,
args_table = createShapedTable(real_stats, true, true),
}

lcm(args)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"
]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat

{$lua}

lcd(memrec, true)

{$asm}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5656</ID>
              <Description>"&lt;real_stats_by_stat&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

for i = 1, #real_stats do
   local e = getAddressList().createMemoryRecord()
   e.description = real_stats[i][3]
   e.type = 11
   local e_scr = [[
local args = {
parent = memrec,
base_address = base_mem + cfg.real_stats_base + ITERATION_OFFSET,
descriptions_list = lazy_tables_maker(chr_names[current_lang], 0, cfg.real_stats_offset, "off", "desc"),
type = ITERATION_TYPE,
}

lcm(args)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"
]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   e_scr = e_scr:gsub("ITERATION_TYPE", real_stats[i][2])
   e_scr = e_scr:gsub("ITERATION_OFFSET", real_stats[i][1])
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat

{$lua}

lcd(memrec, true)

{$asm}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5029</ID>
              <Description>"&lt;battle_stats_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

for i = 1, 3 do
   local e = getAddressList().createMemoryRecord()
   e.description = battle_char_names[i]
   e.type = 11
   local e_scr = [[
local args = {
parent = memrec,
base_address = base_mem + cfg.battle_stats_base + (cfg.battle_stats_offset * ITERATION_NUM),
descriptions_list = battle_stats,
}

local args2 = {
parent = memrec,
base_address = base_mem + cfg.battle_atb_base + (cfg.battle_atb_offset * ITERATION_NUM),
descriptions_list = battle_atb,
}

local args3 = {
parent = memrec,
base_address = base_mem + cfg.battle_limit_break_base + (cfg.battle_limit_break_offset * ITERATION_NUM),
descriptions_list = battle_limit_break,
}

lcm(args2)
lcm(args3)
lcm(args)

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat

{$lua}

lcd(memrec, true)

{$asm}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5654</ID>
              <Description>"&lt;accessory_stats_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}

for i = 1, #acc_names[current_lang] do
   local e = getAddressList().createMemoryRecord()
   -- e.description = armour_names[i]
   e.description = acc_names[current_lang][i]
   e.type = 11
   local e_scr = [[



local args = {
parent = memrec,
base_address = base_mem + cfg.accessory_stats_base + ( cfg.accessory_stats_offset * ITERATION_NUM ),
args_table = createShapedTable(accessory_stats),
}

lcm(args)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>7671</ID>
              <Description>"&lt;armour_stats_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}

for i = 1, #arm_names[current_lang] do
   local e = getAddressList().createMemoryRecord()
   -- e.description = armour_names[i]
   e.description = arm_names[current_lang][i]
   e.type = 11
   local e_scr = [[



local args = {
parent = memrec,
base_address = base_mem + cfg.armour_stats_base + ( cfg.armour_stats_offset * ITERATION_NUM ),
args_table = createShapedTable(armour_stats),
}

lcm(args)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5506</ID>
              <Description>"&lt;weapon_stats_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}

for i = 1, #wpn_names[current_lang] do
   local e = getAddressList().createMemoryRecord()
   -- e.description = weapon_names[i]
   e.description = wpn_names[current_lang][i]
   e.type = 11
   local e_scr = [[



local args = {
parent = memrec,
base_address = base_mem + cfg.weapon_stats_base + ( cfg.weapon_stats_offset * ITERATION_NUM ),
args_table = createShapedTable(weapon_stats),
}

lcm(args)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>6145</ID>
              <Description>"&lt;chocobo_stats_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{$lua}

for i = 1, 6 do
   local e = getAddressList().createMemoryRecord()
   e.description = 'Stable ' .. tostring(i)
   e.type = 11
   local e_scr = [[
local args = {
parent = memrec,
base_address = base_mem + cfg.chocobo_stats_1_base + (cfg.chocobo_stats_1_offset * ITERATION_NUM),
args_table = createShapedTable(chocobo_stats_1),
}

local args2 = {
parent = memrec,
base_address = base_mem + cfg.chocobo_stats_2_base + (cfg.chocobo_stats_2_offset * ITERATION_NUM),
args_table = createShapedTable(chocobo_stats_2),
}

lcm(args)
lcm(args2)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

]]
   e_scr = e_scr:gsub("ITERATION_NUM", tostring(i-1))
   local d_scr = "lcd(memrec)\nmemrec.Options = nil\n"
   local scr_str = s_en .. s_lua .. e_scr .. s_asm .. s_dis .. s_lua .. d_scr .. s_asm
   e.script = scr_str
   e.appendToEntry(memrec)

end

memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}

[DISABLE]
//code from here till the end of the code will be used to disable the cheat

{$lua}

lcd(memrec, true)

{$asm}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5431</ID>
              <Description>"&lt;post_battle_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>5428</ID>
                  <Description>"Gil"</Description>
                  <LastState Value="0" RealAddress="1AA97500"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + cfg.post_battle + 8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4984</ID>
                  <Description>"EXP"</Description>
                  <LastState Value="0" RealAddress="1AA974F8"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + cfg.post_battle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4985</ID>
                  <Description>"AP"</Description>
                  <LastState Value="0" RealAddress="1AA974FC"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + cfg.post_battle + 4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7083</ID>
              <Description>"&lt;battles_entered&gt;"</Description>
              <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">65535:Everything
</DropDownList>
              <LastState Value="0" RealAddress="1AA96FC0"/>
              <VariableType>2 Bytes</VariableType>
              <Address>base_mem + cfg.save_phs - 6</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>7084</ID>
              <Description>"&lt;battles_fled&gt;"</Description>
              <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">65535:Everything
</DropDownList>
              <LastState Value="0" RealAddress="1AA96FC2"/>
              <VariableType>2 Bytes</VariableType>
              <Address>base_mem + cfg.save_phs - 4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4967</ID>
          <Description>"&lt;inventory_menu&gt;"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>4986</ID>
              <Description>"Gil"</Description>
              <LastState Value="240" RealAddress="1AA96F80"/>
              <VariableType>4 Bytes</VariableType>
              <Address>base_mem + cfg.gil</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>6222</ID>
              <Description>"GP"</Description>
              <LastState Value="0" RealAddress="1AA970F2"/>
              <VariableType>4 Bytes</VariableType>
              <Address>base_mem + cfg.gil + 0x172</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>6401</ID>
              <Description>"&lt;battle_points&gt;"</Description>
              <LastState Value="0" RealAddress="1AA970F8"/>
              <VariableType>2 Bytes</VariableType>
              <Address>base_mem + cfg.gil + 0x178</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>6399</ID>
              <Description>"&lt;battle_arena_points&gt;"</Description>
              <LastState Value="0" RealAddress="1AA97018"/>
              <VariableType>4 Bytes</VariableType>
              <Address>base_mem + cfg.gil + 0x98</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>5422</ID>
              <Description>"&lt;menu_items_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

local args = {
parent = memrec,
number_of_children = 320,
base_address = base_mem + cfg.menu_items_base,
base_increment = 2,
custom_type_name = "Menu Item ID",
desc_prepend = tr.item_id.prepend[current_lang] .. " ",
desc_append = " " .. tr.item_id.append[current_lang],
dropdown_linked = "menu_item_id_template",
}

local args2 = {
parent = memrec,
nested = true,
number_of_children = 320,
base_address = base_mem + cfg.menu_items_base,
base_increment = 2,
custom_type_name = "Menu Item Qty",
desc_prepend = "Item Slot ",
desc_append = " Quantity",
}

lcm(args)
lcm(args2)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}
 
 
[DISABLE]
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5423</ID>
              <Description>"&lt;battle_items_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

local num_children = 320

local args = {
parent = memrec,
number_of_children = num_children,
base_address = base_mem + cfg.battle_items_base,
base_increment = 6,
type = 1,
desc_prepend = tr.item_id.prepend[current_lang] .. " ",
desc_append = " " .. tr.item_id.append[current_lang],
dropdown_linked = "menu_item_id_template",
}

local args2 = {
parent = memrec,
number_of_children = num_children,
base_address = base_mem + cfg.battle_items_base,
base_offset = 2,
base_increment = 6,
type = 0,
desc_prepend = "Item Slot ",
desc_append = " Quantity",
nested = true,
}

lcm(args)
lcm(args2)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}
 
 
[DISABLE]
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5359</ID>
              <Description>"&lt;materia_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}

local args = {
parent = memrec,
number_of_children = 200,
-- number_of_children = 4,
base_address = base_mem + cfg.materia_base,
base_increment = 4,
-- base_value = 0,
-- value_increment = 1,
-- min_value = 0,
-- max_value = 0x5A,
desc_prepend = tr.materia_id.prepend[current_lang] .. " ",
desc_append = " " .. tr.materia_id.append[current_lang],
type=0,
dropdown_linked = "materia_id_template",
}

local args2 = {
parent = memrec,
nested = true,
number_of_children = 200,
desc_prepend = tr.materia_exp.prepend[current_lang] .. " ",
desc_append = " " .. tr.materia_exp.append[current_lang],
base_address = base_mem + cfg.materia_base + 1,
base_increment = 4,
type=1,
custom_type_name = "3 Bytes",
dropdown_linked = "materia_exp_template",
}

lcm(args)
lcm(args2)
memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4988</ID>
          <Description>"&lt;misc_menu&gt;"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>7795</ID>
              <Description>"Show table information ( English only )"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

show_memo(table_info, 1000, 600)
delayed_deactivate(memrec)

{$asm}

[DISABLE]
{$lua}

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5354</ID>
              <Description>"&lt;templates_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>5651</ID>
                  <Description>"weapon_stat_bonus_template"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">255:None
</DropDownList>
                  <LastState Value="255" RealAddress="1AA6D5D9"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x738B9</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5507</ID>
                  <Description>"weapon_range_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">3:Long Range
35:Close Range
</DropDownList>
                  <LastState Value="35" RealAddress="1AA6D5C0"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x738A0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7808</ID>
                  <Description>"weapon_status_effect_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:None
0:Death
1:Near-death
2:Sleep
3:Poison
4:Sadness
5:Fury
6:Confusion
7:Silence
8:Haste
9:Slow
10:Stop
11:Frog
12:Small
13:Slow-numb
14:Petrify
15:Regen
16:Barrier
17:MBarrier
18:Reflect
19:Dual
20:Shield
21:Death-sentence
22:Manipulate
23:Berserk
24:Peerless
25:Paralyzed
26:Darkness
</DropDownList>
                  <LastState Value="255" RealAddress="1AA6D5C5"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.weapon_stats_base + 0x5</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5355</ID>
                  <Description>"menu_item_id_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">65535:Empty
0:Potion
1:Hi-Potion
2:X-Potion
3:Ether
4:Turbo Ether
5:Elixir
6:Megalixir
7:Phoenix Down
8:Antidote
9:Soft
10:Maiden's Kiss
11:Cornucopia
12:Echo Screen
13:Hyper
14:Tranquilizer
15:Remedy
16:Smoke Bomb
17:Speed Drink
18:Hero Drink
19:Vaccine
20:Grenade
21:Shrapnel
22:Right arm
23:Hourglass
24:Kiss of Death
25:Spider Web
26:Dream Powder
27:Mute Mask
28:War Gong
29:Loco weed
30:Fire Fang
31:Fire Veil
32:Antarctic Wind
33:Ice Crystal
34:Bolt Plume
35:Swift Bolt
36:Earth Drum
37:Earth Mallet
38:Deadly Waste
39:M-Tentacles
40:Stardust
41:Vampire Fang
42:Ghost Hand
43:Vagyrisk Claw
44:Light Curtain
45:Lunar Curtain
46:Mirror
47:Holy Torch
48:Bird Wing
49:Dragon Scales
50:Impaler
51:Shrivel
52:Eye drop
53:Molotov
54:S-mine
55:8inch Cannon
56:Graviball
57:T/S Bomb
58:Ink
59:Dazers
60:Dragon Fang
61:Cauldron
62:Sylkis Greens
63:Reagan Greens
64:Mimett Greens
65:Curiel Greens
66:Pahsana Greens
67:Tantal Greens
68:Krakka Greens
69:Gysahl Greens
70:Tent
71:Power Source
72:Guard Source
73:Magic Source
74:Mind Source
75:Speed Source
76:Luck Source
77:Zeio Nut
78:Carob Nut
79:Porov Nut
80:Pram Nut
81:Lasan Nut
82:Saraha Nut
83:Luchile Nut
84:Pepio Nut
85:Battery
86:Tissue
87:Omnislash
88:Catastrophe
89:Final Heaven
90:Great Gospel
91:Cosmo Memory
92:All Creation
93:Chaos
94:Highwind
95:1/35 soldier
96:Super Sweeper
97:Masamune Blade
98:Save Crystal
99:Combat Diary
100:Autograph
101:Gambler
102:Desert Rose
103:Earth Harp
104:Guide Book
128:Buster Sword
129:Mythril Saber
130:Hardedge
131:Butterfly Edge
132:Enhance Sword
133:Organics
134:Crystal Sword
135:Force Stealer
136:Rune Blade
137:Murasame
138:Nail Bat
139:Yoshiyuki
140:Apocalypse
141:Heaven's Cloud
142:Ragnarok
143:Ultima Weapon
144:Leather Glove
145:Metal Knuckle
146:Mythril Claw
147:Grand Glove
148:Tiger Fang
149:Diamond Knuckle
150:Dragon Claw
151:Crystal Glove
152:Motor Drive
153:Platinum Fist
154:Kaiser Knuckle
155:Work Glove
156:Powersoul
157:Master Fist
158:God's Hand
159:Premium Heart
160:Gatling Gun
161:Assault Gun
162:Cannon Ball
163:Atomic Scissors
164:Heavy Vulcan
165:Chainsaw
166:Microlaser
167:A.M Cannon
168:W Machine Gun
169:Drill Arm
170:Solid Bazooka
171:Rocket Punch
172:Enemy Launcher
173:Pile Banger
174:Max Ray
175:Missing Score
176:Mythril Clip
177:Diamond Pin
178:Silver Barrette
179:Gold Barrette
180:Adaman Clip
181:Crystal Comb
182:Magic Comb
183:Plus Barrette
184:Centclip
185:Hairpin
186:Seraph Comb
187:Behemoth Horn
188:Spring Gun Clip
189:Limited Moon
190:Guard Stick
191:Mythril Rod
192:Full Metal Staff
193:Striking Staff
194:Prism Staff
195:Aurora Rod
196:Wizard Staff
197:Wizer Staff
198:Fairy Tale
199:Umbrella
200:Princess Guard
201:Spear
202:Slash Lance
203:Trident
204:Mast Ax
205:Partisan
206:Viper Halberd
207:Javelin
208:Grow Lance
209:Mop
210:Dragoon Lance
211:Scimitar
212:Flayer
213:Spirit Lance
214:Venus Gospel
215:4-point Shuriken
216:Boomerang
217:Pinwheel
218:Razor Ring
219:Hawkeye
220:Crystal Cross
221:Wind Slash
222:Twin Viper
223:Spiral Shuriken
224:Superball
225:Magic Shuriken
226:Rising Sun
227:Oritsuru
228:Conformer
229:Yellow M-phone
230:Green M-phone
231:Blue M-phone
232:Red M-phone
233:Crystal M-phone
234:White M-phone
235:Black M-phone
236:Silver M-phone
237:Trumpet Shell
238:Gold M-phone
239:Battle Trumpet
240:Starlight Phone
241:HP Shout
242:Quicksilver
243:Shotgun
244:Shortbarrel
245:Lariat
246:Winchester
247:Peacemaker
248:Buntline
249:Long Barrel R
250:Silver Rifle
251:Sniper CR
252:Supershot ST
253:Outsider
254:Death Penalty
255:Masamune
256:Bronze Bangle
257:Iron Bangle
258:Titan Bangle
259:Mythril Armlet
260:Carbon Bangle
261:Silver Armlet
262:Gold Armlet
263:Diamond Bangle
264:Crystal Bangle
265:Platinum Bangle
266:Rune Armlet
267:Edincoat
268:Wizard Bracelet
269:Adaman Bangle
270:Gigas Armlet
271:Imperial Guard
272:Aegis Armlet
273:Fourth Bracelet
274:Warrior Bangle
275:Shinra Beta
276:Shinra Alpha
277:Four Slots
278:Fire Armlet
279:Aurora Armlet
280:Bolt Armlet
281:Dragon Armlet
282:Minerva Band
283:Escort Guard
284:Mystile
285:Ziedrich
286:Precious Watch
287:Chocobracelet
288:Power Wrist
289:Protect Vest
290:Earring
291:Talisman
292:Choco Feather
293:Amulet
294:Champion Belt
295:Poison Ring
296:Touph Ring
297:Circlet
298:Star Pendant
299:Silver Glasses
300:Headband
301:Fairy Ring
302:Jem Ring
303:White Cape
304:Sprint Shoes
305:Peace Ring
306:Ribbon
307:Fire Ring
308:Ice Ring
309:Bolt Ring
310:Tetra Elemental
311:Safety Bit
312:Fury Ring
313:Curse Ring
314:Protect Ring
315:Cat's Bell
316:Reflect Ring
317:Water Ring
318:Sneak Glove
319:HypnoCrown
</DropDownList>
                  <LastState Value="" RealAddress="1AA96900"/>
                  <VariableType>Custom</VariableType>
                  <CustomType>Menu Item ID</CustomType>
                  <Address>base_mem + 0x9CBE0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5508</ID>
                  <Description>"materia_slots_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0000:Empty
0005:[ · ]
0505:[ · ]  [ · ]
0706:[ · ]==[ · ]
0302:[O]==[O]
</DropDownList>
                  <LastState Value="0706" RealAddress="1AA6D5DC"/>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + 0x738BC</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5358</ID>
                  <Description>"materia_id_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:Empty
0:MP Plus
1:HP Plus
2:Speed Plus
3:Magic Plus
4:Luck Plus
5:EXP Plus
6:Gil Plus
7:Enemy Away
8:Enemy Lure
9:Chocobo Lure
10:Pre-Emptive
11:Long Range
12:Mega All
13:Counter Attack
14:Slash-All
15:Double Cut
16:Cover
17:Underwater
18:HP&lt;-&gt;MP
19:W-Magic
20:W-Summon
21:W-Item
23:All
24:Counter
25:Magic Counter
26:MP Turbo
27:MP Absorb
28:HP Absorb
29:Elemental
30:Added Effect
31:Sneak Attack
32:Final Attack
33:Added Cut
34:Steal as well
35:Quadra Magic
36:Steal
37:Sense
39:Throw
40:Morph
41:Deathblow
42:Manipulate
43:Mime
44:Enemy Skill
48:Master Command
49:Fire
50:Ice
51:Earth
52:Lightning
53:Restore
54:Heal
55:Revive
56:Seal
57:Mystify
58:Transform
59:Exit
60:Poison
61:Gravity
62:Barrier
64:Comet
65:Time
68:Destruct
69:Contain
70:Full Cure
71:Shield
72:Ultima
73:Master Magic
74:Choco/Mog
75:Shiva
76:Ifrit
77:Ramuh
78:Titan
79:Odin
80:Leviathan
81:Bahamut
82:Kjata
83:Alexander
84:Phoenix
85:Neo Bahamut
86:Hades
87:Typoon
88:Bahamut ZERO
89:Knights of Round
90:Master Summon
</DropDownList>
                  <LastState Value="255" RealAddress="1AA96B80"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9CE60</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5509</ID>
                  <Description>"materia_growth_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Nothing
1:Normal
2:Double
3:Triple
</DropDownList>
                  <LastState Value="1" RealAddress="1AA6D5C6"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x738A6</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5424</ID>
                  <Description>"materia_exp_template"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">16777215:Master
</DropDownList>
                  <LastState Value="16777215" RealAddress="1AA96B81"/>
                  <VariableType>Custom</VariableType>
                  <CustomType>3 Bytes</CustomType>
                  <Address>base_mem + 0x9CE60 + 1</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6418</ID>
                  <Description>"equipped_weapon_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Buster Sword
1:Mythril Saber
2:Hardedge
3:Butterfly Edge
4:Enhance Sword
5:Organics
6:Crystal Sword
7:Force Stealer
8:Rune Blade
9:Murasame
10:Nail Bat
11:Yoshiyuki
12:Apocalypse
13:Heaven's Cloud
14:Ragnarok
15:Ultima Weapon
16:Leather Glove
17:Metal Knuckle
18:Mythril Claw
19:Grand Glove
20:Tiger Fang
21:Diamond Knuckle
22:Dragon Claw
23:Crystal Glove
24:Motor Drive
25:Platinum Fist
26:Kaiser Knuckle
27:Work Glove
28:Powersoul
29:Master Fist
30:God's Hand
31:Premium Heart
32:Gatling Gun
33:Assault Gun
34:Cannon Ball
35:Atomic Scissors
36:Heavy Vulcan
37:Chainsaw
38:Microlaser
39:A.M Cannon
40:W Machine Gun
41:Drill Arm
42:Solid Bazooka
43:Rocket Punch
44:Enemy Launcher
45:Pile Banger
46:Max Ray
47:Missing Score
48:Mythril Clip
49:Diamond Pin
50:Silver Barrette
51:Gold Barrette
52:Adaman Clip
53:Crystal Comb
54:Magic Comb
55:Plus Barrette
56:Centclip
57:Hairpin
58:Seraph Comb
59:Behemoth Horn
60:Spring Gun Clip
61:Limited Moon
62:Guard Stick
63:Mythril Rod
64:Full Metal Staff
65:Striking Staff
66:Prism Staff
67:Aurora Rod
68:Wizard Staff
69:Wizer Staff
70:Fairy Tale
71:Umbrella
72:Princess Guard
73:Spear
74:Slash Lance
75:Trident
76:Mast Ax
77:Partisan
78:Viper Halberd
79:Javelin
80:Grow Lance
81:Mop
82:Dragoon Lance
83:Scimitar
84:Flayer
85:Spirit Lance
86:Venus Gospel
87:4-point Shuriken
88:Boomerang
89:Pinwheel
90:Razor Ring
91:Hawkeye
92:Crystal Cross
93:Wind Slash
94:Twin Viper
95:Spiral Shuriken
96:Superball
97:Magic Shuriken
98:Rising Sun
99:Oritsuru
100:Conformer
101:Yellow M-phone
102:Green M-phone
103:Blue M-phone
104:Red M-phone
105:Crystal M-phone
106:White M-phone
107:Black M-phone
108:Silver M-phone
109:Trumpet Shell
110:Gold M-phone
111:Battle Trumpet
112:Starlight Phone
113:HP Shout
114:Quicksilver
115:Shotgun
116:Shortbarrel
117:Lariat
118:Winchester
119:Peacemaker
120:Buntline
121:Long Barrel R
122:Silver Rifle
123:Sniper CR
124:Supershot ST
125:Outsider
126:Death Penalty
127:Masamune
</DropDownList>
                  <LastState Value="0" RealAddress="1AA96474"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9C754</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6419</ID>
                  <Description>"equipped_armour_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Bronze Bangle
1:Iron Bangle
2:Titan Bangle
3:Mythril Armlet
4:Carbon Bangle
5:Silver Armlet
6:Gold Armlet
7:Diamond Bangle
8:Crystal Bangle
9:Platinum Bangle
10:Rune Armlet
11:Edincoat
12:Wizard Bracelet
13:Adaman Bangle
14:Gigas Armlet
15:Imperial Guard
16:Aegis Armlet
17:Fourth Bracelet
18:Warrior Bangle
19:Shinra Beta
20:Shinra Alpha
21:Four Slots
22:Fire Armlet
23:Aurora Armlet
24:Bolt Armlet
25:Dragon Armlet
26:Minerva Band
27:Escort Guard
28:Mystile
29:Ziedrich
30:Precious Watch
31:Chocobracelet
</DropDownList>
                  <LastState Value="0" RealAddress="1AA96475"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9C755</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6420</ID>
                  <Description>"equipped_accessory_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:Empty
0:Power Wrist
1:Protect Vest
2:Earring
3:Talisman
4:Choco Feather
5:Amulet
6:Champion Belt
7:Poison Ring
8:Touph Ring
9:Circlet
10:Star Pendant
11:Silver Glasses
12:Headband
13:Fairy Ring
14:Jem Ring
15:White Cape
16:Sprint Shoes
17:Peace Ring
18:Ribbon
19:Fire Ring
20:Ice Ring
21:Bolt Ring
22:Tetra Elemental
23:Safety Bit
24:Fury Ring
25:Curse Ring
26:Protect Ring
27:Cat's Bell
28:Reflect Ring
29:Water Ring
30:Sneak Glove
31:HypnoCrown
</DropDownList>
                  <LastState Value="255" RealAddress="1AA96476"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9C756</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5510</ID>
                  <Description>"equippable_character_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:Everyone
0:Cid
1:Cloud
2:Barret
4:Tifa
8:Aeris
16:Red XIII
32:Yuffie
64:Cait Sith
128:Vincent
</DropDownList>
                  <LastState Value="1" RealAddress="1AA6D5CE"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x738AE</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6147</ID>
                  <Description>"chocobo_gender_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Male
1:Female
</DropDownList>
                  <LastState Value="0" RealAddress="1AA971D6"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9D4B6</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6161</ID>
                  <Description>"chocobo_colour_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Yellow
1:Green
2:Blue
3:Black
4:Gold
</DropDownList>
                  <LastState Value="0" RealAddress="1AA971D7"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9D4B7</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6163</ID>
                  <Description>"chocobo_class_template"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:C
1:C
2:C
3:B
4:B
5:B
6:A
7:A
8:A
9:S
</DropDownList>
                  <LastState Value="0" RealAddress="1AA971D5"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9D4B5</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6910</ID>
                  <Description>"character_id_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:Empty
0:Cloud
1:Barret
2:Tifa
3:Aeris
4:Red XIII
5:Yuffie
6:Cait Sith
7:Vincent
8:Cid
10:Sephiroth
</DropDownList>
                  <LastState Value="1" RealAddress="1AA968FC"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x9CBDC</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>5655</ID>
                  <Description>"armour_stat_bonus_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:None
0:Strength
1:Vitality
2:Magic
3:Spirit
4:Dexterity
5:Luck
</DropDownList>
                  <LastState Value="255" RealAddress="1AA6D5D9"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + 0x738B9</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7233</ID>
                  <Description>"debug_flag_template"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">65:Debug enabled
</DropDownList>
                  <LastState Value="0" RealAddress="1AA94916"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.current_screen + 0xB9A</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7502</ID>
                  <Description>"current_screen_template"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">65:Debug Room
</DropDownList>
                  <LastState Value="0" RealAddress="1AA93D7C"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.current_screen</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7542</ID>
                  <Description>"menu_status_effect_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:None
16:Sadness
32:Fury
</DropDownList>
                  <LastState Value="0" RealAddress="1AA96477"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.real_stats_base + 0x1D</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7672</ID>
                  <Description>"elemental_defense_type_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:None
0:Absorb
1:Invalid
2:Halve
</DropDownList>
                  <LastState Value="255" RealAddress="1AA6B948"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.accessory_stats_base + 4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7673</ID>
                  <Description>"auto_status_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">255:None
0:Haste
1:Berserk
2:Doom
3:Reflect
6:Barrier
</DropDownList>
                  <LastState Value="255" RealAddress="1AA6B949"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.accessory_stats_base + 5</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7794</ID>
                  <Description>"has_protection_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Unprotected
1:Protected
</DropDownList>
                  <LastState Value="1" RealAddress="1AA6B94A"/>
                  <VariableType>Binary</VariableType>
                  <BitStart>0</BitStart>
                  <BitLength>1</BitLength>
                  <ShowAsBinary>0</ShowAsBinary>
                  <Address>base_mem + cfg.accessory_stats_base + 6</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7806</ID>
                  <Description>"menu_options_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Unavailable
1:Available
</DropDownList>
                  <LastState Value="0" RealAddress="1AA96FC4"/>
                  <VariableType>Binary</VariableType>
                  <BitStart>0</BitStart>
                  <BitLength>1</BitLength>
                  <ShowAsBinary>0</ShowAsBinary>
                  <Address>base_mem + cfg.save_phs - 2</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8014</ID>
                  <Description>"binary_active_template"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Unavailable
1:Available
</DropDownList>
                  <LastState Value="0" RealAddress="1AA96FC4"/>
                  <VariableType>Binary</VariableType>
                  <BitStart>0</BitStart>
                  <BitLength>1</BitLength>
                  <ShowAsBinary>0</ShowAsBinary>
                  <Address>base_mem + cfg.save_phs - 2</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>5024</ID>
              <Description>"&lt;random_battle_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>7075</ID>
                  <Description>"&lt;random_battle_world_map_menu&gt;"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7072</ID>
                      <Description>"&lt;random_battle_world_map_can_occur&gt;"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:On
0:Off
</DropDownList>
                      <LastState Value="19" RealAddress="1AB0FFA0"/>
                      <VariableType>Byte</VariableType>
                      <Address>base_mem + cfg.random_battles_world_enabled</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>5026</ID>
                      <Description>"&lt;random_battle_world_map_distance&gt;"</Description>
                      <LastState Value="DCDD0011" RealAddress="1AB0FF9C"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>4 Bytes</VariableType>
                      <Address>base_mem + cfg.random_battles_world_safe_distance</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7073</ID>
                      <Description>"&lt;random_battle_world_map_loop&gt;"</Description>
                      <LastState Value="35" RealAddress="1AB0FFA4"/>
                      <VariableType>Byte</VariableType>
                      <Address>base_mem + cfg.random_battles_world_loop_tick</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7074</ID>
                      <Description>"&lt;random_battle_world_map_counter&gt;"</Description>
                      <LastState Value="34" RealAddress="1AB0FFA5"/>
                      <VariableType>Byte</VariableType>
                      <Address>base_mem + cfg.random_battles_world_loop_count</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>7078</ID>
                  <Description>"&lt;random_battle_field_map_menu&gt;"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>5025</ID>
                      <Description>"&lt;random_battle_field_map_loop&gt;"</Description>
                      <LastState Value="0" RealAddress="1AA6B45C"/>
                      <VariableType>2 Bytes</VariableType>
                      <Address>base_mem + cfg.random_battles_field</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7807</ID>
              <Description>"&lt;menu_options_script&gt;"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

local args = {
parent = memrec,
base_address = base_mem + cfg.save_phs - 2,
args_table = menu_options,
}

lcm(args)
-- memrec.Options = "moAllowManualCollapseAndExpand,moManualExpandCollapse"

{$asm}


[DISABLE]
{$lua}

lcd(memrec, true)

{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>6421</ID>
              <Description>"&lt;save_phs&gt;"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0000:Save &amp; PHS
0100:Save only
0200:PHS only
0300:Disabled
</DropDownList>
              <LastState Value="0000" RealAddress="1AA96FC6"/>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>2 Bytes</VariableType>
              <Address>base_mem + cfg.save_phs</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>7230</ID>
              <Description>"&lt;debug_mode_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>7231</ID>
                  <Description>"&lt;debug_mode_1&gt;"</Description>
                  <DropDownListLink>current_screen_template</DropDownListLink>
                  <LastState Value="0" RealAddress="1AA93D7C"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + cfg.current_screen</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7232</ID>
                  <Description>"&lt;debug_mode_2&gt;"</Description>
                  <DropDownListLink>debug_flag_template</DropDownListLink>
                  <LastState Value="0" RealAddress="1AA94916"/>
                  <VariableType>2 Bytes</VariableType>
                  <Address>base_mem + cfg.debug_mode_2</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>7060</ID>
              <Description>"&lt;config_menu_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>6408</ID>
                  <Description>"&lt;menu_rgb&gt;"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>7486</ID>
                      <Description>"&lt;rgb_array&gt;"</Description>
                      <LastState Value="0 88 176 0 0 128 0 0 80 0 0 32 88 2 0 0" RealAddress="1AA42F28"/>
                      <VariableType>Array of byte</VariableType>
                      <ByteLength>16</ByteLength>
                      <Address>base_mem + cfg.menu_rgb</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>7063</ID>
                      <Description>"&lt;rgb_top_left&gt;"</Description>
                      <LastState Value="0 88 176" RealAddress="1AA42F28"/>
                      <VariableType>Array of byte</VariableType>
                      <ByteLength>3</ByteLength>
                      <Address>base_mem + cfg.menu_rgb</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>6412</ID>
                      <Description>"&lt;rgb_top_right&gt;"</Description>
                      <LastState Value="0 0 128" RealAddress="1AA42F2B"/>
                      <VariableType>Array of byte</VariableType>
                      <ByteLength>3</ByteLength>
                      <Address>base_mem + cfg.menu_rgb + cfg.menu_rgb_offset</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>6413</ID>
                      <Description>"&lt;rgb_bottom_left&gt;"</Description>
                      <LastState Value="0 0 80" RealAddress="1AA42F2E"/>
                      <VariableType>Array of byte</VariableType>
                      <ByteLength>3</ByteLength>
                      <Address>base_mem + cfg.menu_rgb + (cfg.menu_rgb_offset * 2)</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>6414</ID>
                      <Description>"&lt;rgb_bottom_right&gt;"</Description>
                      <LastState Value="0 0 32" RealAddress="1AA42F31"/>
                      <VariableType>Array of byte</VariableType>
                      <ByteLength>3</ByteLength>
                      <Address>base_mem + cfg.menu_rgb + (cfg.menu_rgb_offset * 3)</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>6402</ID>
                  <Description>"&lt;battle_speed&gt;"</Description>
                  <LastState Value="0" RealAddress="1AA974DC"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.config_menu_settings</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7061</ID>
                  <Description>"&lt;battle_message_speed&gt;"</Description>
                  <LastState Value="0" RealAddress="1AA974DD"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.config_menu_settings + 1</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7062</ID>
                  <Description>"&lt;field_message_speed&gt;"</Description>
                  <LastState Value="0" RealAddress="1AA974F0"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.config_menu_settings + 0x14</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>6909</ID>
              <Description>"&lt;current_roster_menu&gt;"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>6906</ID>
                  <Description>"&lt;roster_top_char&gt;"</Description>
                  <DropDownListLink>character_id_template</DropDownListLink>
                  <LastState Value="1" RealAddress="1AA968FC"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.current_roster</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6908</ID>
                  <Description>"&lt;roster_mid_char&gt;"</Description>
                  <DropDownListLink>character_id_template</DropDownListLink>
                  <LastState Value="2" RealAddress="1AA968FD"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.current_roster + 1</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6907</ID>
                  <Description>"&lt;roster_bot_char&gt;"</Description>
                  <DropDownListLink>character_id_template</DropDownListLink>
                  <LastState Value="0" RealAddress="1AA968FE"/>
                  <VariableType>Byte</VariableType>
                  <Address>base_mem + cfg.current_roster + 2</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
